function cov_1drh8655dw(){var path="C:\\Users\\nathn\\Desktop\\final project\\admin-next-app\\.next\\static\\chunks\\fallback\\pages\\_error.js";var hash="5c5b6779b3c3c060cc5eac41e3138826f0a06199";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\nathn\\Desktop\\final project\\admin-next-app\\.next\\static\\chunks\\fallback\\pages\\_error.js",statementMap:{"0":{start:{line:9,column:0},end:{line:83,column:3}},"1":{start:{line:17,column:0},end:{line:17,column:1508}},"2":{start:{line:28,column:0},end:{line:28,column:18958}},"3":{start:{line:39,column:0},end:{line:39,column:5882}},"4":{start:{line:50,column:0},end:{line:50,column:8020}},"5":{start:{line:61,column:0},end:{line:61,column:32204}},"6":{start:{line:72,column:0},end:{line:72,column:14241}},"7":{start:{line:78,column:32},end:{line:78,column:116}},"8":{start:{line:78,column:53},end:{line:78,column:114}},"9":{start:{line:79,column:9},end:{line:79,column:238}},"10":{start:{line:79,column:70},end:{line:79,column:234}},"11":{start:{line:80,column:35},end:{line:80,column:58}},"12":{start:{line:81,column:9},end:{line:81,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:7},end:{line:15,column:8}},loc:{start:{line:15,column:71},end:{line:19,column:7}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:25,column:7},end:{line:25,column:8}},loc:{start:{line:25,column:54},end:{line:30,column:7}},line:25},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:7},end:{line:36,column:8}},loc:{start:{line:36,column:54},end:{line:41,column:7}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:47,column:7},end:{line:47,column:8}},loc:{start:{line:47,column:54},end:{line:52,column:7}},line:47},"4":{name:"(anonymous_4)",decl:{start:{line:58,column:7},end:{line:58,column:8}},loc:{start:{line:58,column:54},end:{line:63,column:7}},line:58},"5":{name:"(anonymous_5)",decl:{start:{line:69,column:7},end:{line:69,column:8}},loc:{start:{line:69,column:54},end:{line:74,column:7}},line:69},"6":{name:"(anonymous_6)",decl:{start:{line:77,column:9},end:{line:77,column:10}},loc:{start:{line:77,column:39},end:{line:82,column:10}},line:77},"7":{name:"(anonymous_7)",decl:{start:{line:78,column:32},end:{line:78,column:33}},loc:{start:{line:78,column:51},end:{line:78,column:116}},line:78},"8":{name:"(anonymous_8)",decl:{start:{line:79,column:57},end:{line:79,column:58}},loc:{start:{line:79,column:68},end:{line:79,column:236}},line:79}},branchMap:{"0":{loc:{start:{line:9,column:28},end:{line:9,column:58}},type:"binary-expr",locations:[{start:{line:9,column:28},end:{line:9,column:52}},{start:{line:9,column:56},end:{line:9,column:58}}],line:9}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5c5b6779b3c3c060cc5eac41e3138826f0a06199"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1drh8655dw=function(){return actualCoverage;};}return actualCoverage;}cov_1drh8655dw();cov_1drh8655dw().s[0]++;/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */(self["webpackChunk_N_E"]=(cov_1drh8655dw().b[0][0]++,self["webpackChunk_N_E"])||(cov_1drh8655dw().b[0][1]++,[])).push([["pages/_error"],{/***/"./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=next%2Fdist%2Fpages%2F_error&page=%2F_error!":/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=next%2Fdist%2Fpages%2F_error&page=%2F_error! ***!
  \************************************************************************************************************************************************/ /***/function(module,__unused_webpack_exports,__webpack_require__){cov_1drh8655dw().f[0]++;cov_1drh8655dw().s[1]++;eval("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_error\",\n      function () {\n        return __webpack_require__(/*! next/dist/pages/_error */ \"./node_modules/next/dist/pages/_error.js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_error\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1uZXh0JTJGZGlzdCUyRnBhZ2VzJTJGX2Vycm9yJnBhZ2U9JTJGX2Vycm9yIS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHdFQUF3QjtBQUMvQztBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/MDgwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL19lcnJvclwiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIm5leHQvZGlzdC9wYWdlcy9fZXJyb3JcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL19lcnJvclwiXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=next%2Fdist%2Fpages%2F_error&page=%2F_error!\n");/***/},/***/"./node_modules/next/dist/pages/_error.js":/*!************************************************!*\
  !*** ./node_modules/next/dist/pages/_error.js ***!
  \************************************************/ /***/function(module,exports,__webpack_require__){"use strict";cov_1drh8655dw().f[1]++;cov_1drh8655dw().s[2]++;eval("\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\");\n\nvar _inherits = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js\");\n\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js\");\n\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _head = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar statusCodes = {\n  400: 'Bad Request',\n  404: 'This page could not be found',\n  405: 'Method Not Allowed',\n  500: 'Internal Server Error'\n};\n\nfunction _getInitialProps(_ref) {\n  var res = _ref.res,\n      err = _ref.err;\n  var statusCode = res && res.statusCode ? res.statusCode : err ? err.statusCode : 404;\n  return {\n    statusCode: statusCode\n  };\n}\n\nvar Error = /*#__PURE__*/function (_react$default$Compon) {\n  _inherits(Error, _react$default$Compon);\n\n  var _super = _createSuper(Error);\n\n  function Error() {\n    _classCallCheck(this, Error);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Error, [{\n    key: \"render\",\n    value: function render() {\n      var statusCode = this.props.statusCode;\n      var title = this.props.title || statusCodes[statusCode] || 'An unexpected error has occurred';\n      return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        style: styles.error\n      }, /*#__PURE__*/_react[\"default\"].createElement(_head[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(\"title\", null, statusCode ? \"\".concat(statusCode, \": \").concat(title) : 'Application error: a client-side exception has occurred')), /*#__PURE__*/_react[\"default\"].createElement(\"div\", null, /*#__PURE__*/_react[\"default\"].createElement(\"style\", {\n        dangerouslySetInnerHTML: {\n          __html: \"\\n                body { margin: 0; color: #000; background: #fff; }\\n                .next-error-h1 {\\n                  border-right: 1px solid rgba(0, 0, 0, .3);\\n                }\\n                @media (prefers-color-scheme: dark) {\\n                  body { color: #fff; background: #000; }\\n                  .next-error-h1 {\\n                    border-right: 1px solid rgba(255, 255, 255, .3);\\n                  }\\n                }\"\n        }\n      }), statusCode ? /*#__PURE__*/_react[\"default\"].createElement(\"h1\", {\n        className: \"next-error-h1\",\n        style: styles.h1\n      }, statusCode) : null, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        style: styles.desc\n      }, /*#__PURE__*/_react[\"default\"].createElement(\"h2\", {\n        style: styles.h2\n      }, this.props.title || statusCode ? title : /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, \"Application error: a client-side exception has occurred (see the browser console for more information)\"), \".\"))));\n    }\n  }]);\n\n  return Error;\n}(_react[\"default\"].Component);\n\nexports[\"default\"] = Error;\nError.displayName = 'ErrorPage';\nError.getInitialProps = _getInitialProps;\nError.origGetInitialProps = _getInitialProps;\nvar styles = {\n  error: {\n    fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, \"Segoe UI\", \"Fira Sans\", Avenir, \"Helvetica Neue\", \"Lucida Grande\", sans-serif',\n    height: '100vh',\n    textAlign: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  desc: {\n    display: 'inline-block',\n    textAlign: 'left',\n    lineHeight: '49px',\n    height: '49px',\n    verticalAlign: 'middle'\n  },\n  h1: {\n    display: 'inline-block',\n    margin: 0,\n    marginRight: '20px',\n    padding: '10px 23px 10px 0',\n    fontSize: '24px',\n    fontWeight: 500,\n    verticalAlign: 'top'\n  },\n  h2: {\n    fontSize: '14px',\n    fontWeight: 'normal',\n    lineHeight: 'inherit',\n    margin: 0,\n    padding: 0\n  }\n};\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/pages/_error.js\n");/***/},/***/"./node_modules/next/dist/shared/lib/amp-context.js":/*!**********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/amp-context.js ***!
  \**********************************************************/ /***/function(module,exports,__webpack_require__){"use strict";cov_1drh8655dw().f[2]++;cov_1drh8655dw().s[3]++;eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AmpStateContext = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar AmpStateContext = _react[\"default\"].createContext({});\n\nexports.AmpStateContext = AmpStateContext;\n\nif (true) {\n  AmpStateContext.displayName = 'AmpStateContext';\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELHVCQUFBLEdBQTBCLEtBQUssQ0FBL0I7O0FBQ0EsSUFBSUcsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DOztBQUNBLFNBQVNELHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQztBQUNqQyxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFDakMsZUFBU0E7QUFEd0IsR0FBckM7QUFHSDs7QUFDRCxJQUFNSixlQUFlLEdBQUdDLE1BQU0sV0FBTixDQUFlSyxhQUFmLENBQTZCLEVBQTdCLENBQXhCOztBQUNBUix1QkFBQSxHQUEwQkUsZUFBMUI7O0FBQ0EsSUFBSSxNQUF1QztBQUN2Q0EsRUFBQUEsZUFBZSxDQUFDTyxXQUFoQixHQUE4QixpQkFBOUI7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanM/ZTVhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQW1wU3RhdGVDb250ZXh0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmNvbnN0IEFtcFN0YXRlQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQoe30pO1xuZXhwb3J0cy5BbXBTdGF0ZUNvbnRleHQgPSBBbXBTdGF0ZUNvbnRleHQ7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIEFtcFN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdBbXBTdGF0ZUNvbnRleHQnO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbXAtY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBbXBTdGF0ZUNvbnRleHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjcmVhdGVDb250ZXh0IiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/amp-context.js\n");/***/},/***/"./node_modules/next/dist/shared/lib/amp.js":/*!**************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/amp.js ***!
  \**************************************************/ /***/function(module,exports,__webpack_require__){"use strict";cov_1drh8655dw().f[3]++;cov_1drh8655dw().s[4]++;eval("\n\nvar _s = $RefreshSig$();\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isInAmpMode = isInAmpMode;\nexports.useAmp = useAmp;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _ampContext = __webpack_require__(/*! ./amp-context */ \"./node_modules/next/dist/shared/lib/amp-context.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction isInAmpMode() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ampFirst = _ref.ampFirst,\n      ampFirst = _ref$ampFirst === void 0 ? false : _ref$ampFirst,\n      _ref$hybrid = _ref.hybrid,\n      hybrid = _ref$hybrid === void 0 ? false : _ref$hybrid,\n      _ref$hasQuery = _ref.hasQuery,\n      hasQuery = _ref$hasQuery === void 0 ? false : _ref$hasQuery;\n\n  return ampFirst || hybrid && hasQuery;\n}\n\nfunction useAmp() {\n  _s();\n\n  // Don't assign the context value to a variable to save bytes\n  return isInAmpMode(_react[\"default\"].useContext(_ampContext.AmpStateContext));\n}\n\n_s(useAmp, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nif (typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) {\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOzs7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELG1CQUFBLEdBQXNCRSxXQUF0QjtBQUNBRixjQUFBLEdBQWlCRyxNQUFqQjs7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkM7O0FBQ0EsSUFBSUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLHlFQUFELENBQXpCOztBQUNBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQztBQUNqQyxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFDakMsZUFBU0E7QUFEd0IsR0FBckM7QUFHSDs7QUFDRCxTQUFTTixXQUFULEdBQW9GO0FBQUEsaUZBQUosRUFBSTtBQUFBLDJCQUE3RFEsUUFBNkQ7QUFBQSxNQUE3REEsUUFBNkQsOEJBQW5ELEtBQW1EO0FBQUEseUJBQTNDQyxNQUEyQztBQUFBLE1BQTNDQSxNQUEyQyw0QkFBbkMsS0FBbUM7QUFBQSwyQkFBM0JDLFFBQTJCO0FBQUEsTUFBM0JBLFFBQTJCLDhCQUFqQixLQUFpQjs7QUFDaEYsU0FBT0YsUUFBUSxJQUFJQyxNQUFNLElBQUlDLFFBQTdCO0FBQ0g7O0FBQ0QsU0FBU1QsTUFBVCxHQUFrQjtBQUFBOztBQUNkO0FBQ0EsU0FBT0QsV0FBVyxDQUFDRSxNQUFNLFdBQU4sQ0FBZVMsVUFBZixDQUEwQk4sV0FBVyxDQUFDTyxlQUF0QyxDQUFELENBQWxCO0FBQ0g7O0dBSFFYLE07O0FBS1QsSUFBSSxPQUFPSCxPQUFPLFdBQWQsS0FBMkIsVUFBM0IsSUFBMEMsT0FBT0EsT0FBTyxXQUFkLEtBQTJCLFFBQTNCLElBQXVDQSxPQUFPLFdBQVAsS0FBb0IsSUFBekcsRUFBZ0g7QUFDOUdGLEVBQUFBLE1BQU0sQ0FBQ2lCLE1BQVAsQ0FBY2YsT0FBTyxXQUFyQixFQUErQkEsT0FBL0I7QUFDQWdCLEVBQUFBLE1BQU0sQ0FBQ2hCLE9BQVAsR0FBaUJBLE9BQU8sV0FBeEI7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLmpzPzVlNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzSW5BbXBNb2RlID0gaXNJbkFtcE1vZGU7XG5leHBvcnRzLnVzZUFtcCA9IHVzZUFtcDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2FtcENvbnRleHQgPSByZXF1aXJlKFwiLi9hbXAtY29udGV4dFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlzSW5BbXBNb2RlKHsgYW1wRmlyc3QgPWZhbHNlICwgaHlicmlkID1mYWxzZSAsIGhhc1F1ZXJ5ID1mYWxzZSAsICB9ID0ge30pIHtcbiAgICByZXR1cm4gYW1wRmlyc3QgfHwgaHlicmlkICYmIGhhc1F1ZXJ5O1xufVxuZnVuY3Rpb24gdXNlQW1wKCkge1xuICAgIC8vIERvbid0IGFzc2lnbiB0aGUgY29udGV4dCB2YWx1ZSB0byBhIHZhcmlhYmxlIHRvIHNhdmUgYnl0ZXNcbiAgICByZXR1cm4gaXNJbkFtcE1vZGUoX3JlYWN0LmRlZmF1bHQudXNlQ29udGV4dChfYW1wQ29udGV4dC5BbXBTdGF0ZUNvbnRleHQpKTtcbn1cblxuaWYgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpIHtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW1wLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzSW5BbXBNb2RlIiwidXNlQW1wIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYW1wQ29udGV4dCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJhbXBGaXJzdCIsImh5YnJpZCIsImhhc1F1ZXJ5IiwidXNlQ29udGV4dCIsIkFtcFN0YXRlQ29udGV4dCIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/amp.js\n");/***/},/***/"./node_modules/next/dist/shared/lib/head.js":/*!***************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/head.js ***!
  \***************************************************/ /***/function(module,exports,__webpack_require__){"use strict";cov_1drh8655dw().f[4]++;cov_1drh8655dw().s[5]++;eval("\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.defaultHead = defaultHead;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _sideEffect = _interopRequireDefault(__webpack_require__(/*! ./side-effect */ \"./node_modules/next/dist/shared/lib/side-effect.js\"));\n\nvar _ampContext = __webpack_require__(/*! ./amp-context */ \"./node_modules/next/dist/shared/lib/amp-context.js\");\n\nvar _headManagerContext = __webpack_require__(/*! ./head-manager-context */ \"./node_modules/next/dist/shared/lib/head-manager-context.js\");\n\nvar _amp = __webpack_require__(/*! ./amp */ \"./node_modules/next/dist/shared/lib/amp.js\");\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/next/dist/shared/lib/utils.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction defaultHead() {\n  var inAmpMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var head = [/*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n    charSet: \"utf-8\"\n  })];\n\n  if (!inAmpMode) {\n    head.push( /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width\"\n    }));\n  }\n\n  return head;\n}\n\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list;\n  } // Adds support for React.Fragment\n\n\n  if (child.type === _react[\"default\"].Fragment) {\n    return list.concat(_react[\"default\"].Children.toArray(child.props.children).reduce(function (fragmentList, fragmentChild) {\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n        return fragmentList;\n      }\n\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n\n  return list.concat(child);\n}\n\nvar METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\n\nfunction unique() {\n  var keys = new Set();\n  var tags = new Set();\n  var metaTypes = new Set();\n  var metaCategories = {};\n  return function (h) {\n    var isUnique = true;\n    var hasKey = false;\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true;\n      var key = h.key.slice(h.key.indexOf('$') + 1);\n\n      if (keys.has(key)) {\n        isUnique = false;\n      } else {\n        keys.add(key);\n      }\n    } // eslint-disable-next-line default-case\n\n\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false;\n        } else {\n          tags.add(h.type);\n        }\n\n        break;\n\n      case 'meta':\n        for (var i = 0, len = METATYPES.length; i < len; i++) {\n          var metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false;\n            } else {\n              metaTypes.add(metatype);\n            }\n          } else {\n            var category = h.props[metatype];\n            var categories = metaCategories[metatype] || new Set();\n\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false;\n            } else {\n              categories.add(category);\n              metaCategories[metatype] = categories;\n            }\n          }\n        }\n\n        break;\n    }\n\n    return isUnique;\n  };\n}\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\n\n\nfunction reduceComponents(headElements, props) {\n  return headElements.reduce(function (list, headElement) {\n    var headElementChildren = _react[\"default\"].Children.toArray(headElement.props.children);\n\n    return list.concat(headElementChildren);\n  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map(function (c, i) {\n    var key = c.key || i;\n\n    if (false) { var newProps; }\n\n    if (true) {\n      // omit JSON-LD structured data snippets from the warning\n      if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n        var srcMessage = c.props['src'] ? \"<script> tag with src=\\\"\".concat(c.props['src'], \"\\\"\") : \"inline <script>\";\n        (0, _utils).warnOnce(\"Do not add <script> tags using next/head (see \".concat(srcMessage, \"). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component\"));\n      } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n        (0, _utils).warnOnce(\"Do not add stylesheets using next/head (see <link rel=\\\"stylesheet\\\"> tag with href=\\\"\".concat(c.props['href'], \"\\\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component\"));\n      }\n    }\n\n    return /*#__PURE__*/_react[\"default\"].cloneElement(c, {\n      key: key\n    });\n  });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\n\n\nfunction Head(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var ampState = (0, _react).useContext(_ampContext.AmpStateContext);\n  var headManager = (0, _react).useContext(_headManagerContext.HeadManagerContext);\n  return /*#__PURE__*/_react[\"default\"].createElement(_sideEffect[\"default\"], {\n    reduceComponentsToState: reduceComponents,\n    headManager: headManager,\n    inAmpMode: (0, _amp).isInAmpMode(ampState)\n  }, children);\n}\n\n_s(Head, \"sCUayZmr5V93tUjujy03KdMBCec=\");\n\n_c = Head;\nvar _default = Head;\nexports[\"default\"] = _default;\n\nif (typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) {\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Head\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/head.js\n");/***/},/***/"./node_modules/next/dist/shared/lib/side-effect.js":/*!**********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/side-effect.js ***!
  \**********************************************************/ /***/function(module,exports,__webpack_require__){"use strict";cov_1drh8655dw().f[5]++;cov_1drh8655dw().s[6]++;eval("\n\nvar _toConsumableArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray.js\");\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\");\n\nvar _assertThisInitialized = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/assertThisInitialized */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/assertThisInitialized.js\");\n\nvar _inherits = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js\");\n\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js\");\n\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nvar isServer = false;\n\nvar _class = /*#__PURE__*/function (_react$Component) {\n  _inherits(_class, _react$Component);\n\n  var _super = _createSuper(_class);\n\n  function _class(props) {\n    var _this;\n\n    _classCallCheck(this, _class);\n\n    _this = _super.call(this, props);\n\n    _this.emitChange = function () {\n      if (_this._hasHeadManager) {\n        _this.props.headManager.updateHead(_this.props.reduceComponentsToState(_toConsumableArray(_this.props.headManager.mountedInstances), _this.props));\n      }\n    };\n\n    _this._hasHeadManager = _this.props.headManager && _this.props.headManager.mountedInstances;\n\n    if (isServer && _this._hasHeadManager) {\n      _this.props.headManager.mountedInstances.add(_assertThisInitialized(_this));\n\n      _this.emitChange();\n    }\n\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._hasHeadManager) {\n        this.props.headManager.mountedInstances.add(this);\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.emitChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._hasHeadManager) {\n        this.props.headManager.mountedInstances[\"delete\"](this);\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return _class;\n}(_react.Component);\n\nexports[\"default\"] = _class;\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvc2lkZS1lZmZlY3QuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELGtCQUFBLEdBQWtCLEtBQUssQ0FBdkI7O0FBQ0EsSUFBSUUsTUFBTSxHQUFHQyx1QkFBdUIsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQXBDOztBQUNBLFNBQVNELHVCQUFULENBQWlDRSxHQUFqQyxFQUFzQztBQUNsQyxNQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBZixFQUEyQjtBQUN2QixXQUFPRCxHQUFQO0FBQ0gsR0FGRCxNQUVPO0FBQ0gsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsUUFBSUYsR0FBRyxJQUFJLElBQVgsRUFBaUI7QUFDYixXQUFJLElBQUlHLEdBQVIsSUFBZUgsR0FBZixFQUFtQjtBQUNmLFlBQUlQLE1BQU0sQ0FBQ1csU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDTixHQUFyQyxFQUEwQ0csR0FBMUMsQ0FBSixFQUFvRDtBQUNoRCxjQUFJSSxJQUFJLEdBQUdkLE1BQU0sQ0FBQ0MsY0FBUCxJQUF5QkQsTUFBTSxDQUFDZSx3QkFBaEMsR0FBMkRmLE1BQU0sQ0FBQ2Usd0JBQVAsQ0FBZ0NSLEdBQWhDLEVBQXFDRyxHQUFyQyxDQUEzRCxHQUF1RyxFQUFsSDs7QUFDQSxjQUFJSSxJQUFJLENBQUNFLEdBQUwsSUFBWUYsSUFBSSxDQUFDRyxHQUFyQixFQUEwQjtBQUN0QmpCLFlBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQlEsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DSSxJQUFuQztBQUNILFdBRkQsTUFFTztBQUNITCxZQUFBQSxNQUFNLENBQUNDLEdBQUQsQ0FBTixHQUFjSCxHQUFHLENBQUNHLEdBQUQsQ0FBakI7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7QUFDREQsSUFBQUEsTUFBTSxXQUFOLEdBQWlCRixHQUFqQjtBQUNBLFdBQU9FLE1BQVA7QUFDSDtBQUNKOztBQUNELElBQU1TLFFBQVEsUUFBZDs7SUFDTUMsTTs7Ozs7QUFDRixrQkFBWUMsS0FBWixFQUFrQjtBQUFBOztBQUFBOztBQUNkLDhCQUFNQSxLQUFOOztBQUNBLFVBQUtDLFVBQUwsR0FBa0IsWUFBSTtBQUNsQixVQUFJLE1BQUtDLGVBQVQsRUFBMEI7QUFDdEIsY0FBS0YsS0FBTCxDQUFXRyxXQUFYLENBQXVCQyxVQUF2QixDQUFrQyxNQUFLSixLQUFMLENBQVdLLHVCQUFYLG9CQUMzQixNQUFLTCxLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQURJLEdBRS9CLE1BQUtOLEtBRjBCLENBQWxDO0FBR0g7QUFDSixLQU5EOztBQU9BLFVBQUtFLGVBQUwsR0FBdUIsTUFBS0YsS0FBTCxDQUFXRyxXQUFYLElBQTBCLE1BQUtILEtBQUwsQ0FBV0csV0FBWCxDQUF1QkcsZ0JBQXhFOztBQUNBLFFBQUlSLFFBQVEsSUFBSSxNQUFLSSxlQUFyQixFQUFzQztBQUNsQyxZQUFLRixLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQUF2QixDQUF3Q0MsR0FBeEM7O0FBQ0EsWUFBS04sVUFBTDtBQUNIOztBQWJhO0FBY2pCOzs7O1dBQ0QsNkJBQW9CO0FBQ2hCLFVBQUksS0FBS0MsZUFBVCxFQUEwQjtBQUN0QixhQUFLRixLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQUF2QixDQUF3Q0MsR0FBeEMsQ0FBNEMsSUFBNUM7QUFDSDs7QUFDRCxXQUFLTixVQUFMO0FBQ0g7OztXQUNELDhCQUFxQjtBQUNqQixXQUFLQSxVQUFMO0FBQ0g7OztXQUNELGdDQUF1QjtBQUNuQixVQUFJLEtBQUtDLGVBQVQsRUFBMEI7QUFDdEIsYUFBS0YsS0FBTCxDQUFXRyxXQUFYLENBQXVCRyxnQkFBdkIsV0FBK0MsSUFBL0M7QUFDSDs7QUFDRCxXQUFLTCxVQUFMO0FBQ0g7OztXQUNELGtCQUFTO0FBQ0wsYUFBTyxJQUFQO0FBQ0g7Ozs7RUFqQ2dCakIsTUFBTSxDQUFDd0IsUzs7QUFtQzVCMUIsa0JBQUEsR0FBa0JpQixNQUFsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvc2lkZS1lZmZlY3QuanM/NDA4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gICAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXdPYmogPSB7fTtcbiAgICAgICAgaWYgKG9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBvYmope1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld09iai5kZWZhdWx0ID0gb2JqO1xuICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgIH1cbn1cbmNvbnN0IGlzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG5jbGFzcyBfY2xhc3MgZXh0ZW5kcyBfcmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5lbWl0Q2hhbmdlID0gKCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNIZWFkTWFuYWdlcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIudXBkYXRlSGVhZCh0aGlzLnByb3BzLnJlZHVjZUNvbXBvbmVudHNUb1N0YXRlKFtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzXG4gICAgICAgICAgICAgICAgXSwgdGhpcy5wcm9wcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9oYXNIZWFkTWFuYWdlciA9IHRoaXMucHJvcHMuaGVhZE1hbmFnZXIgJiYgdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzO1xuICAgICAgICBpZiAoaXNTZXJ2ZXIgJiYgdGhpcy5faGFzSGVhZE1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXMuZGVsZXRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lkZS1lZmZlY3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJpc1NlcnZlciIsIl9jbGFzcyIsInByb3BzIiwiZW1pdENoYW5nZSIsIl9oYXNIZWFkTWFuYWdlciIsImhlYWRNYW5hZ2VyIiwidXBkYXRlSGVhZCIsInJlZHVjZUNvbXBvbmVudHNUb1N0YXRlIiwibW91bnRlZEluc3RhbmNlcyIsImFkZCIsIkNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/side-effect.js\n");/***/}},/******/function(__webpack_require__){cov_1drh8655dw().f[6]++;cov_1drh8655dw().s[7]++;// webpackRuntimeModules
/******/var __webpack_exec__=function(moduleId){cov_1drh8655dw().f[7]++;cov_1drh8655dw().s[8]++;return __webpack_require__(__webpack_require__.s=moduleId);};/******/cov_1drh8655dw().s[9]++;__webpack_require__.O(0,["pages/_app","main"],function(){cov_1drh8655dw().f[8]++;cov_1drh8655dw().s[10]++;return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=next%2Fdist%2Fpages%2F_error&page=%2F_error!");});/******/var __webpack_exports__=(cov_1drh8655dw().s[11]++,__webpack_require__.O());/******/cov_1drh8655dw().s[12]++;_N_E=__webpack_exports__;/******/}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZWxmIiwicHVzaCIsIm1vZHVsZSIsIl9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJldmFsIiwiZXhwb3J0cyIsIl9fd2VicGFja19leGVjX18iLCJtb2R1bGVJZCIsInMiLCJPIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9OX0UiXSwic291cmNlcyI6WyJfZXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEFUVEVOVElPTjogQW4gXCJldmFsLXNvdXJjZS1tYXBcIiBkZXZ0b29sIGhhcyBiZWVuIHVzZWQuXG4gKiBUaGlzIGRldnRvb2wgaXMgbmVpdGhlciBtYWRlIGZvciBwcm9kdWN0aW9uIG5vciBmb3IgcmVhZGFibGUgb3V0cHV0IGZpbGVzLlxuICogSXQgdXNlcyBcImV2YWwoKVwiIGNhbGxzIHRvIGNyZWF0ZSBhIHNlcGFyYXRlIHNvdXJjZSBmaWxlIHdpdGggYXR0YWNoZWQgU291cmNlTWFwcyBpbiB0aGUgYnJvd3NlciBkZXZ0b29scy5cbiAqIElmIHlvdSBhcmUgdHJ5aW5nIHRvIHJlYWQgdGhlIG91dHB1dCBmaWxlLCBzZWxlY3QgYSBkaWZmZXJlbnQgZGV2dG9vbCAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2RldnRvb2wvKVxuICogb3IgZGlzYWJsZSB0aGUgZGVmYXVsdCBkZXZ0b29sIHdpdGggXCJkZXZ0b29sOiBmYWxzZVwiLlxuICogSWYgeW91IGFyZSBsb29raW5nIGZvciBwcm9kdWN0aW9uLXJlYWR5IG91dHB1dCBmaWxlcywgc2VlIG1vZGU6IFwicHJvZHVjdGlvblwiIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vbW9kZS8pLlxuICovXG4oc2VsZltcIndlYnBhY2tDaHVua19OX0VcIl0gPSBzZWxmW1wid2VicGFja0NodW5rX05fRVwiXSB8fCBbXSkucHVzaChbW1wicGFnZXMvX2Vycm9yXCJdLHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtY2xpZW50LXBhZ2VzLWxvYWRlci5qcz9hYnNvbHV0ZVBhZ2VQYXRoPW5leHQlMkZkaXN0JTJGcGFnZXMlMkZfZXJyb3ImcGFnZT0lMkZfZXJyb3IhXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1uZXh0JTJGZGlzdCUyRnBhZ2VzJTJGX2Vycm9yJnBhZ2U9JTJGX2Vycm9yISAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJcXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXFxuICAgICAgXFxcIi9fZXJyb3JcXFwiLFxcbiAgICAgIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBuZXh0L2Rpc3QvcGFnZXMvX2Vycm9yICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvcGFnZXMvX2Vycm9yLmpzXFxcIik7XFxuICAgICAgfVxcbiAgICBdKTtcXG4gICAgaWYodHJ1ZSkge1xcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoKSB7XFxuICAgICAgICB3aW5kb3cuX19ORVhUX1AucHVzaChbXFxcIi9fZXJyb3JcXFwiXSlcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5dWIyUmxYMjF2WkhWc1pYTXZibVY0ZEM5a2FYTjBMMkoxYVd4a0wzZGxZbkJoWTJzdmJHOWhaR1Z5Y3k5dVpYaDBMV05zYVdWdWRDMXdZV2RsY3kxc2IyRmtaWEl1YW5NL1lXSnpiMngxZEdWUVlXZGxVR0YwYUQxdVpYaDBKVEpHWkdsemRDVXlSbkJoWjJWekpUSkdYMlZ5Y205eUpuQmhaMlU5SlRKR1gyVnljbTl5SVM1cWN5SXNJbTFoY0hCcGJtZHpJam9pTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1pVRkJaU3h0UWtGQlR5eERRVUZETEhkRlFVRjNRanRCUVVNdlF6dEJRVU5CTzBGQlEwRXNUMEZCVHl4SlFVRlZPMEZCUTJwQ0xFMUJRVTBzVlVGQlZUdEJRVU5vUWp0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2WDA1ZlJTOC9NRGd3TUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNiaUFnSUNBb2QybHVaRzkzTGw5ZlRrVllWRjlRSUQwZ2QybHVaRzkzTGw5ZlRrVllWRjlRSUh4OElGdGRLUzV3ZFhOb0tGdGNiaUFnSUNBZ0lGd2lMMTlsY25KdmNsd2lMRnh1SUNBZ0lDQWdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WeGRXbHlaU2hjSW01bGVIUXZaR2x6ZEM5d1lXZGxjeTlmWlhKeWIzSmNJaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdYU2s3WEc0Z0lDQWdhV1lvYlc5a2RXeGxMbWh2ZENrZ2UxeHVJQ0FnSUNBZ2JXOWtkV3hsTG1odmRDNWthWE53YjNObEtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZDJsdVpHOTNMbDlmVGtWWVZGOVFMbkIxYzJnb1cxd2lMMTlsY25KdmNsd2lYU2xjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lsMHNJbTVoYldWeklqcGJYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1uZXh0JTJGZGlzdCUyRnBhZ2VzJTJGX2Vycm9yJnBhZ2U9JTJGX2Vycm9yIVxcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3BhZ2VzL19lcnJvci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9wYWdlcy9fZXJyb3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxuXFxudmFyIF9jbGFzc0NhbGxDaGVjayA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1xcXCIpO1xcblxcbnZhciBfY3JlYXRlQ2xhc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcXFwiKTtcXG5cXG52YXIgX2luaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzXFxcIik7XFxuXFxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1xcXCIpO1xcblxcbnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZiAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanNcXFwiKTtcXG5cXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXFxcInVuZGVmaW5lZFxcXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFxcXCJmdW5jdGlvblxcXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFxcXCJfX2VzTW9kdWxlXFxcIiwgKHtcXG4gIHZhbHVlOiB0cnVlXFxufSkpO1xcbmV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9IHZvaWQgMDtcXG5cXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByZWFjdCAqLyBcXFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanNcXFwiKSk7XFxuXFxudmFyIF9oZWFkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9zaGFyZWQvbGliL2hlYWQgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2hlYWQuanNcXFwiKSk7XFxuXFxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcXG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XFxuICAgIFxcXCJkZWZhdWx0XFxcIjogb2JqXFxuICB9O1xcbn1cXG5cXG52YXIgc3RhdHVzQ29kZXMgPSB7XFxuICA0MDA6ICdCYWQgUmVxdWVzdCcsXFxuICA0MDQ6ICdUaGlzIHBhZ2UgY291bGQgbm90IGJlIGZvdW5kJyxcXG4gIDQwNTogJ01ldGhvZCBOb3QgQWxsb3dlZCcsXFxuICA1MDA6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InXFxufTtcXG5cXG5mdW5jdGlvbiBfZ2V0SW5pdGlhbFByb3BzKF9yZWYpIHtcXG4gIHZhciByZXMgPSBfcmVmLnJlcyxcXG4gICAgICBlcnIgPSBfcmVmLmVycjtcXG4gIHZhciBzdGF0dXNDb2RlID0gcmVzICYmIHJlcy5zdGF0dXNDb2RlID8gcmVzLnN0YXR1c0NvZGUgOiBlcnIgPyBlcnIuc3RhdHVzQ29kZSA6IDQwNDtcXG4gIHJldHVybiB7XFxuICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGVcXG4gIH07XFxufVxcblxcbnZhciBFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX3JlYWN0JGRlZmF1bHQkQ29tcG9uKSB7XFxuICBfaW5oZXJpdHMoRXJyb3IsIF9yZWFjdCRkZWZhdWx0JENvbXBvbik7XFxuXFxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEVycm9yKTtcXG5cXG4gIGZ1bmN0aW9uIEVycm9yKCkge1xcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXJyb3IpO1xcblxcbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICB9XFxuXFxuICBfY3JlYXRlQ2xhc3MoRXJyb3IsIFt7XFxuICAgIGtleTogXFxcInJlbmRlclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XFxuICAgICAgdmFyIHN0YXR1c0NvZGUgPSB0aGlzLnByb3BzLnN0YXR1c0NvZGU7XFxuICAgICAgdmFyIHRpdGxlID0gdGhpcy5wcm9wcy50aXRsZSB8fCBzdGF0dXNDb2Rlc1tzdGF0dXNDb2RlXSB8fCAnQW4gdW5leHBlY3RlZCBlcnJvciBoYXMgb2NjdXJyZWQnO1xcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIiwge1xcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5lcnJvclxcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KF9oZWFkW1xcXCJkZWZhdWx0XFxcIl0sIG51bGwsIC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KFxcXCJ0aXRsZVxcXCIsIG51bGwsIHN0YXR1c0NvZGUgPyBcXFwiXFxcIi5jb25jYXQoc3RhdHVzQ29kZSwgXFxcIjogXFxcIikuY29uY2F0KHRpdGxlKSA6ICdBcHBsaWNhdGlvbiBlcnJvcjogYSBjbGllbnQtc2lkZSBleGNlcHRpb24gaGFzIG9jY3VycmVkJykpLCAvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIiwgbnVsbCwgLyojX19QVVJFX18qL19yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLmNyZWF0ZUVsZW1lbnQoXFxcInN0eWxlXFxcIiwge1xcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcXG4gICAgICAgICAgX19odG1sOiBcXFwiXFxcXG4gICAgICAgICAgICAgICAgYm9keSB7IG1hcmdpbjogMDsgY29sb3I6ICMwMDA7IGJhY2tncm91bmQ6ICNmZmY7IH1cXFxcbiAgICAgICAgICAgICAgICAubmV4dC1lcnJvci1oMSB7XFxcXG4gICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIC4zKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xcXFxuICAgICAgICAgICAgICAgICAgYm9keSB7IGNvbG9yOiAjZmZmOyBiYWNrZ3JvdW5kOiAjMDAwOyB9XFxcXG4gICAgICAgICAgICAgICAgICAubmV4dC1lcnJvci1oMSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgLjMpO1xcXFxuICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH1cXFwiXFxuICAgICAgICB9XFxuICAgICAgfSksIHN0YXR1c0NvZGUgPyAvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlRWxlbWVudChcXFwiaDFcXFwiLCB7XFxuICAgICAgICBjbGFzc05hbWU6IFxcXCJuZXh0LWVycm9yLWgxXFxcIixcXG4gICAgICAgIHN0eWxlOiBzdHlsZXMuaDFcXG4gICAgICB9LCBzdGF0dXNDb2RlKSA6IG51bGwsIC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCB7XFxuICAgICAgICBzdHlsZTogc3R5bGVzLmRlc2NcXG4gICAgICB9LCAvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlRWxlbWVudChcXFwiaDJcXFwiLCB7XFxuICAgICAgICBzdHlsZTogc3R5bGVzLmgyXFxuICAgICAgfSwgdGhpcy5wcm9wcy50aXRsZSB8fCBzdGF0dXNDb2RlID8gdGl0bGUgOiAvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlRWxlbWVudChfcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5GcmFnbWVudCwgbnVsbCwgXFxcIkFwcGxpY2F0aW9uIGVycm9yOiBhIGNsaWVudC1zaWRlIGV4Y2VwdGlvbiBoYXMgb2NjdXJyZWQgKHNlZSB0aGUgYnJvd3NlciBjb25zb2xlIGZvciBtb3JlIGluZm9ybWF0aW9uKVxcXCIpLCBcXFwiLlxcXCIpKSkpO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gRXJyb3I7XFxufShfcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5Db21wb25lbnQpO1xcblxcbmV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9IEVycm9yO1xcbkVycm9yLmRpc3BsYXlOYW1lID0gJ0Vycm9yUGFnZSc7XFxuRXJyb3IuZ2V0SW5pdGlhbFByb3BzID0gX2dldEluaXRpYWxQcm9wcztcXG5FcnJvci5vcmlnR2V0SW5pdGlhbFByb3BzID0gX2dldEluaXRpYWxQcm9wcztcXG52YXIgc3R5bGVzID0ge1xcbiAgZXJyb3I6IHtcXG4gICAgZm9udEZhbWlseTogJy1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgUm9ib3RvLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiRmlyYSBTYW5zXFxcIiwgQXZlbmlyLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBcXFwiTHVjaWRhIEdyYW5kZVxcXCIsIHNhbnMtc2VyaWYnLFxcbiAgICBoZWlnaHQ6ICcxMDB2aCcsXFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcXG4gIH0sXFxuICBkZXNjOiB7XFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcXG4gICAgbGluZUhlaWdodDogJzQ5cHgnLFxcbiAgICBoZWlnaHQ6ICc0OXB4JyxcXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcXG4gIH0sXFxuICBoMToge1xcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcXG4gICAgbWFyZ2luOiAwLFxcbiAgICBtYXJnaW5SaWdodDogJzIwcHgnLFxcbiAgICBwYWRkaW5nOiAnMTBweCAyM3B4IDEwcHggMCcsXFxuICAgIGZvbnRTaXplOiAnMjRweCcsXFxuICAgIGZvbnRXZWlnaHQ6IDUwMCxcXG4gICAgdmVydGljYWxBbGlnbjogJ3RvcCdcXG4gIH0sXFxuICBoMjoge1xcbiAgICBmb250U2l6ZTogJzE0cHgnLFxcbiAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcXG4gICAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxcbiAgICBtYXJnaW46IDAsXFxuICAgIHBhZGRpbmc6IDBcXG4gIH1cXG59O1xcblxcbjtcXG4gICAgLy8gV3JhcHBlZCBpbiBhbiBJSUZFIHRvIGF2b2lkIHBvbGx1dGluZyB0aGUgZ2xvYmFsIHNjb3BlXFxuICAgIDtcXG4gICAgKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBfYSwgX2I7XFxuICAgICAgICAvLyBMZWdhY3kgQ1NTIGltcGxlbWVudGF0aW9ucyB3aWxsIGBldmFsYCBicm93c2VyIGNvZGUgaW4gYSBOb2RlLmpzIGNvbnRleHRcXG4gICAgICAgIC8vIHRvIGV4dHJhY3QgQ1NTLiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIG5lZWQgdG8gY2hlY2sgd2UncmUgaW4gYVxcbiAgICAgICAgLy8gYnJvd3NlciBjb250ZXh0IGJlZm9yZSBjb250aW51aW5nLlxcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJlxcbiAgICAgICAgICAgIC8vIEFNUCAvIE5vLUpTIG1vZGUgZG9lcyBub3QgaW5qZWN0IHRoZXNlIGhlbHBlcnM6XFxuICAgICAgICAgICAgJyRSZWZyZXNoSGVscGVycyQnIGluIHNlbGYpIHtcXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIF9fd2VicGFja19tb2R1bGVfXyBpcyBnbG9iYWxcXG4gICAgICAgICAgICB2YXIgY3VycmVudEV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIF9fd2VicGFja19tb2R1bGVfXyBpcyBnbG9iYWxcXG4gICAgICAgICAgICB2YXIgcHJldkV4cG9ydHMgPSAoX2IgPSAoX2EgPSBtb2R1bGUuaG90LmRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wcmV2RXhwb3J0cykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcXG4gICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCBoYXBwZW4gaW4gTWFpblRlbXBsYXRlIGJlY2F1c2UgdGhlIGV4cG9ydHMgbWlzbWF0Y2ggYmV0d2VlblxcbiAgICAgICAgICAgIC8vIHRlbXBsYXRpbmcgYW5kIGV4ZWN1dGlvbi5cXG4gICAgICAgICAgICBzZWxmLiRSZWZyZXNoSGVscGVycyQucmVnaXN0ZXJFeHBvcnRzRm9yUmVhY3RSZWZyZXNoKGN1cnJlbnRFeHBvcnRzLCBtb2R1bGUuaWQpO1xcbiAgICAgICAgICAgIC8vIEEgbW9kdWxlIGNhbiBiZSBhY2NlcHRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIGl0cyBleHBvcnRzLCBlLmcuIHdoZW5cXG4gICAgICAgICAgICAvLyBpdCBpcyBhIFJlZnJlc2ggQm91bmRhcnkuXFxuICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5pc1JlYWN0UmVmcmVzaEJvdW5kYXJ5KGN1cnJlbnRFeHBvcnRzKSkge1xcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBwcmV2aW91cyBleHBvcnRzIG9uIHVwZGF0ZSBzbyB3ZSBjYW4gY29tcGFyZSB0aGUgYm91bmRhcnlcXG4gICAgICAgICAgICAgICAgLy8gc2lnbmF0dXJlcy5cXG4gICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnByZXZFeHBvcnRzID0gY3VycmVudEV4cG9ydHM7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAvLyBVbmNvbmRpdGlvbmFsbHkgYWNjZXB0IGFuIHVwZGF0ZSB0byB0aGlzIG1vZHVsZSwgd2UnbGwgY2hlY2sgaWYgaXQnc1xcbiAgICAgICAgICAgICAgICAvLyBzdGlsbCBhIFJlZnJlc2ggQm91bmRhcnkgbGF0ZXIuXFxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgaW1wb3J0TWV0YSBpcyByZXBsYWNlZCBpbiB0aGUgbG9hZGVyXFxuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KCk7XFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZmllbGQgaXMgc2V0IHdoZW4gdGhlIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBtb2R1bGUgd2FzIGFcXG4gICAgICAgICAgICAgICAgLy8gUmVmcmVzaCBCb3VuZGFyeSwgbGV0dGluZyB1cyBrbm93IHdlIG5lZWQgdG8gY2hlY2sgZm9yIGludmFsaWRhdGlvbiBvclxcbiAgICAgICAgICAgICAgICAvLyBlbnF1ZXVlIGFuIHVwZGF0ZS5cXG4gICAgICAgICAgICAgICAgaWYgKHByZXZFeHBvcnRzICE9PSBudWxsKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyBBIGJvdW5kYXJ5IGNhbiBiZWNvbWUgaW5lbGlnaWJsZSBpZiBpdHMgZXhwb3J0cyBhcmUgaW5jb21wYXRpYmxlXFxuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIHRoZSBwcmV2aW91cyBleHBvcnRzLlxcbiAgICAgICAgICAgICAgICAgICAgLy9cXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB5b3UgYWRkL3JlbW92ZS9jaGFuZ2UgZXhwb3J0cywgd2UnbGwgd2FudCB0b1xcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtZXhlY3V0ZSB0aGUgaW1wb3J0aW5nIG1vZHVsZXMsIGFuZCBmb3JjZSB0aG9zZSBjb21wb25lbnRzIHRvXFxuICAgICAgICAgICAgICAgICAgICAvLyByZS1yZW5kZXIuIFNpbWlsYXJseSwgaWYgeW91IGNvbnZlcnQgYSBjbGFzcyBjb21wb25lbnQgdG8gYVxcbiAgICAgICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24sIHdlIHdhbnQgdG8gaW52YWxpZGF0ZSB0aGUgYm91bmRhcnkuXFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNob3VsZEludmFsaWRhdGVSZWFjdFJlZnJlc2hCb3VuZGFyeShwcmV2RXhwb3J0cywgY3VycmVudEV4cG9ydHMpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRSZWZyZXNoSGVscGVycyQuc2NoZWR1bGVVcGRhdGUoKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICAgICAgLy8gU2luY2Ugd2UganVzdCBleGVjdXRlZCB0aGUgY29kZSBmb3IgdGhlIG1vZHVsZSwgaXQncyBwb3NzaWJsZSB0aGF0IHRoZVxcbiAgICAgICAgICAgICAgICAvLyBuZXcgZXhwb3J0cyBtYWRlIGl0IGluZWxpZ2libGUgZm9yIGJlaW5nIGEgYm91bmRhcnkuXFxuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgY2FyZSBhYm91dCB0aGUgY2FzZSB3aGVuIHdlIHdlcmUgX3ByZXZpb3VzbHlfIGEgYm91bmRhcnksXFxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2UgYWxyZWFkeSBhY2NlcHRlZCB0aGlzIHVwZGF0ZSAoYWNjaWRlbnRhbCBzaWRlIGVmZmVjdCkuXFxuICAgICAgICAgICAgICAgIHZhciBpc05vTG9uZ2VyQUJvdW5kYXJ5ID0gcHJldkV4cG9ydHMgIT09IG51bGw7XFxuICAgICAgICAgICAgICAgIGlmIChpc05vTG9uZ2VyQUJvdW5kYXJ5KSB7XFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfSkoKTtcXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl1YjJSbFgyMXZaSFZzWlhNdmJtVjRkQzlrYVhOMEwzQmhaMlZ6TDE5bGNuSnZjaTVxY3k1cWN5SXNJbTFoY0hCcGJtZHpJam9pUVVGQllUczdPenM3T3pzN096czdPenM3T3p0QlFVTmlRU3c0UTBGQk5rTTdRVUZEZWtOSExFVkJRVUZCTEV0QlFVc3NSVUZCUlR0QlFVUnJReXhEUVVFM1F6dEJRVWRCUkN4clFrRkJRU3hIUVVGclFpeExRVUZMTEVOQlFYWkNPenRCUVVOQkxFbEJRVWxGTEUxQlFVMHNSMEZCUjBNc2MwSkJRWE5DTEVOQlFVTkRMRzFDUVVGUExFTkJRVU1zTkVOQlFVUXNRMEZCVWl4RFFVRnVRenM3UVVGRFFTeEpRVUZKUXl4TFFVRkxMRWRCUVVkR0xITkNRVUZ6UWl4RFFVRkRReXh0UWtGQlR5eERRVUZETEhWRlFVRkVMRU5CUVZJc1EwRkJiRU03TzBGQlEwRXNVMEZCVTBRc2MwSkJRVlFzUTBGQlowTkhMRWRCUVdoRExFVkJRWEZETzBGQlEycERMRk5CUVU5QkxFZEJRVWNzU1VGQlNVRXNSMEZCUnl4RFFVRkRReXhWUVVGWUxFZEJRWGRDUkN4SFFVRjRRaXhIUVVFNFFqdEJRVU5xUXl4bFFVRlRRVHRCUVVSM1FpeEhRVUZ5UXp0QlFVZElPenRCUVVORUxFbEJRVTFGTEZkQlFWY3NSMEZCUnp0QlFVTm9RaXhQUVVGTExHRkJSRmM3UVVGRmFFSXNUMEZCU3l3NFFrRkdWenRCUVVkb1FpeFBRVUZMTEc5Q1FVaFhPMEZCU1doQ0xFOUJRVXM3UVVGS1Z5eERRVUZ3UWpzN1FVRk5RU3hUUVVGVFF5eG5Ra0ZCVkN4UFFVRXdRenRCUVVGQkxFMUJRV1JETEVkQlFXTXNVVUZCWkVFc1IwRkJZenRCUVVGQkxFMUJRVkpETEVkQlFWRXNVVUZCVWtFc1IwRkJVVHRCUVVOMFF5eE5RVUZOUXl4VlFVRlZMRWRCUVVkR0xFZEJRVWNzU1VGQlNVRXNSMEZCUnl4RFFVRkRSU3hWUVVGWUxFZEJRWGRDUml4SFFVRkhMRU5CUVVORkxGVkJRVFZDTEVkQlFYbERSQ3hIUVVGSExFZEJRVWRCTEVkQlFVY3NRMEZCUTBNc1ZVRkJVQ3hIUVVGdlFpeEhRVUZ1Ump0QlFVTkJMRk5CUVU4N1FVRkRTRUVzU1VGQlFVRXNWVUZCVlN4RlFVRldRVHRCUVVSSExFZEJRVkE3UVVGSFNEczdTVUZEUzBNc1N6czdPenM3T3pzN096czdPenRYUVVOR0xHdENRVUZUTzBGQlEwd3NWVUZCVVVRc1ZVRkJVaXhIUVVGM1FpeExRVUZMUlN4TFFVRTNRaXhEUVVGUlJpeFZRVUZTTzBGQlEwRXNWVUZCVFVjc1MwRkJTeXhIUVVGSExFdEJRVXRFTEV0QlFVd3NRMEZCVjBNc1MwRkJXQ3hKUVVGdlFsQXNWMEZCVnl4RFFVRkRTU3hWUVVGRUxFTkJRUzlDTEVsQlFTdERMR3REUVVFM1JEdEJRVU5CTEdGQlFVOHNZVUZCWTFZc1RVRkJUU3hYUVVGT0xFTkJRV1ZqTEdGQlFXWXNRMEZCTmtJc1MwRkJOMElzUlVGQmIwTTdRVUZEY2tSRExGRkJRVUZCTEV0QlFVc3NSVUZCUlVNc1RVRkJUU3hEUVVGRFF6dEJRVVIxUXl4UFFVRndReXhGUVVWc1FpeGhRVUZqYWtJc1RVRkJUU3hYUVVGT0xFTkJRV1ZqTEdGQlFXWXNRMEZCTmtKWUxFdEJRVXNzVjBGQmJFTXNSVUZCTkVNc1NVRkJOVU1zUlVGQmEwUXNZVUZCWTBnc1RVRkJUU3hYUVVGT0xFTkJRV1ZqTEdGQlFXWXNRMEZCTmtJc1QwRkJOMElzUlVGQmMwTXNTVUZCZEVNc1JVRkJORU5LTEZWQlFWVXNZVUZCVFVFc1ZVRkJUaXhsUVVGeFFrY3NTMEZCY2tJc1NVRkJLMElzZVVSQlFYSkdMRU5CUVdoRkxFTkJSa2tzUlVGRk9FMHNZVUZCWTJJc1RVRkJUU3hYUVVGT0xFTkJRV1ZqTEdGQlFXWXNRMEZCTmtJc1MwRkJOMElzUlVGQmIwTXNTVUZCY0VNc1JVRkJNRU1zWVVGQlkyUXNUVUZCVFN4WFFVRk9MRU5CUVdWakxHRkJRV1lzUTBGQk5rSXNUMEZCTjBJc1JVRkJjME03UVVGRE0xVkpMRkZCUVVGQkxIVkNRVUYxUWl4RlFVRkZPMEZCUTNKQ1F5eFZRVUZCUVN4TlFVRk5PMEZCUkdVN1FVRkVhMVFzVDBGQmRFTXNRMEZCZUVRc1JVRmpOMDlVTEZWQlFWVXNSMEZCUnl4aFFVRmpWaXhOUVVGTkxGZEJRVTRzUTBGQlpXTXNZVUZCWml4RFFVRTJRaXhKUVVFM1FpeEZRVUZ0UXp0QlFVTTVSRTBzVVVGQlFVRXNVMEZCVXl4RlFVRkZMR1ZCUkcxRU8wRkJSVGxFVEN4UlFVRkJRU3hMUVVGTExFVkJRVVZETEUxQlFVMHNRMEZCUTBzN1FVRkdaMFFzVDBGQmJrTXNSVUZITlVKWUxGVkJTRFJDTEVOQlFXcENMRWRCUjBjc1NVRnFRbWRQTEVWQmFVSXhUaXhoUVVGalZpeE5RVUZOTEZkQlFVNHNRMEZCWldNc1lVRkJaaXhEUVVFMlFpeExRVUUzUWl4RlFVRnZRenRCUVVOeVJVTXNVVUZCUVVFc1MwRkJTeXhGUVVGRlF5eE5RVUZOTEVOQlFVTk5PMEZCUkhWRUxFOUJRWEJETEVWQlJXeERMR0ZCUVdOMFFpeE5RVUZOTEZkQlFVNHNRMEZCWldNc1lVRkJaaXhEUVVFMlFpeEpRVUUzUWl4RlFVRnRRenRCUVVOb1JFTXNVVUZCUVVFc1MwRkJTeXhGUVVGRlF5eE5RVUZOTEVOQlFVTlBPMEZCUkd0RExFOUJRVzVETEVWQlJXUXNTMEZCUzFnc1MwRkJUQ3hEUVVGWFF5eExRVUZZTEVsQlFXOUNTQ3hWUVVGd1FpeEhRVUZwUTBjc1MwRkJha01zUjBGQmVVTXNZVUZCWTJJc1RVRkJUU3hYUVVGT0xFTkJRV1ZqTEdGQlFXWXNRMEZCTmtKa0xFMUJRVTBzVjBGQlRpeERRVUZsZDBJc1VVRkJOVU1zUlVGQmMwUXNTVUZCZEVRc1JVRkJORVFzZDBkQlFUVkVMRU5CUm5wRExFVkJSV2RPTEVkQlJtaE9MRU5CUm05Q0xFTkJha0kwVFN4RFFVWTFUaXhEUVVGeVFqdEJRWGRDU0RzN096dEZRVFZDWlhoQ0xFMUJRVTBzVjBGQlRpeERRVUZsZVVJc1V6czdRVUU0UW01RE0wSXNhMEpCUVVFc1IwRkJhMEpoTEV0QlFXeENPMEZCUTBGQkxFdEJRVXNzUTBGQlEyVXNWMEZCVGl4SFFVRnZRaXhYUVVGd1FqdEJRVU5CWml4TFFVRkxMRU5CUVVOblFpeGxRVUZPTEVkQlFYZENjRUlzWjBKQlFYaENPMEZCUTBGSkxFdEJRVXNzUTBGQlEybENMRzFDUVVGT0xFZEJRVFJDY2tJc1owSkJRVFZDTzBGQlEwRXNTVUZCVFZNc1RVRkJUU3hIUVVGSE8wRkJRMWhETEVWQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVOSVdTeEpRVUZCUVN4VlFVRlZMRVZCUVVVc01raEJSRlE3UVVGRlNFTXNTVUZCUVVFc1RVRkJUU3hGUVVGRkxFOUJSa3c3UVVGSFNFTXNTVUZCUVVFc1UwRkJVeXhGUVVGRkxGRkJTRkk3UVVGSlNFTXNTVUZCUVVFc1QwRkJUeXhGUVVGRkxFMUJTazQ3UVVGTFNFTXNTVUZCUVVFc1lVRkJZU3hGUVVGRkxGRkJURm83UVVGTlNFTXNTVUZCUVVFc1ZVRkJWU3hGUVVGRkxGRkJUbFE3UVVGUFNFTXNTVUZCUVVFc1kwRkJZeXhGUVVGRk8wRkJVR0lzUjBGRVNUdEJRVlZZWWl4RlFVRkJRU3hKUVVGSkxFVkJRVVU3UVVGRFJsVXNTVUZCUVVFc1QwRkJUeXhGUVVGRkxHTkJSRkE3UVVGRlJrUXNTVUZCUVVFc1UwRkJVeXhGUVVGRkxFMUJSbFE3UVVGSFJrc3NTVUZCUVVFc1ZVRkJWU3hGUVVGRkxFMUJTRlk3UVVGSlJrNHNTVUZCUVVFc1RVRkJUU3hGUVVGRkxFMUJTazQ3UVVGTFJrOHNTVUZCUVVFc1lVRkJZU3hGUVVGRk8wRkJUR0lzUjBGV1N6dEJRV2xDV0doQ0xFVkJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVTkJWeXhKUVVGQlFTeFBRVUZQTEVWQlFVVXNZMEZFVkR0QlFVVkJUU3hKUVVGQlFTeE5RVUZOTEVWQlFVVXNRMEZHVWp0QlFVZEJReXhKUVVGQlFTeFhRVUZYTEVWQlFVVXNUVUZJWWp0QlFVbEJReXhKUVVGQlFTeFBRVUZQTEVWQlFVVXNhMEpCU2xRN1FVRkxRVU1zU1VGQlFVRXNVVUZCVVN4RlFVRkZMRTFCVEZZN1FVRk5RVU1zU1VGQlFVRXNWVUZCVlN4RlFVRkZMRWRCVGxvN1FVRlBRVXdzU1VGQlFVRXNZVUZCWVN4RlFVRkZPMEZCVUdZc1IwRnFRazg3UVVFd1FsaGtMRVZCUVVGQkxFVkJRVVVzUlVGQlJUdEJRVU5CYTBJc1NVRkJRVUVzVVVGQlVTeEZRVUZGTEUxQlJGWTdRVUZGUVVNc1NVRkJRVUVzVlVGQlZTeEZRVUZGTEZGQlJsbzdRVUZIUVU0c1NVRkJRVUVzVlVGQlZTeEZRVUZGTEZOQlNGbzdRVUZKUVVVc1NVRkJRVUVzVFVGQlRTeEZRVUZGTEVOQlNsSTdRVUZMUVVVc1NVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlRGUTdRVUV4UWs4c1EwRkJaaUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwxOU9YMFV2TGk5dWIyUmxYMjF2WkhWc1pYTXZibVY0ZEM5a2FYTjBMM0JoWjJWekwxOWxjbkp2Y2k1cWN6OHhPR1l5SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ2RtOXBaQ0F3TzF4dWRtRnlJRjl5WldGamRDQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2NtVnhkV2x5WlNoY0luSmxZV04wWENJcEtUdGNiblpoY2lCZmFHVmhaQ0E5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9jbVZ4ZFdseVpTaGNJaTR1TDNOb1lYSmxaQzlzYVdJdmFHVmhaRndpS1NrN1hHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVWdQeUJ2WW1vZ09pQjdYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJRzlpYWx4dUlDQWdJSDA3WEc1OVhHNWpiMjV6ZENCemRHRjBkWE5EYjJSbGN5QTlJSHRjYmlBZ0lDQTBNREE2SUNkQ1lXUWdVbVZ4ZFdWemRDY3NYRzRnSUNBZ05EQTBPaUFuVkdocGN5QndZV2RsSUdOdmRXeGtJRzV2ZENCaVpTQm1iM1Z1WkNjc1hHNGdJQ0FnTkRBMU9pQW5UV1YwYUc5a0lFNXZkQ0JCYkd4dmQyVmtKeXhjYmlBZ0lDQTFNREE2SUNkSmJuUmxjbTVoYkNCVFpYSjJaWElnUlhKeWIzSW5YRzU5TzF4dVpuVnVZM1JwYjI0Z1gyZGxkRWx1YVhScFlXeFFjbTl3Y3loN0lISmxjeUFzSUdWeWNpQWdmU2tnZTF4dUlDQWdJR052Ym5OMElITjBZWFIxYzBOdlpHVWdQU0J5WlhNZ0ppWWdjbVZ6TG5OMFlYUjFjME52WkdVZ1B5QnlaWE11YzNSaGRIVnpRMjlrWlNBNklHVnljaUEvSUdWeWNpNXpkR0YwZFhORGIyUmxJRG9nTkRBME8xeHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUhOMFlYUjFjME52WkdWY2JpQWdJQ0I5TzF4dWZWeHVZMnhoYzNNZ1JYSnliM0lnWlhoMFpXNWtjeUJmY21WaFkzUXVaR1ZtWVhWc2RDNURiMjF3YjI1bGJuUWdlMXh1SUNBZ0lISmxibVJsY2lncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QnpkR0YwZFhORGIyUmxJQ0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHbDBiR1VnUFNCMGFHbHpMbkJ5YjNCekxuUnBkR3hsSUh4OElITjBZWFIxYzBOdlpHVnpXM04wWVhSMWMwTnZaR1ZkSUh4OElDZEJiaUIxYm1WNGNHVmpkR1ZrSUdWeWNtOXlJR2hoY3lCdlkyTjFjbkpsWkNjN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlndktpTmZYMUJWVWtWZlh5b3ZJRjl5WldGamRDNWtaV1poZFd4MExtTnlaV0YwWlVWc1pXMWxiblFvWENKa2FYWmNJaXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdVNklITjBlV3hsY3k1bGNuSnZjbHh1SUNBZ0lDQWdJQ0I5TENBdktpTmZYMUJWVWtWZlh5b3ZJRjl5WldGamRDNWtaV1poZFd4MExtTnlaV0YwWlVWc1pXMWxiblFvWDJobFlXUXVaR1ZtWVhWc2RDd2diblZzYkN3Z0x5b2pYMTlRVlZKRlgxOHFMeUJmY21WaFkzUXVaR1ZtWVhWc2RDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWRHbDBiR1ZjSWl3Z2JuVnNiQ3dnYzNSaGRIVnpRMjlrWlNBL0lHQWtlM04wWVhSMWMwTnZaR1Y5T2lBa2UzUnBkR3hsZldBZ09pQW5RWEJ3YkdsallYUnBiMjRnWlhKeWIzSTZJR0VnWTJ4cFpXNTBMWE5wWkdVZ1pYaGpaWEIwYVc5dUlHaGhjeUJ2WTJOMWNuSmxaQ2NwS1N3Z0x5b2pYMTlRVlZKRlgxOHFMeUJmY21WaFkzUXVaR1ZtWVhWc2RDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aVpHbDJYQ0lzSUc1MWJHd3NJQzhxSTE5ZlVGVlNSVjlmS2k4Z1gzSmxZV04wTG1SbFptRjFiSFF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbk4wZVd4bFhDSXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhibWRsY205MWMyeDVVMlYwU1c1dVpYSklWRTFNT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gxOW9kRzFzT2lCZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlU0I3SUcxaGNtZHBiam9nTURzZ1kyOXNiM0k2SUNNd01EQTdJR0poWTJ0bmNtOTFibVE2SUNObVptWTdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1Ym1WNGRDMWxjbkp2Y2kxb01TQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjNKa1pYSXRjbWxuYUhRNklERndlQ0J6YjJ4cFpDQnlaMkpoS0RBc0lEQXNJREFzSUM0ektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRRzFsWkdsaElDaHdjbVZtWlhKekxXTnZiRzl5TFhOamFHVnRaVG9nWkdGeWF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQjdJR052Ykc5eU9pQWpabVptT3lCaVlXTnJaM0p2ZFc1a09pQWpNREF3T3lCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVibVY0ZEMxbGNuSnZjaTFvTVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNpMXlhV2RvZERvZ01YQjRJSE52Ykdsa0lISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dMak1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBMQ0J6ZEdGMGRYTkRiMlJsSUQ4Z0x5b2pYMTlRVlZKRlgxOHFMeUJmY21WaFkzUXVaR1ZtWVhWc2RDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWFERmNJaXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxPaUJjSW01bGVIUXRaWEp5YjNJdGFERmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsT2lCemRIbHNaWE11YURGY2JpQWdJQ0FnSUNBZ2ZTd2djM1JoZEhWelEyOWtaU2tnT2lCdWRXeHNMQ0F2S2lOZlgxQlZVa1ZmWHlvdklGOXlaV0ZqZEM1a1pXWmhkV3gwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0prYVhaY0lpd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U2SUhOMGVXeGxjeTVrWlhOalhHNGdJQ0FnSUNBZ0lIMHNJQzhxSTE5ZlVGVlNSVjlmS2k4Z1gzSmxZV04wTG1SbFptRjFiSFF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbWd5WENJc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxPaUJ6ZEhsc1pYTXVhREpjYmlBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV3Y205d2N5NTBhWFJzWlNCOGZDQnpkR0YwZFhORGIyUmxJRDhnZEdsMGJHVWdPaUF2S2lOZlgxQlZVa1ZmWHlvdklGOXlaV0ZqZEM1a1pXWmhkV3gwTG1OeVpXRjBaVVZzWlcxbGJuUW9YM0psWVdOMExtUmxabUYxYkhRdVJuSmhaMjFsYm5Rc0lHNTFiR3dzSUZ3aVFYQndiR2xqWVhScGIyNGdaWEp5YjNJNklHRWdZMnhwWlc1MExYTnBaR1VnWlhoalpYQjBhVzl1SUdoaGN5QnZZMk4xY25KbFpDQW9jMlZsSUhSb1pTQmljbTkzYzJWeUlHTnZibk52YkdVZ1ptOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNHBYQ0lwTENCY0lpNWNJaWtwS1NrcE8xeHVJQ0FnSUgxY2JuMWNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRVZ5Y205eU8xeHVSWEp5YjNJdVpHbHpjR3hoZVU1aGJXVWdQU0FuUlhKeWIzSlFZV2RsSnp0Y2JrVnljbTl5TG1kbGRFbHVhWFJwWVd4UWNtOXdjeUE5SUY5blpYUkpibWwwYVdGc1VISnZjSE03WEc1RmNuSnZjaTV2Y21sblIyVjBTVzVwZEdsaGJGQnliM0J6SUQwZ1gyZGxkRWx1YVhScFlXeFFjbTl3Y3p0Y2JtTnZibk4wSUhOMGVXeGxjeUE5SUh0Y2JpQWdJQ0JsY25KdmNqb2dlMXh1SUNBZ0lDQWdJQ0JtYjI1MFJtRnRhV3g1T2lBbkxXRndjR3hsTFhONWMzUmxiU3dnUW14cGJtdE5ZV05UZVhOMFpXMUdiMjUwTENCU2IySnZkRzhzSUZ3aVUyVm5iMlVnVlVsY0lpd2dYQ0pHYVhKaElGTmhibk5jSWl3Z1FYWmxibWx5TENCY0lraGxiSFpsZEdsallTQk9aWFZsWENJc0lGd2lUSFZqYVdSaElFZHlZVzVrWlZ3aUxDQnpZVzV6TFhObGNtbG1KeXhjYmlBZ0lDQWdJQ0FnYUdWcFoyaDBPaUFuTVRBd2RtZ25MRnh1SUNBZ0lDQWdJQ0IwWlhoMFFXeHBaMjQ2SUNkalpXNTBaWEluTEZ4dUlDQWdJQ0FnSUNCa2FYTndiR0Y1T2lBblpteGxlQ2NzWEc0Z0lDQWdJQ0FnSUdac1pYaEVhWEpsWTNScGIyNDZJQ2RqYjJ4MWJXNG5MRnh1SUNBZ0lDQWdJQ0JoYkdsbmJrbDBaVzF6T2lBblkyVnVkR1Z5Snl4Y2JpQWdJQ0FnSUNBZ2FuVnpkR2xtZVVOdmJuUmxiblE2SUNkalpXNTBaWEluWEc0Z0lDQWdmU3hjYmlBZ0lDQmtaWE5qT2lCN1hHNGdJQ0FnSUNBZ0lHUnBjM0JzWVhrNklDZHBibXhwYm1VdFlteHZZMnNuTEZ4dUlDQWdJQ0FnSUNCMFpYaDBRV3hwWjI0NklDZHNaV1owSnl4Y2JpQWdJQ0FnSUNBZ2JHbHVaVWhsYVdkb2REb2dKelE1Y0hnbkxGeHVJQ0FnSUNBZ0lDQm9aV2xuYUhRNklDYzBPWEI0Snl4Y2JpQWdJQ0FnSUNBZ2RtVnlkR2xqWVd4QmJHbG5iam9nSjIxcFpHUnNaU2RjYmlBZ0lDQjlMRnh1SUNBZ0lHZ3hPaUI3WEc0Z0lDQWdJQ0FnSUdScGMzQnNZWGs2SUNkcGJteHBibVV0WW14dlkyc25MRnh1SUNBZ0lDQWdJQ0J0WVhKbmFXNDZJREFzWEc0Z0lDQWdJQ0FnSUcxaGNtZHBibEpwWjJoME9pQW5NakJ3ZUNjc1hHNGdJQ0FnSUNBZ0lIQmhaR1JwYm1jNklDY3hNSEI0SURJemNIZ2dNVEJ3ZUNBd0p5eGNiaUFnSUNBZ0lDQWdabTl1ZEZOcGVtVTZJQ2N5TkhCNEp5eGNiaUFnSUNBZ0lDQWdabTl1ZEZkbGFXZG9kRG9nTlRBd0xGeHVJQ0FnSUNBZ0lDQjJaWEowYVdOaGJFRnNhV2R1T2lBbmRHOXdKMXh1SUNBZ0lIMHNYRzRnSUNBZ2FESTZJSHRjYmlBZ0lDQWdJQ0FnWm05dWRGTnBlbVU2SUNjeE5IQjRKeXhjYmlBZ0lDQWdJQ0FnWm05dWRGZGxhV2RvZERvZ0oyNXZjbTFoYkNjc1hHNGdJQ0FnSUNBZ0lHeHBibVZJWldsbmFIUTZJQ2RwYm1obGNtbDBKeXhjYmlBZ0lDQWdJQ0FnYldGeVoybHVPaUF3TEZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuT2lBd1hHNGdJQ0FnZlZ4dWZUdGNibHh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVgyVnljbTl5TG1wekxtMWhjQ0pkTENKdVlXMWxjeUk2V3lKUFltcGxZM1FpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1WNGNHOXlkSE1pTENKMllXeDFaU0lzSWw5eVpXRmpkQ0lzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWDJobFlXUWlMQ0p2WW1vaUxDSmZYMlZ6VFc5a2RXeGxJaXdpYzNSaGRIVnpRMjlrWlhNaUxDSmZaMlYwU1c1cGRHbGhiRkJ5YjNCeklpd2ljbVZ6SWl3aVpYSnlJaXdpYzNSaGRIVnpRMjlrWlNJc0lrVnljbTl5SWl3aWNISnZjSE1pTENKMGFYUnNaU0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0p6ZEhsc1pTSXNJbk4wZVd4bGN5SXNJbVZ5Y205eUlpd2laR0Z1WjJWeWIzVnpiSGxUWlhSSmJtNWxja2hVVFV3aUxDSmZYMmgwYld3aUxDSmpiR0Z6YzA1aGJXVWlMQ0pvTVNJc0ltUmxjMk1pTENKb01pSXNJa1p5WVdkdFpXNTBJaXdpUTI5dGNHOXVaVzUwSWl3aVpHbHpjR3hoZVU1aGJXVWlMQ0puWlhSSmJtbDBhV0ZzVUhKdmNITWlMQ0p2Y21sblIyVjBTVzVwZEdsaGJGQnliM0J6SWl3aVptOXVkRVpoYldsc2VTSXNJbWhsYVdkb2RDSXNJblJsZUhSQmJHbG5iaUlzSW1ScGMzQnNZWGtpTENKbWJHVjRSR2x5WldOMGFXOXVJaXdpWVd4cFoyNUpkR1Z0Y3lJc0ltcDFjM1JwWm5sRGIyNTBaVzUwSWl3aWJHbHVaVWhsYVdkb2RDSXNJblpsY25ScFkyRnNRV3hwWjI0aUxDSnRZWEpuYVc0aUxDSnRZWEpuYVc1U2FXZG9kQ0lzSW5CaFpHUnBibWNpTENKbWIyNTBVMmw2WlNJc0ltWnZiblJYWldsbmFIUWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3BhZ2VzL19lcnJvci5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIlxcblxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcXFwiX19lc01vZHVsZVxcXCIsICh7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pKTtcXG5leHBvcnRzLkFtcFN0YXRlQ29udGV4dCA9IHZvaWQgMDtcXG5cXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByZWFjdCAqLyBcXFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanNcXFwiKSk7XFxuXFxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcXG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XFxuICAgIFxcXCJkZWZhdWx0XFxcIjogb2JqXFxuICB9O1xcbn1cXG5cXG52YXIgQW1wU3RhdGVDb250ZXh0ID0gX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlQ29udGV4dCh7fSk7XFxuXFxuZXhwb3J0cy5BbXBTdGF0ZUNvbnRleHQgPSBBbXBTdGF0ZUNvbnRleHQ7XFxuXFxuaWYgKHRydWUpIHtcXG4gIEFtcFN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdBbXBTdGF0ZUNvbnRleHQnO1xcbn1cXG5cXG47XFxuICAgIC8vIFdyYXBwZWQgaW4gYW4gSUlGRSB0byBhdm9pZCBwb2xsdXRpbmcgdGhlIGdsb2JhbCBzY29wZVxcbiAgICA7XFxuICAgIChmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgLy8gTGVnYWN5IENTUyBpbXBsZW1lbnRhdGlvbnMgd2lsbCBgZXZhbGAgYnJvd3NlciBjb2RlIGluIGEgTm9kZS5qcyBjb250ZXh0XFxuICAgICAgICAvLyB0byBleHRyYWN0IENTUy4gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBuZWVkIHRvIGNoZWNrIHdlJ3JlIGluIGFcXG4gICAgICAgIC8vIGJyb3dzZXIgY29udGV4dCBiZWZvcmUgY29udGludWluZy5cXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiZcXG4gICAgICAgICAgICAvLyBBTVAgLyBOby1KUyBtb2RlIGRvZXMgbm90IGluamVjdCB0aGVzZSBoZWxwZXJzOlxcbiAgICAgICAgICAgICckUmVmcmVzaEhlbHBlcnMkJyBpbiBzZWxmKSB7XFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXFxuICAgICAgICAgICAgdmFyIGN1cnJlbnRFeHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXFxuICAgICAgICAgICAgdmFyIHByZXZFeHBvcnRzID0gKF9iID0gKF9hID0gbW9kdWxlLmhvdC5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkV4cG9ydHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XFxuICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgaGFwcGVuIGluIE1haW5UZW1wbGF0ZSBiZWNhdXNlIHRoZSBleHBvcnRzIG1pc21hdGNoIGJldHdlZW5cXG4gICAgICAgICAgICAvLyB0ZW1wbGF0aW5nIGFuZCBleGVjdXRpb24uXFxuICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnJlZ2lzdGVyRXhwb3J0c0ZvclJlYWN0UmVmcmVzaChjdXJyZW50RXhwb3J0cywgbW9kdWxlLmlkKTtcXG4gICAgICAgICAgICAvLyBBIG1vZHVsZSBjYW4gYmUgYWNjZXB0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBpdHMgZXhwb3J0cywgZS5nLiB3aGVuXFxuICAgICAgICAgICAgLy8gaXQgaXMgYSBSZWZyZXNoIEJvdW5kYXJ5LlxcbiAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuaXNSZWFjdFJlZnJlc2hCb3VuZGFyeShjdXJyZW50RXhwb3J0cykpIHtcXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgZXhwb3J0cyBvbiB1cGRhdGUgc28gd2UgY2FuIGNvbXBhcmUgdGhlIGJvdW5kYXJ5XFxuICAgICAgICAgICAgICAgIC8vIHNpZ25hdHVyZXMuXFxuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmV2RXhwb3J0cyA9IGN1cnJlbnRFeHBvcnRzO1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgLy8gVW5jb25kaXRpb25hbGx5IGFjY2VwdCBhbiB1cGRhdGUgdG8gdGhpcyBtb2R1bGUsIHdlJ2xsIGNoZWNrIGlmIGl0J3NcXG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgYSBSZWZyZXNoIEJvdW5kYXJ5IGxhdGVyLlxcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIGltcG9ydE1ldGEgaXMgcmVwbGFjZWQgaW4gdGhlIGxvYWRlclxcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgpO1xcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZpZWxkIGlzIHNldCB3aGVuIHRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgbW9kdWxlIHdhcyBhXFxuICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggQm91bmRhcnksIGxldHRpbmcgdXMga25vdyB3ZSBuZWVkIHRvIGNoZWNrIGZvciBpbnZhbGlkYXRpb24gb3JcXG4gICAgICAgICAgICAgICAgLy8gZW5xdWV1ZSBhbiB1cGRhdGUuXFxuICAgICAgICAgICAgICAgIGlmIChwcmV2RXhwb3J0cyAhPT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBib3VuZGFyeSBjYW4gYmVjb21lIGluZWxpZ2libGUgaWYgaXRzIGV4cG9ydHMgYXJlIGluY29tcGF0aWJsZVxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgZXhwb3J0cy5cXG4gICAgICAgICAgICAgICAgICAgIC8vXFxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgaWYgeW91IGFkZC9yZW1vdmUvY2hhbmdlIGV4cG9ydHMsIHdlJ2xsIHdhbnQgdG9cXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLWV4ZWN1dGUgdGhlIGltcG9ydGluZyBtb2R1bGVzLCBhbmQgZm9yY2UgdGhvc2UgY29tcG9uZW50cyB0b1xcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyLiBTaW1pbGFybHksIGlmIHlvdSBjb252ZXJ0IGEgY2xhc3MgY29tcG9uZW50IHRvIGFcXG4gICAgICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uLCB3ZSB3YW50IHRvIGludmFsaWRhdGUgdGhlIGJvdW5kYXJ5LlxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zaG91bGRJbnZhbGlkYXRlUmVhY3RSZWZyZXNoQm91bmRhcnkocHJldkV4cG9ydHMsIGN1cnJlbnRFeHBvcnRzKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNjaGVkdWxlVXBkYXRlKCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIGp1c3QgZXhlY3V0ZWQgdGhlIGNvZGUgZm9yIHRoZSBtb2R1bGUsIGl0J3MgcG9zc2libGUgdGhhdCB0aGVcXG4gICAgICAgICAgICAgICAgLy8gbmV3IGV4cG9ydHMgbWFkZSBpdCBpbmVsaWdpYmxlIGZvciBiZWluZyBhIGJvdW5kYXJ5LlxcbiAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGNhc2Ugd2hlbiB3ZSB3ZXJlIF9wcmV2aW91c2x5XyBhIGJvdW5kYXJ5LFxcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGFscmVhZHkgYWNjZXB0ZWQgdGhpcyB1cGRhdGUgKGFjY2lkZW50YWwgc2lkZSBlZmZlY3QpLlxcbiAgICAgICAgICAgICAgICB2YXIgaXNOb0xvbmdlckFCb3VuZGFyeSA9IHByZXZFeHBvcnRzICE9PSBudWxsO1xcbiAgICAgICAgICAgICAgICBpZiAoaXNOb0xvbmdlckFCb3VuZGFyeSkge1xcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0pKCk7XFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5dWIyUmxYMjF2WkhWc1pYTXZibVY0ZEM5a2FYTjBMM05vWVhKbFpDOXNhV0l2WVcxd0xXTnZiblJsZUhRdWFuTXVhbk1pTENKdFlYQndhVzVuY3lJNklrRkJRV0U3TzBGQlEySkJMRGhEUVVFMlF6dEJRVU42UTBjc1JVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlJHdERMRU5CUVRkRE8wRkJSMEZFTEhWQ1FVRkJMRWRCUVRCQ0xFdEJRVXNzUTBGQkwwSTdPMEZCUTBFc1NVRkJTVWNzVFVGQlRTeEhRVUZIUXl4elFrRkJjMElzUTBGQlEwTXNiVUpCUVU4c1EwRkJReXcwUTBGQlJDeERRVUZTTEVOQlFXNURPenRCUVVOQkxGTkJRVk5FTEhOQ1FVRlVMRU5CUVdkRFJTeEhRVUZvUXl4RlFVRnhRenRCUVVOcVF5eFRRVUZQUVN4SFFVRkhMRWxCUVVsQkxFZEJRVWNzUTBGQlEwTXNWVUZCV0N4SFFVRjNRa1FzUjBGQmVFSXNSMEZCT0VJN1FVRkRha01zWlVGQlUwRTdRVUZFZDBJc1IwRkJja003UVVGSFNEczdRVUZEUkN4SlFVRk5TaXhsUVVGbExFZEJRVWRETEUxQlFVMHNWMEZCVGl4RFFVRmxTeXhoUVVGbUxFTkJRVFpDTEVWQlFUZENMRU5CUVhoQ096dEJRVU5CVWl4MVFrRkJRU3hIUVVFd1FrVXNaVUZCTVVJN08wRkJRMEVzU1VGQlNTeE5RVUYxUXp0QlFVTjJRMEVzUlVGQlFVRXNaVUZCWlN4RFFVRkRUeXhYUVVGb1FpeEhRVUU0UWl4cFFrRkJPVUk3UVVGRFNDSXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDE5T1gwVXZMaTl1YjJSbFgyMXZaSFZzWlhNdmJtVjRkQzlrYVhOMEwzTm9ZWEpsWkM5c2FXSXZZVzF3TFdOdmJuUmxlSFF1YW5NL1pUVmhOeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11UVcxd1UzUmhkR1ZEYjI1MFpYaDBJRDBnZG05cFpDQXdPMXh1ZG1GeUlGOXlaV0ZqZENBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvY21WeGRXbHlaU2hjSW5KbFlXTjBYQ0lwS1R0Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2diMkpxWEc0Z0lDQWdmVHRjYm4xY2JtTnZibk4wSUVGdGNGTjBZWFJsUTI5dWRHVjRkQ0E5SUY5eVpXRmpkQzVrWldaaGRXeDBMbU55WldGMFpVTnZiblJsZUhRb2UzMHBPMXh1Wlhod2IzSjBjeTVCYlhCVGRHRjBaVU52Ym5SbGVIUWdQU0JCYlhCVGRHRjBaVU52Ym5SbGVIUTdYRzVwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lFRnRjRk4wWVhSbFEyOXVkR1Y0ZEM1a2FYTndiR0Y1VG1GdFpTQTlJQ2RCYlhCVGRHRjBaVU52Ym5SbGVIUW5PMXh1ZlZ4dVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFoYlhBdFkyOXVkR1Y0ZEM1cWN5NXRZWEFpWFN3aWJtRnRaWE1pT2xzaVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGVIQnZjblJ6SWl3aWRtRnNkV1VpTENKQmJYQlRkR0YwWlVOdmJuUmxlSFFpTENKZmNtVmhZM1FpTENKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW05aWFpSXNJbDlmWlhOTmIyUjFiR1VpTENKamNtVmhkR1ZEYjI1MFpYaDBJaXdpWkdsemNHeGhlVTVoYldVaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtY29udGV4dC5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG5cXG52YXIgX3MgPSAkUmVmcmVzaFNpZyQoKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCAoe1xcbiAgdmFsdWU6IHRydWVcXG59KSk7XFxuZXhwb3J0cy5pc0luQW1wTW9kZSA9IGlzSW5BbXBNb2RlO1xcbmV4cG9ydHMudXNlQW1wID0gdXNlQW1wO1xcblxcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovIFxcXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qc1xcXCIpKTtcXG5cXG52YXIgX2FtcENvbnRleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2FtcC1jb250ZXh0ICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtY29udGV4dC5qc1xcXCIpO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XFxuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xcbiAgICBcXFwiZGVmYXVsdFxcXCI6IG9ialxcbiAgfTtcXG59XFxuXFxuZnVuY3Rpb24gaXNJbkFtcE1vZGUoKSB7XFxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXFxuICAgICAgX3JlZiRhbXBGaXJzdCA9IF9yZWYuYW1wRmlyc3QsXFxuICAgICAgYW1wRmlyc3QgPSBfcmVmJGFtcEZpcnN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkYW1wRmlyc3QsXFxuICAgICAgX3JlZiRoeWJyaWQgPSBfcmVmLmh5YnJpZCxcXG4gICAgICBoeWJyaWQgPSBfcmVmJGh5YnJpZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGh5YnJpZCxcXG4gICAgICBfcmVmJGhhc1F1ZXJ5ID0gX3JlZi5oYXNRdWVyeSxcXG4gICAgICBoYXNRdWVyeSA9IF9yZWYkaGFzUXVlcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRoYXNRdWVyeTtcXG5cXG4gIHJldHVybiBhbXBGaXJzdCB8fCBoeWJyaWQgJiYgaGFzUXVlcnk7XFxufVxcblxcbmZ1bmN0aW9uIHVzZUFtcCgpIHtcXG4gIF9zKCk7XFxuXFxuICAvLyBEb24ndCBhc3NpZ24gdGhlIGNvbnRleHQgdmFsdWUgdG8gYSB2YXJpYWJsZSB0byBzYXZlIGJ5dGVzXFxuICByZXR1cm4gaXNJbkFtcE1vZGUoX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0udXNlQ29udGV4dChfYW1wQ29udGV4dC5BbXBTdGF0ZUNvbnRleHQpKTtcXG59XFxuXFxuX3ModXNlQW1wLCBcXFwiZ0RzQ2plZUl0VXV2Z09XZjF2NHFvSzlSRjZrPVxcXCIpO1xcblxcbmlmICh0eXBlb2YgZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBleHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0gPT09ICdvYmplY3QnICYmIGV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSAhPT0gbnVsbCkge1xcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0sIGV4cG9ydHMpO1xcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1xcXCJkZWZhdWx0XFxcIl07XFxufVxcblxcbjtcXG4gICAgLy8gV3JhcHBlZCBpbiBhbiBJSUZFIHRvIGF2b2lkIHBvbGx1dGluZyB0aGUgZ2xvYmFsIHNjb3BlXFxuICAgIDtcXG4gICAgKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBfYSwgX2I7XFxuICAgICAgICAvLyBMZWdhY3kgQ1NTIGltcGxlbWVudGF0aW9ucyB3aWxsIGBldmFsYCBicm93c2VyIGNvZGUgaW4gYSBOb2RlLmpzIGNvbnRleHRcXG4gICAgICAgIC8vIHRvIGV4dHJhY3QgQ1NTLiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIG5lZWQgdG8gY2hlY2sgd2UncmUgaW4gYVxcbiAgICAgICAgLy8gYnJvd3NlciBjb250ZXh0IGJlZm9yZSBjb250aW51aW5nLlxcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJlxcbiAgICAgICAgICAgIC8vIEFNUCAvIE5vLUpTIG1vZGUgZG9lcyBub3QgaW5qZWN0IHRoZXNlIGhlbHBlcnM6XFxuICAgICAgICAgICAgJyRSZWZyZXNoSGVscGVycyQnIGluIHNlbGYpIHtcXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIF9fd2VicGFja19tb2R1bGVfXyBpcyBnbG9iYWxcXG4gICAgICAgICAgICB2YXIgY3VycmVudEV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIF9fd2VicGFja19tb2R1bGVfXyBpcyBnbG9iYWxcXG4gICAgICAgICAgICB2YXIgcHJldkV4cG9ydHMgPSAoX2IgPSAoX2EgPSBtb2R1bGUuaG90LmRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wcmV2RXhwb3J0cykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcXG4gICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCBoYXBwZW4gaW4gTWFpblRlbXBsYXRlIGJlY2F1c2UgdGhlIGV4cG9ydHMgbWlzbWF0Y2ggYmV0d2VlblxcbiAgICAgICAgICAgIC8vIHRlbXBsYXRpbmcgYW5kIGV4ZWN1dGlvbi5cXG4gICAgICAgICAgICBzZWxmLiRSZWZyZXNoSGVscGVycyQucmVnaXN0ZXJFeHBvcnRzRm9yUmVhY3RSZWZyZXNoKGN1cnJlbnRFeHBvcnRzLCBtb2R1bGUuaWQpO1xcbiAgICAgICAgICAgIC8vIEEgbW9kdWxlIGNhbiBiZSBhY2NlcHRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIGl0cyBleHBvcnRzLCBlLmcuIHdoZW5cXG4gICAgICAgICAgICAvLyBpdCBpcyBhIFJlZnJlc2ggQm91bmRhcnkuXFxuICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5pc1JlYWN0UmVmcmVzaEJvdW5kYXJ5KGN1cnJlbnRFeHBvcnRzKSkge1xcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBwcmV2aW91cyBleHBvcnRzIG9uIHVwZGF0ZSBzbyB3ZSBjYW4gY29tcGFyZSB0aGUgYm91bmRhcnlcXG4gICAgICAgICAgICAgICAgLy8gc2lnbmF0dXJlcy5cXG4gICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnByZXZFeHBvcnRzID0gY3VycmVudEV4cG9ydHM7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAvLyBVbmNvbmRpdGlvbmFsbHkgYWNjZXB0IGFuIHVwZGF0ZSB0byB0aGlzIG1vZHVsZSwgd2UnbGwgY2hlY2sgaWYgaXQnc1xcbiAgICAgICAgICAgICAgICAvLyBzdGlsbCBhIFJlZnJlc2ggQm91bmRhcnkgbGF0ZXIuXFxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgaW1wb3J0TWV0YSBpcyByZXBsYWNlZCBpbiB0aGUgbG9hZGVyXFxuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KCk7XFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZmllbGQgaXMgc2V0IHdoZW4gdGhlIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBtb2R1bGUgd2FzIGFcXG4gICAgICAgICAgICAgICAgLy8gUmVmcmVzaCBCb3VuZGFyeSwgbGV0dGluZyB1cyBrbm93IHdlIG5lZWQgdG8gY2hlY2sgZm9yIGludmFsaWRhdGlvbiBvclxcbiAgICAgICAgICAgICAgICAvLyBlbnF1ZXVlIGFuIHVwZGF0ZS5cXG4gICAgICAgICAgICAgICAgaWYgKHByZXZFeHBvcnRzICE9PSBudWxsKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyBBIGJvdW5kYXJ5IGNhbiBiZWNvbWUgaW5lbGlnaWJsZSBpZiBpdHMgZXhwb3J0cyBhcmUgaW5jb21wYXRpYmxlXFxuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIHRoZSBwcmV2aW91cyBleHBvcnRzLlxcbiAgICAgICAgICAgICAgICAgICAgLy9cXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB5b3UgYWRkL3JlbW92ZS9jaGFuZ2UgZXhwb3J0cywgd2UnbGwgd2FudCB0b1xcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtZXhlY3V0ZSB0aGUgaW1wb3J0aW5nIG1vZHVsZXMsIGFuZCBmb3JjZSB0aG9zZSBjb21wb25lbnRzIHRvXFxuICAgICAgICAgICAgICAgICAgICAvLyByZS1yZW5kZXIuIFNpbWlsYXJseSwgaWYgeW91IGNvbnZlcnQgYSBjbGFzcyBjb21wb25lbnQgdG8gYVxcbiAgICAgICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24sIHdlIHdhbnQgdG8gaW52YWxpZGF0ZSB0aGUgYm91bmRhcnkuXFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNob3VsZEludmFsaWRhdGVSZWFjdFJlZnJlc2hCb3VuZGFyeShwcmV2RXhwb3J0cywgY3VycmVudEV4cG9ydHMpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRSZWZyZXNoSGVscGVycyQuc2NoZWR1bGVVcGRhdGUoKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICAgICAgLy8gU2luY2Ugd2UganVzdCBleGVjdXRlZCB0aGUgY29kZSBmb3IgdGhlIG1vZHVsZSwgaXQncyBwb3NzaWJsZSB0aGF0IHRoZVxcbiAgICAgICAgICAgICAgICAvLyBuZXcgZXhwb3J0cyBtYWRlIGl0IGluZWxpZ2libGUgZm9yIGJlaW5nIGEgYm91bmRhcnkuXFxuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgY2FyZSBhYm91dCB0aGUgY2FzZSB3aGVuIHdlIHdlcmUgX3ByZXZpb3VzbHlfIGEgYm91bmRhcnksXFxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2UgYWxyZWFkeSBhY2NlcHRlZCB0aGlzIHVwZGF0ZSAoYWNjaWRlbnRhbCBzaWRlIGVmZmVjdCkuXFxuICAgICAgICAgICAgICAgIHZhciBpc05vTG9uZ2VyQUJvdW5kYXJ5ID0gcHJldkV4cG9ydHMgIT09IG51bGw7XFxuICAgICAgICAgICAgICAgIGlmIChpc05vTG9uZ2VyQUJvdW5kYXJ5KSB7XFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfSkoKTtcXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl1YjJSbFgyMXZaSFZzWlhNdmJtVjRkQzlrYVhOMEwzTm9ZWEpsWkM5c2FXSXZZVzF3TG1wekxtcHpJaXdpYldGd2NHbHVaM01pT2lKQlFVRmhPenM3TzBGQlEySkJMRGhEUVVFMlF6dEJRVU42UTBjc1JVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlJHdERMRU5CUVRkRE8wRkJSMEZFTEcxQ1FVRkJMRWRCUVhOQ1JTeFhRVUYwUWp0QlFVTkJSaXhqUVVGQkxFZEJRV2xDUnl4TlFVRnFRanM3UVVGRFFTeEpRVUZKUXl4TlFVRk5MRWRCUVVkRExITkNRVUZ6UWl4RFFVRkRReXh0UWtGQlR5eERRVUZETERSRFFVRkVMRU5CUVZJc1EwRkJia003TzBGQlEwRXNTVUZCU1VNc1YwRkJWeXhIUVVGSFJDeHRRa0ZCVHl4RFFVRkRMSGxGUVVGRUxFTkJRWHBDT3p0QlFVTkJMRk5CUVZORUxITkNRVUZVTEVOQlFXZERSeXhIUVVGb1F5eEZRVUZ4UXp0QlFVTnFReXhUUVVGUFFTeEhRVUZITEVsQlFVbEJMRWRCUVVjc1EwRkJRME1zVlVGQldDeEhRVUYzUWtRc1IwRkJlRUlzUjBGQk9FSTdRVUZEYWtNc1pVRkJVMEU3UVVGRWQwSXNSMEZCY2tNN1FVRkhTRHM3UVVGRFJDeFRRVUZUVGl4WFFVRlVMRWRCUVc5R08wRkJRVUVzYVVaQlFVb3NSVUZCU1R0QlFVRkJMREpDUVVFM1JGRXNVVUZCTmtRN1FVRkJRU3hOUVVFM1JFRXNVVUZCTmtRc09FSkJRVzVFTEV0QlFXMUVPMEZCUVVFc2VVSkJRVE5EUXl4TlFVRXlRenRCUVVGQkxFMUJRVE5EUVN4TlFVRXlReXcwUWtGQmJrTXNTMEZCYlVNN1FVRkJRU3d5UWtGQk0wSkRMRkZCUVRKQ08wRkJRVUVzVFVGQk0wSkJMRkZCUVRKQ0xEaENRVUZxUWl4TFFVRnBRanM3UVVGRGFFWXNVMEZCVDBZc1VVRkJVU3hKUVVGSlF5eE5RVUZOTEVsQlFVbERMRkZCUVRkQ08wRkJRMGc3TzBGQlEwUXNVMEZCVTFRc1RVRkJWQ3hIUVVGclFqdEJRVUZCT3p0QlFVTmtPMEZCUTBFc1UwRkJUMFFzVjBGQlZ5eERRVUZEUlN4TlFVRk5MRmRCUVU0c1EwRkJaVk1zVlVGQlppeERRVUV3UWs0c1YwRkJWeXhEUVVGRFR5eGxRVUYwUXl4RFFVRkVMRU5CUVd4Q08wRkJRMGc3TzBkQlNGRllMRTA3TzBGQlMxUXNTVUZCU1N4UFFVRlBTQ3hQUVVGUExGZEJRV1FzUzBGQk1rSXNWVUZCTTBJc1NVRkJNRU1zVDBGQlQwRXNUMEZCVHl4WFFVRmtMRXRCUVRKQ0xGRkJRVE5DTEVsQlFYVkRRU3hQUVVGUExGZEJRVkFzUzBGQmIwSXNTVUZCZWtjc1JVRkJaMGc3UVVGRE9VZEdMRVZCUVVGQkxFMUJRVTBzUTBGQlEybENMRTFCUVZBc1EwRkJZMllzVDBGQlR5eFhRVUZ5UWl4RlFVRXJRa0VzVDBGQkwwSTdRVUZEUVdkQ0xFVkJRVUZCTEUxQlFVMHNRMEZCUTJoQ0xFOUJRVkFzUjBGQmFVSkJMRTlCUVU4c1YwRkJlRUk3UVVGRFJDSXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDE5T1gwVXZMaTl1YjJSbFgyMXZaSFZzWlhNdmJtVjRkQzlrYVhOMEwzTm9ZWEpsWkM5c2FXSXZZVzF3TG1welB6VmxOR1lpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1selNXNUJiWEJOYjJSbElEMGdhWE5KYmtGdGNFMXZaR1U3WEc1bGVIQnZjblJ6TG5WelpVRnRjQ0E5SUhWelpVRnRjRHRjYm5aaGNpQmZjbVZoWTNRZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0hKbGNYVnBjbVVvWENKeVpXRmpkRndpS1NrN1hHNTJZWElnWDJGdGNFTnZiblJsZUhRZ1BTQnlaWEYxYVhKbEtGd2lMaTloYlhBdFkyOXVkR1Y0ZEZ3aUtUdGNibVoxYm1OMGFXOXVJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2IySnFLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHRjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nYjJKcVhHNGdJQ0FnZlR0Y2JuMWNibVoxYm1OMGFXOXVJR2x6U1c1QmJYQk5iMlJsS0hzZ1lXMXdSbWx5YzNRZ1BXWmhiSE5sSUN3Z2FIbGljbWxrSUQxbVlXeHpaU0FzSUdoaGMxRjFaWEo1SUQxbVlXeHpaU0FzSUNCOUlEMGdlMzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZVzF3Um1seWMzUWdmSHdnYUhsaWNtbGtJQ1ltSUdoaGMxRjFaWEo1TzF4dWZWeHVablZ1WTNScGIyNGdkWE5sUVcxd0tDa2dlMXh1SUNBZ0lDOHZJRVJ2YmlkMElHRnpjMmxuYmlCMGFHVWdZMjl1ZEdWNGRDQjJZV3gxWlNCMGJ5QmhJSFpoY21saFlteGxJSFJ2SUhOaGRtVWdZbmwwWlhOY2JpQWdJQ0J5WlhSMWNtNGdhWE5KYmtGdGNFMXZaR1VvWDNKbFlXTjBMbVJsWm1GMWJIUXVkWE5sUTI5dWRHVjRkQ2hmWVcxd1EyOXVkR1Y0ZEM1QmJYQlRkR0YwWlVOdmJuUmxlSFFwS1R0Y2JuMWNibHh1YVdZZ0tIUjVjR1Z2WmlCbGVIQnZjblJ6TG1SbFptRjFiSFFnUFQwOUlDZG1kVzVqZEdsdmJpY2dmSHdnS0hSNWNHVnZaaUJsZUhCdmNuUnpMbVJsWm1GMWJIUWdQVDA5SUNkdlltcGxZM1FuSUNZbUlHVjRjRzl5ZEhNdVpHVm1ZWFZzZENBaFBUMGdiblZzYkNrcElIdGNiaUFnVDJKcVpXTjBMbUZ6YzJsbmJpaGxlSEJ2Y25SekxtUmxabUYxYkhRc0lHVjRjRzl5ZEhNcE8xeHVJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0c5eWRITXVaR1ZtWVhWc2REdGNibjFjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlZVzF3TG1wekxtMWhjQ0pkTENKdVlXMWxjeUk2V3lKUFltcGxZM1FpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1WNGNHOXlkSE1pTENKMllXeDFaU0lzSW1selNXNUJiWEJOYjJSbElpd2lkWE5sUVcxd0lpd2lYM0psWVdOMElpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmZZVzF3UTI5dWRHVjRkQ0lzSW05aWFpSXNJbDlmWlhOTmIyUjFiR1VpTENKaGJYQkdhWEp6ZENJc0ltaDVZbkpwWkNJc0ltaGhjMUYxWlhKNUlpd2lkWE5sUTI5dWRHVjRkQ0lzSWtGdGNGTjBZWFJsUTI5dWRHVjRkQ0lzSW1GemMybG5iaUlzSW0xdlpIVnNaU0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2FtcC5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaGVhZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2hlYWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiXFxuXFxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5ICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qc1xcXCIpO1xcblxcbnZhciBfcyA9ICRSZWZyZXNoU2lnJCgpO1xcblxcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHsgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyB9IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxcblxcbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcXFwiX19lc01vZHVsZVxcXCIsICh7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pKTtcXG5leHBvcnRzLmRlZmF1bHRIZWFkID0gZGVmYXVsdEhlYWQ7XFxuZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdID0gdm9pZCAwO1xcblxcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByZWFjdCAqLyBcXFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanNcXFwiKSk7XFxuXFxudmFyIF9zaWRlRWZmZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NpZGUtZWZmZWN0ICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC5qc1xcXCIpKTtcXG5cXG52YXIgX2FtcENvbnRleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2FtcC1jb250ZXh0ICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtY29udGV4dC5qc1xcXCIpO1xcblxcbnZhciBfaGVhZE1hbmFnZXJDb250ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9oZWFkLW1hbmFnZXItY29udGV4dCAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaGVhZC1tYW5hZ2VyLWNvbnRleHQuanNcXFwiKTtcXG5cXG52YXIgX2FtcCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYW1wICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAuanNcXFwiKTtcXG5cXG52YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscyAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvdXRpbHMuanNcXFwiKTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcXG4gICAgXFxcImRlZmF1bHRcXFwiOiBvYmpcXG4gIH07XFxufVxcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xcbiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xcbiAgICByZXR1cm4gb2JqO1xcbiAgfSBlbHNlIHtcXG4gICAgdmFyIG5ld09iaiA9IHt9O1xcblxcbiAgICBpZiAob2JqICE9IG51bGwpIHtcXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XFxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xcbiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTtcXG5cXG4gICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XFxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIG5ld09ialtcXFwiZGVmYXVsdFxcXCJdID0gb2JqO1xcbiAgICByZXR1cm4gbmV3T2JqO1xcbiAgfVxcbn1cXG5cXG5mdW5jdGlvbiBkZWZhdWx0SGVhZCgpIHtcXG4gIHZhciBpbkFtcE1vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xcbiAgdmFyIGhlYWQgPSBbLyojX19QVVJFX18qL19yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLmNyZWF0ZUVsZW1lbnQoXFxcIm1ldGFcXFwiLCB7XFxuICAgIGNoYXJTZXQ6IFxcXCJ1dGYtOFxcXCJcXG4gIH0pXTtcXG5cXG4gIGlmICghaW5BbXBNb2RlKSB7XFxuICAgIGhlYWQucHVzaCggLyojX19QVVJFX18qL19yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLmNyZWF0ZUVsZW1lbnQoXFxcIm1ldGFcXFwiLCB7XFxuICAgICAgbmFtZTogXFxcInZpZXdwb3J0XFxcIixcXG4gICAgICBjb250ZW50OiBcXFwid2lkdGg9ZGV2aWNlLXdpZHRoXFxcIlxcbiAgICB9KSk7XFxuICB9XFxuXFxuICByZXR1cm4gaGVhZDtcXG59XFxuXFxuZnVuY3Rpb24gb25seVJlYWN0RWxlbWVudChsaXN0LCBjaGlsZCkge1xcbiAgLy8gUmVhY3QgY2hpbGRyZW4gY2FuIGJlIFxcXCJzdHJpbmdcXFwiIG9yIFxcXCJudW1iZXJcXFwiIGluIHRoaXMgY2FzZSB3ZSBpZ25vcmUgdGhlbSBmb3IgYmFja3dhcmRzIGNvbXBhdFxcbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGNoaWxkID09PSAnbnVtYmVyJykge1xcbiAgICByZXR1cm4gbGlzdDtcXG4gIH0gLy8gQWRkcyBzdXBwb3J0IGZvciBSZWFjdC5GcmFnbWVudFxcblxcblxcbiAgaWYgKGNoaWxkLnR5cGUgPT09IF9yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLkZyYWdtZW50KSB7XFxuICAgIHJldHVybiBsaXN0LmNvbmNhdChfcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5DaGlsZHJlbi50b0FycmF5KGNoaWxkLnByb3BzLmNoaWxkcmVuKS5yZWR1Y2UoZnVuY3Rpb24gKGZyYWdtZW50TGlzdCwgZnJhZ21lbnRDaGlsZCkge1xcbiAgICAgIGlmICh0eXBlb2YgZnJhZ21lbnRDaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGZyYWdtZW50Q2hpbGQgPT09ICdudW1iZXInKSB7XFxuICAgICAgICByZXR1cm4gZnJhZ21lbnRMaXN0O1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gZnJhZ21lbnRMaXN0LmNvbmNhdChmcmFnbWVudENoaWxkKTtcXG4gICAgfSwgW10pKTtcXG4gIH1cXG5cXG4gIHJldHVybiBsaXN0LmNvbmNhdChjaGlsZCk7XFxufVxcblxcbnZhciBNRVRBVFlQRVMgPSBbJ25hbWUnLCAnaHR0cEVxdWl2JywgJ2NoYXJTZXQnLCAnaXRlbVByb3AnXTtcXG4vKlxcbiByZXR1cm5zIGEgZnVuY3Rpb24gZm9yIGZpbHRlcmluZyBoZWFkIGNoaWxkIGVsZW1lbnRzXFxuIHdoaWNoIHNob3VsZG4ndCBiZSBkdXBsaWNhdGVkLCBsaWtlIDx0aXRsZS8+XFxuIEFsc28gYWRkcyBzdXBwb3J0IGZvciBkZWR1cGxpY2F0ZWQgYGtleWAgcHJvcGVydGllc1xcbiovXFxuXFxuZnVuY3Rpb24gdW5pcXVlKCkge1xcbiAgdmFyIGtleXMgPSBuZXcgU2V0KCk7XFxuICB2YXIgdGFncyA9IG5ldyBTZXQoKTtcXG4gIHZhciBtZXRhVHlwZXMgPSBuZXcgU2V0KCk7XFxuICB2YXIgbWV0YUNhdGVnb3JpZXMgPSB7fTtcXG4gIHJldHVybiBmdW5jdGlvbiAoaCkge1xcbiAgICB2YXIgaXNVbmlxdWUgPSB0cnVlO1xcbiAgICB2YXIgaGFzS2V5ID0gZmFsc2U7XFxuXFxuICAgIGlmIChoLmtleSAmJiB0eXBlb2YgaC5rZXkgIT09ICdudW1iZXInICYmIGgua2V5LmluZGV4T2YoJyQnKSA+IDApIHtcXG4gICAgICBoYXNLZXkgPSB0cnVlO1xcbiAgICAgIHZhciBrZXkgPSBoLmtleS5zbGljZShoLmtleS5pbmRleE9mKCckJykgKyAxKTtcXG5cXG4gICAgICBpZiAoa2V5cy5oYXMoa2V5KSkge1xcbiAgICAgICAgaXNVbmlxdWUgPSBmYWxzZTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAga2V5cy5hZGQoa2V5KTtcXG4gICAgICB9XFxuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxcblxcblxcbiAgICBzd2l0Y2ggKGgudHlwZSkge1xcbiAgICAgIGNhc2UgJ3RpdGxlJzpcXG4gICAgICBjYXNlICdiYXNlJzpcXG4gICAgICAgIGlmICh0YWdzLmhhcyhoLnR5cGUpKSB7XFxuICAgICAgICAgIGlzVW5pcXVlID0gZmFsc2U7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICB0YWdzLmFkZChoLnR5cGUpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgY2FzZSAnbWV0YSc6XFxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gTUVUQVRZUEVTLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxuICAgICAgICAgIHZhciBtZXRhdHlwZSA9IE1FVEFUWVBFU1tpXTtcXG4gICAgICAgICAgaWYgKCFoLnByb3BzLmhhc093blByb3BlcnR5KG1ldGF0eXBlKSkgY29udGludWU7XFxuXFxuICAgICAgICAgIGlmIChtZXRhdHlwZSA9PT0gJ2NoYXJTZXQnKSB7XFxuICAgICAgICAgICAgaWYgKG1ldGFUeXBlcy5oYXMobWV0YXR5cGUpKSB7XFxuICAgICAgICAgICAgICBpc1VuaXF1ZSA9IGZhbHNlO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICBtZXRhVHlwZXMuYWRkKG1ldGF0eXBlKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgdmFyIGNhdGVnb3J5ID0gaC5wcm9wc1ttZXRhdHlwZV07XFxuICAgICAgICAgICAgdmFyIGNhdGVnb3JpZXMgPSBtZXRhQ2F0ZWdvcmllc1ttZXRhdHlwZV0gfHwgbmV3IFNldCgpO1xcblxcbiAgICAgICAgICAgIGlmICgobWV0YXR5cGUgIT09ICduYW1lJyB8fCAhaGFzS2V5KSAmJiBjYXRlZ29yaWVzLmhhcyhjYXRlZ29yeSkpIHtcXG4gICAgICAgICAgICAgIGlzVW5pcXVlID0gZmFsc2U7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgIGNhdGVnb3JpZXMuYWRkKGNhdGVnb3J5KTtcXG4gICAgICAgICAgICAgIG1ldGFDYXRlZ29yaWVzW21ldGF0eXBlXSA9IGNhdGVnb3JpZXM7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBicmVhaztcXG4gICAgfVxcblxcbiAgICByZXR1cm4gaXNVbmlxdWU7XFxuICB9O1xcbn1cXG4vKipcXG4gKlxcbiAqIEBwYXJhbSBoZWFkRWxlbWVudHMgTGlzdCBvZiBtdWx0aXBsZSA8SGVhZD4gaW5zdGFuY2VzXFxuICovXFxuXFxuXFxuZnVuY3Rpb24gcmVkdWNlQ29tcG9uZW50cyhoZWFkRWxlbWVudHMsIHByb3BzKSB7XFxuICByZXR1cm4gaGVhZEVsZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAobGlzdCwgaGVhZEVsZW1lbnQpIHtcXG4gICAgdmFyIGhlYWRFbGVtZW50Q2hpbGRyZW4gPSBfcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5DaGlsZHJlbi50b0FycmF5KGhlYWRFbGVtZW50LnByb3BzLmNoaWxkcmVuKTtcXG5cXG4gICAgcmV0dXJuIGxpc3QuY29uY2F0KGhlYWRFbGVtZW50Q2hpbGRyZW4pO1xcbiAgfSwgW10pLnJlZHVjZShvbmx5UmVhY3RFbGVtZW50LCBbXSkucmV2ZXJzZSgpLmNvbmNhdChkZWZhdWx0SGVhZChwcm9wcy5pbkFtcE1vZGUpKS5maWx0ZXIodW5pcXVlKCkpLnJldmVyc2UoKS5tYXAoZnVuY3Rpb24gKGMsIGkpIHtcXG4gICAgdmFyIGtleSA9IGMua2V5IHx8IGk7XFxuXFxuICAgIGlmIChmYWxzZSkgeyB2YXIgbmV3UHJvcHM7IH1cXG5cXG4gICAgaWYgKHRydWUpIHtcXG4gICAgICAvLyBvbWl0IEpTT04tTEQgc3RydWN0dXJlZCBkYXRhIHNuaXBwZXRzIGZyb20gdGhlIHdhcm5pbmdcXG4gICAgICBpZiAoYy50eXBlID09PSAnc2NyaXB0JyAmJiBjLnByb3BzWyd0eXBlJ10gIT09ICdhcHBsaWNhdGlvbi9sZCtqc29uJykge1xcbiAgICAgICAgdmFyIHNyY01lc3NhZ2UgPSBjLnByb3BzWydzcmMnXSA/IFxcXCI8c2NyaXB0PiB0YWcgd2l0aCBzcmM9XFxcXFxcXCJcXFwiLmNvbmNhdChjLnByb3BzWydzcmMnXSwgXFxcIlxcXFxcXFwiXFxcIikgOiBcXFwiaW5saW5lIDxzY3JpcHQ+XFxcIjtcXG4gICAgICAgICgwLCBfdXRpbHMpLndhcm5PbmNlKFxcXCJEbyBub3QgYWRkIDxzY3JpcHQ+IHRhZ3MgdXNpbmcgbmV4dC9oZWFkIChzZWUgXFxcIi5jb25jYXQoc3JjTWVzc2FnZSwgXFxcIikuIFVzZSBuZXh0L3NjcmlwdCBpbnN0ZWFkLiBcXFxcblNlZSBtb3JlIGluZm8gaGVyZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvbm8tc2NyaXB0LXRhZ3MtaW4taGVhZC1jb21wb25lbnRcXFwiKSk7XFxuICAgICAgfSBlbHNlIGlmIChjLnR5cGUgPT09ICdsaW5rJyAmJiBjLnByb3BzWydyZWwnXSA9PT0gJ3N0eWxlc2hlZXQnKSB7XFxuICAgICAgICAoMCwgX3V0aWxzKS53YXJuT25jZShcXFwiRG8gbm90IGFkZCBzdHlsZXNoZWV0cyB1c2luZyBuZXh0L2hlYWQgKHNlZSA8bGluayByZWw9XFxcXFxcXCJzdHlsZXNoZWV0XFxcXFxcXCI+IHRhZyB3aXRoIGhyZWY9XFxcXFxcXCJcXFwiLmNvbmNhdChjLnByb3BzWydocmVmJ10sIFxcXCJcXFxcXFxcIikuIFVzZSBEb2N1bWVudCBpbnN0ZWFkLiBcXFxcblNlZSBtb3JlIGluZm8gaGVyZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvbm8tc3R5bGVzaGVldHMtaW4taGVhZC1jb21wb25lbnRcXFwiKSk7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY2xvbmVFbGVtZW50KGMsIHtcXG4gICAgICBrZXk6IGtleVxcbiAgICB9KTtcXG4gIH0pO1xcbn1cXG4vKipcXG4gKiBUaGlzIGNvbXBvbmVudCBpbmplY3RzIGVsZW1lbnRzIHRvIGA8aGVhZD5gIG9mIHlvdXIgcGFnZS5cXG4gKiBUbyBhdm9pZCBkdXBsaWNhdGVkIGB0YWdzYCBpbiBgPGhlYWQ+YCB5b3UgY2FuIHVzZSB0aGUgYGtleWAgcHJvcGVydHksIHdoaWNoIHdpbGwgbWFrZSBzdXJlIGV2ZXJ5IHRhZyBpcyBvbmx5IHJlbmRlcmVkIG9uY2UuXFxuICovXFxuXFxuXFxuZnVuY3Rpb24gSGVhZChfcmVmKSB7XFxuICBfcygpO1xcblxcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcXG4gIHZhciBhbXBTdGF0ZSA9ICgwLCBfcmVhY3QpLnVzZUNvbnRleHQoX2FtcENvbnRleHQuQW1wU3RhdGVDb250ZXh0KTtcXG4gIHZhciBoZWFkTWFuYWdlciA9ICgwLCBfcmVhY3QpLnVzZUNvbnRleHQoX2hlYWRNYW5hZ2VyQ29udGV4dC5IZWFkTWFuYWdlckNvbnRleHQpO1xcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KF9zaWRlRWZmZWN0W1xcXCJkZWZhdWx0XFxcIl0sIHtcXG4gICAgcmVkdWNlQ29tcG9uZW50c1RvU3RhdGU6IHJlZHVjZUNvbXBvbmVudHMsXFxuICAgIGhlYWRNYW5hZ2VyOiBoZWFkTWFuYWdlcixcXG4gICAgaW5BbXBNb2RlOiAoMCwgX2FtcCkuaXNJbkFtcE1vZGUoYW1wU3RhdGUpXFxuICB9LCBjaGlsZHJlbik7XFxufVxcblxcbl9zKEhlYWQsIFxcXCJzQ1VheVptcjVWOTN0VWp1ankwM0tkTUJDZWM9XFxcIik7XFxuXFxuX2MgPSBIZWFkO1xcbnZhciBfZGVmYXVsdCA9IEhlYWQ7XFxuZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdID0gX2RlZmF1bHQ7XFxuXFxuaWYgKHR5cGVvZiBleHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9PT0gJ29iamVjdCcgJiYgZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdICE9PSBudWxsKSB7XFxuICBPYmplY3QuYXNzaWduKGV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSwgZXhwb3J0cyk7XFxuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXTtcXG59XFxuXFxudmFyIF9jO1xcblxcbiRSZWZyZXNoUmVnJChfYywgXFxcIkhlYWRcXFwiKTtcXG5cXG47XFxuICAgIC8vIFdyYXBwZWQgaW4gYW4gSUlGRSB0byBhdm9pZCBwb2xsdXRpbmcgdGhlIGdsb2JhbCBzY29wZVxcbiAgICA7XFxuICAgIChmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgLy8gTGVnYWN5IENTUyBpbXBsZW1lbnRhdGlvbnMgd2lsbCBgZXZhbGAgYnJvd3NlciBjb2RlIGluIGEgTm9kZS5qcyBjb250ZXh0XFxuICAgICAgICAvLyB0byBleHRyYWN0IENTUy4gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBuZWVkIHRvIGNoZWNrIHdlJ3JlIGluIGFcXG4gICAgICAgIC8vIGJyb3dzZXIgY29udGV4dCBiZWZvcmUgY29udGludWluZy5cXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiZcXG4gICAgICAgICAgICAvLyBBTVAgLyBOby1KUyBtb2RlIGRvZXMgbm90IGluamVjdCB0aGVzZSBoZWxwZXJzOlxcbiAgICAgICAgICAgICckUmVmcmVzaEhlbHBlcnMkJyBpbiBzZWxmKSB7XFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXFxuICAgICAgICAgICAgdmFyIGN1cnJlbnRFeHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXFxuICAgICAgICAgICAgdmFyIHByZXZFeHBvcnRzID0gKF9iID0gKF9hID0gbW9kdWxlLmhvdC5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkV4cG9ydHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XFxuICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgaGFwcGVuIGluIE1haW5UZW1wbGF0ZSBiZWNhdXNlIHRoZSBleHBvcnRzIG1pc21hdGNoIGJldHdlZW5cXG4gICAgICAgICAgICAvLyB0ZW1wbGF0aW5nIGFuZCBleGVjdXRpb24uXFxuICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnJlZ2lzdGVyRXhwb3J0c0ZvclJlYWN0UmVmcmVzaChjdXJyZW50RXhwb3J0cywgbW9kdWxlLmlkKTtcXG4gICAgICAgICAgICAvLyBBIG1vZHVsZSBjYW4gYmUgYWNjZXB0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBpdHMgZXhwb3J0cywgZS5nLiB3aGVuXFxuICAgICAgICAgICAgLy8gaXQgaXMgYSBSZWZyZXNoIEJvdW5kYXJ5LlxcbiAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuaXNSZWFjdFJlZnJlc2hCb3VuZGFyeShjdXJyZW50RXhwb3J0cykpIHtcXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgZXhwb3J0cyBvbiB1cGRhdGUgc28gd2UgY2FuIGNvbXBhcmUgdGhlIGJvdW5kYXJ5XFxuICAgICAgICAgICAgICAgIC8vIHNpZ25hdHVyZXMuXFxuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmV2RXhwb3J0cyA9IGN1cnJlbnRFeHBvcnRzO1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgLy8gVW5jb25kaXRpb25hbGx5IGFjY2VwdCBhbiB1cGRhdGUgdG8gdGhpcyBtb2R1bGUsIHdlJ2xsIGNoZWNrIGlmIGl0J3NcXG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgYSBSZWZyZXNoIEJvdW5kYXJ5IGxhdGVyLlxcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIGltcG9ydE1ldGEgaXMgcmVwbGFjZWQgaW4gdGhlIGxvYWRlclxcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgpO1xcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZpZWxkIGlzIHNldCB3aGVuIHRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgbW9kdWxlIHdhcyBhXFxuICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggQm91bmRhcnksIGxldHRpbmcgdXMga25vdyB3ZSBuZWVkIHRvIGNoZWNrIGZvciBpbnZhbGlkYXRpb24gb3JcXG4gICAgICAgICAgICAgICAgLy8gZW5xdWV1ZSBhbiB1cGRhdGUuXFxuICAgICAgICAgICAgICAgIGlmIChwcmV2RXhwb3J0cyAhPT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBib3VuZGFyeSBjYW4gYmVjb21lIGluZWxpZ2libGUgaWYgaXRzIGV4cG9ydHMgYXJlIGluY29tcGF0aWJsZVxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgZXhwb3J0cy5cXG4gICAgICAgICAgICAgICAgICAgIC8vXFxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgaWYgeW91IGFkZC9yZW1vdmUvY2hhbmdlIGV4cG9ydHMsIHdlJ2xsIHdhbnQgdG9cXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLWV4ZWN1dGUgdGhlIGltcG9ydGluZyBtb2R1bGVzLCBhbmQgZm9yY2UgdGhvc2UgY29tcG9uZW50cyB0b1xcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyLiBTaW1pbGFybHksIGlmIHlvdSBjb252ZXJ0IGEgY2xhc3MgY29tcG9uZW50IHRvIGFcXG4gICAgICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uLCB3ZSB3YW50IHRvIGludmFsaWRhdGUgdGhlIGJvdW5kYXJ5LlxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zaG91bGRJbnZhbGlkYXRlUmVhY3RSZWZyZXNoQm91bmRhcnkocHJldkV4cG9ydHMsIGN1cnJlbnRFeHBvcnRzKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNjaGVkdWxlVXBkYXRlKCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIGp1c3QgZXhlY3V0ZWQgdGhlIGNvZGUgZm9yIHRoZSBtb2R1bGUsIGl0J3MgcG9zc2libGUgdGhhdCB0aGVcXG4gICAgICAgICAgICAgICAgLy8gbmV3IGV4cG9ydHMgbWFkZSBpdCBpbmVsaWdpYmxlIGZvciBiZWluZyBhIGJvdW5kYXJ5LlxcbiAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGNhc2Ugd2hlbiB3ZSB3ZXJlIF9wcmV2aW91c2x5XyBhIGJvdW5kYXJ5LFxcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGFscmVhZHkgYWNjZXB0ZWQgdGhpcyB1cGRhdGUgKGFjY2lkZW50YWwgc2lkZSBlZmZlY3QpLlxcbiAgICAgICAgICAgICAgICB2YXIgaXNOb0xvbmdlckFCb3VuZGFyeSA9IHByZXZFeHBvcnRzICE9PSBudWxsO1xcbiAgICAgICAgICAgICAgICBpZiAoaXNOb0xvbmdlckFCb3VuZGFyeSkge1xcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0pKCk7XFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5dWIyUmxYMjF2WkhWc1pYTXZibVY0ZEM5a2FYTjBMM05vWVhKbFpDOXNhV0l2YUdWaFpDNXFjeTVxY3lJc0ltMWhjSEJwYm1keklqb2lRVUZCWVRzN096czdPenM3T3p0QlFVTmlRU3c0UTBGQk5rTTdRVUZEZWtOSExFVkJRVUZCTEV0QlFVc3NSVUZCUlR0QlFVUnJReXhEUVVFM1F6dEJRVWRCUkN4dFFrRkJRU3hIUVVGelFrVXNWMEZCZEVJN1FVRkRRVVlzYTBKQlFVRXNSMEZCYTBJc1MwRkJTeXhEUVVGMlFqczdRVUZEUVN4SlFVRkpSeXhOUVVGTkxFZEJRVWRETEhWQ1FVRjFRaXhEUVVGRFF5eHRRa0ZCVHl4RFFVRkRMRFJEUVVGRUxFTkJRVklzUTBGQmNFTTdPMEZCUTBFc1NVRkJTVU1zVjBGQlZ5eEhRVUZIUXl4elFrRkJjMElzUTBGQlEwWXNiVUpCUVU4c1EwRkJReXg1UlVGQlJDeERRVUZTTEVOQlFYaERPenRCUVVOQkxFbEJRVWxITEZkQlFWY3NSMEZCUjBnc2JVSkJRVThzUTBGQlF5eDVSVUZCUkN4RFFVRjZRanM3UVVGRFFTeEpRVUZKU1N4dFFrRkJiVUlzUjBGQlIwb3NiVUpCUVU4c1EwRkJReXd5UmtGQlJDeERRVUZxUXpzN1FVRkRRU3hKUVVGSlN5eEpRVUZKTEVkQlFVZE1MRzFDUVVGUExFTkJRVU1zZVVSQlFVUXNRMEZCYkVJN08wRkJRMEVzU1VGQlNVMHNUVUZCVFN4SFFVRkhUaXh0UWtGQlR5eERRVUZETERaRVFVRkVMRU5CUVhCQ096dEJRVU5CTEZOQlFWTkZMSE5DUVVGVUxFTkJRV2REU3l4SFFVRm9ReXhGUVVGeFF6dEJRVU5xUXl4VFFVRlBRU3hIUVVGSExFbEJRVWxCTEVkQlFVY3NRMEZCUTBNc1ZVRkJXQ3hIUVVGM1FrUXNSMEZCZUVJc1IwRkJPRUk3UVVGRGFrTXNaVUZCVTBFN1FVRkVkMElzUjBGQmNrTTdRVUZIU0RzN1FVRkRSQ3hUUVVGVFVpeDFRa0ZCVkN4RFFVRnBRMUVzUjBGQmFrTXNSVUZCYzBNN1FVRkRiRU1zVFVGQlNVRXNSMEZCUnl4SlFVRkpRU3hIUVVGSExFTkJRVU5ETEZWQlFXWXNSVUZCTWtJN1FVRkRka0lzVjBGQlQwUXNSMEZCVUR0QlFVTklMRWRCUmtRc1RVRkZUenRCUVVOSUxGRkJRVWxGTEUxQlFVMHNSMEZCUnl4RlFVRmlPenRCUVVOQkxGRkJRVWxHTEVkQlFVY3NTVUZCU1N4SlFVRllMRVZCUVdsQ08wRkJRMklzVjBGQlNTeEpRVUZKUnl4SFFVRlNMRWxCUVdWSUxFZEJRV1lzUlVGQmJVSTdRVUZEWml4WlFVRkpaQ3hOUVVGTkxFTkJRVU5yUWl4VFFVRlFMRU5CUVdsQ1F5eGpRVUZxUWl4RFFVRm5RME1zU1VGQmFFTXNRMEZCY1VOT0xFZEJRWEpETEVWQlFUQkRSeXhIUVVFeFF5eERRVUZLTEVWQlFXOUVPMEZCUTJoRUxHTkJRVWxKTEVsQlFVa3NSMEZCUjNKQ0xFMUJRVTBzUTBGQlEwTXNZMEZCVUN4SlFVRjVRa1FzVFVGQlRTeERRVUZEYzBJc2QwSkJRV2hETEVkQlFUSkVkRUlzVFVGQlRTeERRVUZEYzBJc2QwSkJRVkFzUTBGQlowTlNMRWRCUVdoRExFVkJRWEZEUnl4SFFVRnlReXhEUVVFelJDeEhRVUYxUnl4RlFVRnNTRHM3UVVGRFFTeGpRVUZKU1N4SlFVRkpMRU5CUVVORkxFZEJRVXdzU1VGQldVWXNTVUZCU1N4RFFVRkRSeXhIUVVGeVFpeEZRVUV3UWp0QlFVTjBRbmhDTEZsQlFVRkJMRTFCUVUwc1EwRkJRME1zWTBGQlVDeERRVUZ6UW1Vc1RVRkJkRUlzUlVGQk9FSkRMRWRCUVRsQ0xFVkJRVzFEU1N4SlFVRnVRenRCUVVOSUxGZEJSa1FzVFVGRlR6dEJRVU5JVEN4WlFVRkJRU3hOUVVGTkxFTkJRVU5ETEVkQlFVUXNRMEZCVGl4SFFVRmpTQ3hIUVVGSExFTkJRVU5ITEVkQlFVUXNRMEZCYWtJN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNqczdRVUZEUkVRc1NVRkJRVUVzVFVGQlRTeFhRVUZPTEVkQlFXbENSaXhIUVVGcVFqdEJRVU5CTEZkQlFVOUZMRTFCUVZBN1FVRkRTRHRCUVVOS096dEJRVU5FTEZOQlFWTmFMRmRCUVZRc1IwRkJkME03UVVGQlFTeE5RVUZ1UW5GQ0xGTkJRVzFDTEhWRlFVRlFMRXRCUVU4N1FVRkRjRU1zVFVGQlRVTXNTVUZCU1N4SFFVRkhMRU5CUTFRc1lVRkJZM0pDTEUxQlFVMHNWMEZCVGl4RFFVRmxjMElzWVVGQlppeERRVUUyUWl4TlFVRTNRaXhGUVVGeFF6dEJRVU12UTBNc1NVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlJITkRMRWRCUVhKRExFTkJSRXdzUTBGQllqczdRVUZMUVN4TlFVRkpMRU5CUVVOSUxGTkJRVXdzUlVGQlowSTdRVUZEV2tNc1NVRkJRVUVzU1VGQlNTeERRVUZEUnl4SlFVRk1MRVZCUVZVc1lVRkJZM2hDTEUxQlFVMHNWMEZCVGl4RFFVRmxjMElzWVVGQlppeERRVUUyUWl4TlFVRTNRaXhGUVVGeFF6dEJRVU42UkVjc1RVRkJRVUVzU1VGQlNTeEZRVUZGTEZWQlJHMUVPMEZCUlhwRVF5eE5RVUZCUVN4UFFVRlBMRVZCUVVVN1FVRkdaMFFzUzBGQmNrTXNRMEZCZUVJN1FVRkpTRHM3UVVGRFJDeFRRVUZQVEN4SlFVRlFPMEZCUTBnN08wRkJRMFFzVTBGQlUwMHNaMEpCUVZRc1EwRkJNRUpETEVsQlFURkNMRVZCUVdkRFF5eExRVUZvUXl4RlFVRjFRenRCUVVOdVF6dEJRVU5CTEUxQlFVa3NUMEZCVDBFc1MwRkJVQ3hMUVVGcFFpeFJRVUZxUWl4SlFVRTJRaXhQUVVGUFFTeExRVUZRTEV0QlFXbENMRkZCUVd4RUxFVkJRVFJFTzBGQlEzaEVMRmRCUVU5RUxFbEJRVkE3UVVGRFNDeEhRVXByUXl4RFFVdHVRenM3TzBGQlEwRXNUVUZCU1VNc1MwRkJTeXhEUVVGRFF5eEpRVUZPTEV0QlFXVTVRaXhOUVVGTkxGZEJRVTRzUTBGQlpTdENMRkZCUVd4RExFVkJRVFJETzBGQlEzaERMRmRCUVU5SUxFbEJRVWtzUTBGQlEwa3NUVUZCVEN4RFFVRlphRU1zVFVGQlRTeFhRVUZPTEVOQlFXVnBReXhSUVVGbUxFTkJRWGRDUXl4UFFVRjRRaXhEUVVGblEwd3NTMEZCU3l4RFFVRkRUU3hMUVVGT0xFTkJRVmxETEZGQlFUVkRMRVZCUVhORVF5eE5RVUYwUkN4RFFVRTJSQ3hWUVVGRFF5eFpRVUZFTEVWQlFXVkRMR0ZCUVdZc1JVRkJLMEk3UVVGRE0wY3NWVUZCU1N4UFFVRlBRU3hoUVVGUUxFdEJRWGxDTEZGQlFYcENMRWxCUVhGRExFOUJRVTlCTEdGQlFWQXNTMEZCZVVJc1VVRkJiRVVzUlVGQk5FVTdRVUZEZUVVc1pVRkJUMFFzV1VGQlVEdEJRVU5JT3p0QlFVTkVMR0ZCUVU5QkxGbEJRVmtzUTBGQlEwNHNUVUZCWWl4RFFVRnZRazhzWVVGQmNFSXNRMEZCVUR0QlFVTklMRXRCVEd0Q0xFVkJTMmhDTEVWQlRHZENMRU5CUVZvc1EwRkJVRHRCUVUxSU96dEJRVU5FTEZOQlFVOVlMRWxCUVVrc1EwRkJRMGtzVFVGQlRDeERRVUZaU0N4TFFVRmFMRU5CUVZBN1FVRkRTRHM3UVVGRFJDeEpRVUZOVnl4VFFVRlRMRWRCUVVjc1EwRkRaQ3hOUVVSakxFVkJSV1FzVjBGR1l5eEZRVWRrTEZOQlNHTXNSVUZKWkN4VlFVcGpMRU5CUVd4Q08wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkJSeXhUUVVGVFF5eE5RVUZVTEVkQlFXdENPMEZCUTJwQ0xFMUJRVTFETEVsQlFVa3NSMEZCUnl4SlFVRkpReXhIUVVGS0xFVkJRV0k3UVVGRFFTeE5RVUZOUXl4SlFVRkpMRWRCUVVjc1NVRkJTVVFzUjBGQlNpeEZRVUZpTzBGQlEwRXNUVUZCVFVVc1UwRkJVeXhIUVVGSExFbEJRVWxHTEVkQlFVb3NSVUZCYkVJN1FVRkRRU3hOUVVGTlJ5eGpRVUZqTEVkQlFVY3NSVUZCZGtJN1FVRkRRU3hUUVVGUExGVkJRVU5ETEVOQlFVUXNSVUZCU3p0QlFVTlNMRkZCUVVsRExGRkJRVkVzUjBGQlJ5eEpRVUZtTzBGQlEwRXNVVUZCU1VNc1RVRkJUU3hIUVVGSExFdEJRV0k3TzBGQlEwRXNVVUZCU1VZc1EwRkJReXhEUVVGRGJrTXNSMEZCUml4SlFVRlRMRTlCUVU5dFF5eERRVUZETEVOQlFVTnVReXhIUVVGVUxFdEJRV2xDTEZGQlFURkNMRWxCUVhORGJVTXNRMEZCUXl4RFFVRkRia01zUjBGQlJpeERRVUZOYzBNc1QwRkJUaXhEUVVGakxFZEJRV1FzU1VGQmNVSXNRMEZCTDBRc1JVRkJhMFU3UVVGRE9VUkVMRTFCUVVGQkxFMUJRVTBzUjBGQlJ5eEpRVUZVTzBGQlEwRXNWVUZCVFhKRExFZEJRVWNzUjBGQlIyMURMRU5CUVVNc1EwRkJRMjVETEVkQlFVWXNRMEZCVFhWRExFdEJRVTRzUTBGQldVb3NRMEZCUXl4RFFVRkRia01zUjBGQlJpeERRVUZOYzBNc1QwRkJUaXhEUVVGakxFZEJRV1FzU1VGQmNVSXNRMEZCYWtNc1EwRkJXanM3UVVGRFFTeFZRVUZKVWl4SlFVRkpMRU5CUVVOVkxFZEJRVXdzUTBGQlUzaERMRWRCUVZRc1EwRkJTaXhGUVVGdFFqdEJRVU5tYjBNc1VVRkJRVUVzVVVGQlVTeEhRVUZITEV0QlFWZzdRVUZEU0N4UFFVWkVMRTFCUlU4N1FVRkRTRTRzVVVGQlFVRXNTVUZCU1N4RFFVRkRWeXhIUVVGTUxFTkJRVk42UXl4SFFVRlVPMEZCUTBnN1FVRkRTaXhMUVZoUExFTkJXVkk3T3p0QlFVTkJMRmxCUVU5dFF5eERRVUZETEVOQlFVTnFRaXhKUVVGVU8wRkJRMGtzVjBGQlN5eFBRVUZNTzBGQlEwRXNWMEZCU3l4TlFVRk1PMEZCUTBrc1dVRkJTV01zU1VGQlNTeERRVUZEVVN4SFFVRk1MRU5CUVZOTUxFTkJRVU1zUTBGQlEycENMRWxCUVZnc1EwRkJTaXhGUVVGelFqdEJRVU5zUW10Q0xGVkJRVUZCTEZGQlFWRXNSMEZCUnl4TFFVRllPMEZCUTBnc1UwRkdSQ3hOUVVWUE8wRkJRMGhLTEZWQlFVRkJMRWxCUVVrc1EwRkJRMU1zUjBGQlRDeERRVUZUVGl4RFFVRkRMRU5CUVVOcVFpeEpRVUZZTzBGQlEwZzdPMEZCUTBRN08wRkJRMG9zVjBGQlN5eE5RVUZNTzBGQlEwa3NZVUZCU1N4SlFVRkpkMElzUTBGQlF5eEhRVUZITEVOQlFWSXNSVUZCVjBNc1IwRkJSeXhIUVVGSFppeFRRVUZUTEVOQlFVTm5RaXhOUVVFdlFpeEZRVUYxUTBZc1EwRkJReXhIUVVGSFF5eEhRVUV6UXl4RlFVRm5SRVFzUTBGQlF5eEZRVUZxUkN4RlFVRnZSRHRCUVVOb1JDeGpRVUZOUnl4UlFVRlJMRWRCUVVkcVFpeFRRVUZUTEVOQlFVTmpMRU5CUVVRc1EwRkJNVUk3UVVGRFFTeGpRVUZKTEVOQlFVTlFMRU5CUVVNc1EwRkJRMW9zUzBGQlJpeERRVUZSY2tJc1kwRkJVaXhEUVVGMVFqSkRMRkZCUVhaQ0xFTkJRVXdzUlVGQmRVTTdPMEZCUTNaRExHTkJRVWxCTEZGQlFWRXNTMEZCU3l4VFFVRnFRaXhGUVVFMFFqdEJRVU40UWl4blFrRkJTVm9zVTBGQlV5eERRVUZEVHl4SFFVRldMRU5CUVdOTExGRkJRV1FzUTBGQlNpeEZRVUUyUWp0QlFVTjZRbFFzWTBGQlFVRXNVVUZCVVN4SFFVRkhMRXRCUVZnN1FVRkRTQ3hoUVVaRUxFMUJSVTg3UVVGRFNFZ3NZMEZCUVVFc1UwRkJVeXhEUVVGRFVTeEhRVUZXTEVOQlFXTkpMRkZCUVdRN1FVRkRTRHRCUVVOS0xGZEJUa1FzVFVGTlR6dEJRVU5JTEdkQ1FVRk5ReXhSUVVGUkxFZEJRVWRZTEVOQlFVTXNRMEZCUTFvc1MwRkJSaXhEUVVGUmMwSXNVVUZCVWl4RFFVRnFRanRCUVVOQkxHZENRVUZOUlN4VlFVRlZMRWRCUVVkaUxHTkJRV01zUTBGQlExY3NVVUZCUkN4RFFVRmtMRWxCUVRSQ0xFbEJRVWxrTEVkQlFVb3NSVUZCTDBNN08wRkJRMEVzWjBKQlFVa3NRMEZCUTJNc1VVRkJVU3hMUVVGTExFMUJRV0lzU1VGQmRVSXNRMEZCUTFJc1RVRkJla0lzUzBGQmIwTlZMRlZCUVZVc1EwRkJRMUFzUjBGQldDeERRVUZsVFN4UlFVRm1MRU5CUVhoRExFVkJRV3RGTzBGQlF6bEVWaXhqUVVGQlFTeFJRVUZSTEVkQlFVY3NTMEZCV0R0QlFVTklMR0ZCUmtRc1RVRkZUenRCUVVOSVZ5eGpRVUZCUVN4VlFVRlZMRU5CUVVOT0xFZEJRVmdzUTBGQlpVc3NVVUZCWmp0QlFVTkJXaXhqUVVGQlFTeGpRVUZqTEVOQlFVTlhMRkZCUVVRc1EwRkJaQ3hIUVVFeVFrVXNWVUZCTTBJN1FVRkRTRHRCUVVOS08wRkJRMG83TzBGQlEwUTdRVUU1UWxJN08wRkJaME5CTEZkQlFVOVlMRkZCUVZBN1FVRkRTQ3hIUVRsRFJEdEJRU3REU0R0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZCU1N4VFFVRlRXU3huUWtGQlZDeERRVUV3UWtNc1dVRkJNVUlzUlVGQmQwTXhRaXhMUVVGNFF5eEZRVUVyUXp0QlFVTXZReXhUUVVGUE1FSXNXVUZCV1N4RFFVRkRlRUlzVFVGQllpeERRVUZ2UWl4VlFVRkRWQ3hKUVVGRUxFVkJRVTlyUXl4WFFVRlFMRVZCUVhGQ08wRkJRelZETEZGQlFVMURMRzFDUVVGdFFpeEhRVUZITDBRc1RVRkJUU3hYUVVGT0xFTkJRV1ZwUXl4UlFVRm1MRU5CUVhkQ1F5eFBRVUY0UWl4RFFVRm5RelJDTEZkQlFWY3NRMEZCUXpOQ0xFdEJRVm9zUTBGQmEwSkRMRkZCUVd4RUxFTkJRVFZDT3p0QlFVTkJMRmRCUVU5U0xFbEJRVWtzUTBGQlEwa3NUVUZCVEN4RFFVRlpLMElzYlVKQlFWb3NRMEZCVUR0QlFVTklMRWRCU0Uwc1JVRkhTaXhGUVVoSkxFVkJSMEV4UWl4TlFVaEJMRU5CUjA5V0xHZENRVWhRTEVWQlIzbENMRVZCU0hwQ0xFVkJSelpDY1VNc1QwRklOMElzUjBGSGRVTm9ReXhOUVVoMlF5eERRVWM0UTJwRExGZEJRVmNzUTBGQlEyOURMRXRCUVVzc1EwRkJRMllzVTBGQlVDeERRVWg2UkN4RlFVYzBSVFpETEUxQlNEVkZMRU5CUjIxR2VFSXNUVUZCVFN4RlFVaDZSaXhGUVVjMlJuVkNMRTlCU0RkR0xFZEJSM1ZIUlN4SFFVaDJSeXhEUVVjeVJ5eFZRVUZEUXl4RFFVRkVMRVZCUVVsaUxFTkJRVW9zUlVGQlVUdEJRVU4wU0N4UlFVRk5NVU1zUjBGQlJ5eEhRVUZIZFVRc1EwRkJReXhEUVVGRGRrUXNSMEZCUml4SlFVRlRNRU1zUTBGQmNrSTdPMEZCUTBFc1VVRkJTU3hMUVVGS0xFVkJRWEZITEdsQ1FXZENjRWM3TzBGQlEwUXNVVUZCU1N4SlFVRktMRVZCUVRaRk8wRkJRM3BGTzBGQlEwRXNWVUZCU1dFc1EwRkJReXhEUVVGRGNrTXNTVUZCUml4TFFVRlhMRkZCUVZnc1NVRkJkVUp4UXl4RFFVRkRMRU5CUVVOb1F5eExRVUZHTEVOQlFWRXNUVUZCVWl4TlFVRnZRaXh4UWtGQkwwTXNSVUZCYzBVN1FVRkRiRVVzV1VGQlRUSkRMRlZCUVZVc1IwRkJSMWdzUTBGQlF5eERRVUZEYUVNc1MwRkJSaXhEUVVGUkxFdEJRVklzYzBOQlFUSkRaME1zUTBGQlF5eERRVUZEYUVNc1MwRkJSaXhEUVVGUkxFdEJRVklzUTBGQk0wTXNNa0pCUVc1Q08wRkJRMEVzVTBGQlF5eEhRVUZITTBJc1RVRkJTaXhGUVVGWmRVVXNVVUZCV2l4NVJFRkJjMFZFTEZWQlFYUkZPMEZCUTBnc1QwRklSQ3hOUVVkUExFbEJRVWxZTEVOQlFVTXNRMEZCUTNKRExFbEJRVVlzUzBGQlZ5eE5RVUZZTEVsQlFYRkNjVU1zUTBGQlF5eERRVUZEYUVNc1MwRkJSaXhEUVVGUkxFdEJRVklzVFVGQmJVSXNXVUZCTlVNc1JVRkJNRVE3UVVGRE4wUXNVMEZCUXl4SFFVRkhNMElzVFVGQlNpeEZRVUZaZFVVc1VVRkJXaXhwUjBGQk1rZGFMRU5CUVVNc1EwRkJRMmhETEV0QlFVWXNRMEZCVVN4TlFVRlNMRU5CUVROSE8wRkJRMGc3UVVGRFNqczdRVUZEUkN4WFFVRlBMR0ZCUVdOdVF5eE5RVUZOTEZkQlFVNHNRMEZCWlRSRkxGbEJRV1lzUTBGQk5FSlVMRU5CUVRWQ0xFVkJRU3RDTzBGQlEyaEVka1FzVFVGQlFVRXNSMEZCUnl4RlFVRklRVHRCUVVSblJDeExRVUV2UWl4RFFVRnlRanRCUVVkSUxFZEJiRU5OTEVOQlFWQTdRVUZ0UTBnN1FVRkRSRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUVVrc1UwRkJVMjlGTEVsQlFWUXNUMEZCTmtJN1FVRkJRVHM3UVVGQlFTeE5RVUZpTlVNc1VVRkJZU3hSUVVGaVFTeFJRVUZoTzBGQlF6ZENMRTFCUVUwMlF5eFJRVUZSTEVkQlFVY3NRMEZCUXl4SFFVRkhha1lzVFVGQlNpeEZRVUZaYTBZc1ZVRkJXaXhEUVVGMVFqZEZMRmRCUVZjc1EwRkJRemhGTEdWQlFXNURMRU5CUVdwQ08wRkJRMEVzVFVGQlRVTXNWMEZCVnl4SFFVRkhMRU5CUVVNc1IwRkJSM0JHTEUxQlFVb3NSVUZCV1d0R0xGVkJRVm9zUTBGQmRVSTFSU3h0UWtGQmJVSXNRMEZCUXl0RkxHdENRVUV6UXl4RFFVRndRanRCUVVOQkxGTkJRVThzWVVGQlkzSkdMRTFCUVUwc1YwRkJUaXhEUVVGbGMwSXNZVUZCWml4RFFVRTJRbTVDTEZkQlFWY3NWMEZCZUVNc1JVRkJhMFE3UVVGRGJrVnRSaXhKUVVGQlFTeDFRa0ZCZFVJc1JVRkJSVEZDTEdkQ1FVUXdRenRCUVVWdVJYZENMRWxCUVVGQkxGZEJRVmNzUlVGQlJVRXNWMEZHYzBRN1FVRkhia1ZvUlN4SlFVRkJRU3hUUVVGVExFVkJRVVVzUTBGQlF5eEhRVUZIWWl4SlFVRktMRVZCUVZWblJpeFhRVUZXTEVOQlFYTkNUaXhSUVVGMFFqdEJRVWgzUkN4SFFVRnNSQ3hGUVVsc1FqZERMRkZCU210Q0xFTkJRWEpDTzBGQlMwZzdPMGRCVWxrMFF5eEpPenRMUVVGQlFTeEpPMEZCVTJJc1NVRkJTVkVzVVVGQlVTeEhRVUZIVWl4SlFVRm1PMEZCUTBGdVJpeHJRa0ZCUVN4SFFVRnJRakpHTEZGQlFXeENPenRCUVVWQkxFbEJRVWtzVDBGQlR6TkdMRTlCUVU4c1YwRkJaQ3hMUVVFeVFpeFZRVUV6UWl4SlFVRXdReXhQUVVGUFFTeFBRVUZQTEZkQlFXUXNTMEZCTWtJc1VVRkJNMElzU1VGQmRVTkJMRTlCUVU4c1YwRkJVQ3hMUVVGdlFpeEpRVUY2Unl4RlFVRm5TRHRCUVVNNVIwWXNSVUZCUVVFc1RVRkJUU3hEUVVGRE9FWXNUVUZCVUN4RFFVRmpOVVlzVDBGQlR5eFhRVUZ5UWl4RlFVRXJRa0VzVDBGQkwwSTdRVUZEUVRaR0xFVkJRVUZCTEUxQlFVMHNRMEZCUXpkR0xFOUJRVkFzUjBGQmFVSkJMRTlCUVU4c1YwRkJlRUk3UVVGRFJDSXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDE5T1gwVXZMaTl1YjJSbFgyMXZaSFZzWlhNdmJtVjRkQzlrYVhOMEwzTm9ZWEpsWkM5c2FXSXZhR1ZoWkM1cWN6OW1ZalZrSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwU0dWaFpDQTlJR1JsWm1GMWJIUklaV0ZrTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ2RtOXBaQ0F3TzF4dWRtRnlJRjl5WldGamRDQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpWZHBiR1JqWVhKa0tISmxjWFZwY21Vb1hDSnlaV0ZqZEZ3aUtTazdYRzUyWVhJZ1gzTnBaR1ZGWm1abFkzUWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSXVMM05wWkdVdFpXWm1aV04wWENJcEtUdGNiblpoY2lCZllXMXdRMjl1ZEdWNGRDQTlJSEpsY1hWcGNtVW9YQ0l1TDJGdGNDMWpiMjUwWlhoMFhDSXBPMXh1ZG1GeUlGOW9aV0ZrVFdGdVlXZGxja052Ym5SbGVIUWdQU0J5WlhGMWFYSmxLRndpTGk5b1pXRmtMVzFoYm1GblpYSXRZMjl1ZEdWNGRGd2lLVHRjYm5aaGNpQmZZVzF3SUQwZ2NtVnhkV2x5WlNoY0lpNHZZVzF3WENJcE8xeHVkbUZ5SUY5MWRHbHNjeUE5SUhKbGNYVnBjbVVvWENJdUwzVjBhV3h6WENJcE8xeHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z2IySnFJQ1ltSUc5aWFpNWZYMlZ6VFc5a2RXeGxJRDhnYjJKcUlEb2dlMXh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJ2WW1wY2JpQWdJQ0I5TzF4dWZWeHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFYybHNaR05oY21Rb2IySnFLU0I3WEc0Z0lDQWdhV1lnS0c5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMkpxTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYZFBZbW9nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdhV1lnS0c5aWFpQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9kbUZ5SUd0bGVTQnBiaUJ2WW1vcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQnJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1pYTmpJRDBnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUlDWW1JRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJZ1B5QlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0c5aWFpd2dhMlY1S1NBNklIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR1Z6WXk1blpYUWdmSHdnWkdWell5NXpaWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHVaWGRQWW1vc0lHdGxlU3dnWkdWell5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhkUFltcGJhMlY1WFNBOUlHOWlhbHRyWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUc1bGQwOWlhaTVrWldaaGRXeDBJRDBnYjJKcU8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNUMkpxTzF4dUlDQWdJSDFjYm4xY2JtWjFibU4wYVc5dUlHUmxabUYxYkhSSVpXRmtLR2x1UVcxd1RXOWtaU0E5SUdaaGJITmxLU0I3WEc0Z0lDQWdZMjl1YzNRZ2FHVmhaQ0E5SUZ0Y2JpQWdJQ0FnSUNBZ0x5b2pYMTlRVlZKRlgxOHFMeUJmY21WaFkzUXVaR1ZtWVhWc2RDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWJXVjBZVndpTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGeVUyVjBPaUJjSW5WMFppMDRYQ0pjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0JkTzF4dUlDQWdJR2xtSUNnaGFXNUJiWEJOYjJSbEtTQjdYRzRnSUNBZ0lDQWdJR2hsWVdRdWNIVnphQ2d2S2lOZlgxQlZVa1ZmWHlvdklGOXlaV0ZqZEM1a1pXWmhkV3gwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0p0WlhSaFhDSXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUZ3aWRtbGxkM0J2Y25SY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxiblE2SUZ3aWQybGtkR2c5WkdWMmFXTmxMWGRwWkhSb1hDSmNiaUFnSUNBZ0lDQWdmU2twTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2FHVmhaRHRjYm4xY2JtWjFibU4wYVc5dUlHOXViSGxTWldGamRFVnNaVzFsYm5Rb2JHbHpkQ3dnWTJocGJHUXBJSHRjYmlBZ0lDQXZMeUJTWldGamRDQmphR2xzWkhKbGJpQmpZVzRnWW1VZ1hDSnpkSEpwYm1kY0lpQnZjaUJjSW01MWJXSmxjbHdpSUdsdUlIUm9hWE1nWTJGelpTQjNaU0JwWjI1dmNtVWdkR2hsYlNCbWIzSWdZbUZqYTNkaGNtUnpJR052YlhCaGRGeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyaHBiR1FnUFQwOUlDZHpkSEpwYm1jbklIeDhJSFI1Y0dWdlppQmphR2xzWkNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3hwYzNRN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUVGa1pITWdjM1Z3Y0c5eWRDQm1iM0lnVW1WaFkzUXVSbkpoWjIxbGJuUmNiaUFnSUNCcFppQW9ZMmhwYkdRdWRIbHdaU0E5UFQwZ1gzSmxZV04wTG1SbFptRjFiSFF1Um5KaFoyMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4cGMzUXVZMjl1WTJGMEtGOXlaV0ZqZEM1a1pXWmhkV3gwTGtOb2FXeGtjbVZ1TG5SdlFYSnlZWGtvWTJocGJHUXVjSEp2Y0hNdVkyaHBiR1J5Wlc0cExuSmxaSFZqWlNnb1puSmhaMjFsYm5STWFYTjBMQ0JtY21GbmJXVnVkRU5vYVd4a0tUMCtlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQm1jbUZuYldWdWRFTm9hV3hrSUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IwZVhCbGIyWWdabkpoWjIxbGJuUkRhR2xzWkNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabkpoWjIxbGJuUk1hWE4wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaeVlXZHRaVzUwVEdsemRDNWpiMjVqWVhRb1puSmhaMjFsYm5SRGFHbHNaQ2s3WEc0Z0lDQWdJQ0FnSUgwc0lGdGRLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCc2FYTjBMbU52Ym1OaGRDaGphR2xzWkNrN1hHNTlYRzVqYjI1emRDQk5SVlJCVkZsUVJWTWdQU0JiWEc0Z0lDQWdKMjVoYldVbkxGeHVJQ0FnSUNkb2RIUndSWEYxYVhZbkxGeHVJQ0FnSUNkamFHRnlVMlYwSnl4Y2JpQWdJQ0FuYVhSbGJWQnliM0FuWEc1ZE8xeHVMeXBjYmlCeVpYUjFjbTV6SUdFZ1puVnVZM1JwYjI0Z1ptOXlJR1pwYkhSbGNtbHVaeUJvWldGa0lHTm9hV3hrSUdWc1pXMWxiblJ6WEc0Z2QyaHBZMmdnYzJodmRXeGtiaWQwSUdKbElHUjFjR3hwWTJGMFpXUXNJR3hwYTJVZ1BIUnBkR3hsTHo1Y2JpQkJiSE52SUdGa1pITWdjM1Z3Y0c5eWRDQm1iM0lnWkdWa2RYQnNhV05oZEdWa0lHQnJaWGxnSUhCeWIzQmxjblJwWlhOY2Jpb3ZJR1oxYm1OMGFXOXVJSFZ1YVhGMVpTZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCclpYbHpJRDBnYm1WM0lGTmxkQ2dwTzF4dUlDQWdJR052Ym5OMElIUmhaM01nUFNCdVpYY2dVMlYwS0NrN1hHNGdJQ0FnWTI5dWMzUWdiV1YwWVZSNWNHVnpJRDBnYm1WM0lGTmxkQ2dwTzF4dUlDQWdJR052Ym5OMElHMWxkR0ZEWVhSbFoyOXlhV1Z6SUQwZ2UzMDdYRzRnSUNBZ2NtVjBkWEp1SUNob0tUMCtlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FYTlZibWx4ZFdVZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCc1pYUWdhR0Z6UzJWNUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hvTG10bGVTQW1KaUIwZVhCbGIyWWdhQzVyWlhrZ0lUMDlJQ2R1ZFcxaVpYSW5JQ1ltSUdndWEyVjVMbWx1WkdWNFQyWW9KeVFuS1NBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhjMHRsZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYa2dQU0JvTG10bGVTNXpiR2xqWlNob0xtdGxlUzVwYm1SbGVFOW1LQ2NrSnlrZ0t5QXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hyWlhsekxtaGhjeWhyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5WYm1seGRXVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNWN5NWhaR1FvYTJWNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdaR1ZtWVhWc2RDMWpZWE5sWEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ2hvTG5SNWNHVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuZEdsMGJHVW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWW1GelpTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSaFozTXVhR0Z6S0dndWRIbHdaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5WYm1seGRXVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVdkekxtRmtaQ2hvTG5SNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMjFsZEdFbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREFzSUd4bGJpQTlJRTFGVkVGVVdWQkZVeTVzWlc1bmRHZzdJR2tnUENCc1pXNDdJR2tyS3lsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMWxkR0YwZVhCbElEMGdUVVZVUVZSWlVFVlRXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdndWNISnZjSE11YUdGelQzZHVVSEp2Y0dWeWRIa29iV1YwWVhSNWNHVXBLU0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFsZEdGMGVYQmxJRDA5UFNBblkyaGhjbE5sZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WlhSaFZIbHdaWE11YUdGektHMWxkR0YwZVhCbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselZXNXBjWFZsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGRHRlVlWEJsY3k1aFpHUW9iV1YwWVhSNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZMkYwWldkdmNua2dQU0JvTG5CeWIzQnpXMjFsZEdGMGVYQmxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHTmhkR1ZuYjNKcFpYTWdQU0J0WlhSaFEyRjBaV2R2Y21sbGMxdHRaWFJoZEhsd1pWMGdmSHdnYm1WM0lGTmxkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDaHRaWFJoZEhsd1pTQWhQVDBnSjI1aGJXVW5JSHg4SUNGb1lYTkxaWGtwSUNZbUlHTmhkR1ZuYjNKcFpYTXVhR0Z6S0dOaGRHVm5iM0o1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6Vlc1cGNYVmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oZEdWbmIzSnBaWE11WVdSa0tHTmhkR1ZuYjNKNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhSaFEyRjBaV2R2Y21sbGMxdHRaWFJoZEhsd1pWMGdQU0JqWVhSbFoyOXlhV1Z6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBjMVZ1YVhGMVpUdGNiaUFnSUNCOU8xeHVmVnh1THlvcVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUdobFlXUkZiR1Z0Wlc1MGN5Qk1hWE4wSUc5bUlHMTFiSFJwY0d4bElEeElaV0ZrUGlCcGJuTjBZVzVqWlhOY2JpQXFMeUJtZFc1amRHbHZiaUJ5WldSMVkyVkRiMjF3YjI1bGJuUnpLR2hsWVdSRmJHVnRaVzUwY3l3Z2NISnZjSE1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdhR1ZoWkVWc1pXMWxiblJ6TG5KbFpIVmpaU2dvYkdsemRDd2dhR1ZoWkVWc1pXMWxiblFwUFQ1N1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdobFlXUkZiR1Z0Wlc1MFEyaHBiR1J5Wlc0Z1BTQmZjbVZoWTNRdVpHVm1ZWFZzZEM1RGFHbHNaSEpsYmk1MGIwRnljbUY1S0dobFlXUkZiR1Z0Wlc1MExuQnliM0J6TG1Ob2FXeGtjbVZ1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4cGMzUXVZMjl1WTJGMEtHaGxZV1JGYkdWdFpXNTBRMmhwYkdSeVpXNHBPMXh1SUNBZ0lIMHNJRnRkS1M1eVpXUjFZMlVvYjI1c2VWSmxZV04wUld4bGJXVnVkQ3dnVzEwcExuSmxkbVZ5YzJVb0tTNWpiMjVqWVhRb1pHVm1ZWFZzZEVobFlXUW9jSEp2Y0hNdWFXNUJiWEJOYjJSbEtTa3VabWxzZEdWeUtIVnVhWEYxWlNncEtTNXlaWFpsY25ObEtDa3ViV0Z3S0NoakxDQnBLVDArZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhrZ1BTQmpMbXRsZVNCOGZDQnBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNka1pYWmxiRzl3YldWdWRDY2dKaVlnY0hKdlkyVnpjeTVsYm5ZdVgxOU9SVmhVWDA5UVZFbE5TVnBGWDBaUFRsUlRJQ1ltSUNGd2NtOXdjeTVwYmtGdGNFMXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoakxuUjVjR1VnUFQwOUlDZHNhVzVySnlBbUppQmpMbkJ5YjNCeld5ZG9jbVZtSjEwZ0ppWWdMeThnVkU5RVR5aHdjbUYwWldWclltaEFLVG9nVW1Wd2JHRmpaU0IwYUdseklIZHBkR2dnWTI5dWMzUWdabkp2YlNCZ1kyOXVjM1JoYm5SellDQjNhR1Z1SUhSb1pTQjBjbVZsSUhOb1lXdHBibWNnZDI5eWEzTXVYRzRnSUNBZ0lDQWdJQ0FnSUNCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oyaDBkSEJ6T2k4dlptOXVkSE11WjI5dloyeGxZWEJwY3k1amIyMHZZM056Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmFIUjBjSE02THk5MWMyVXVkSGx3Wld0cGRDNXVaWFF2SjF4dUlDQWdJQ0FnSUNBZ0lDQWdYUzV6YjIxbEtDaDFjbXdwUFQ1akxuQnliM0J6V3lkb2NtVm1KMTB1YzNSaGNuUnpWMmwwYUNoMWNtd3BYRzRnSUNBZ0lDQWdJQ0FnSUNBcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JtVjNVSEp2Y0hNZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM0dUxtTXVjSEp2Y0hNZ2ZId2dlMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGQxQnliM0J6V3lka1lYUmhMV2h5WldZblhTQTlJRzVsZDFCeWIzQnpXeWRvY21WbUoxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzVUhKdmNITmJKMmh5WldZblhTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQlpHUWdkR2hwY3lCaGRIUnlhV0oxZEdVZ2RHOGdiV0ZyWlNCcGRDQmxZWE41SUhSdklHbGtaVzUwYVdaNUlHOXdkR2x0YVhwbFpDQjBZV2R6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1VISnZjSE5iSjJSaGRHRXRiM0IwYVcxcGVtVmtMV1p2Ym5SekoxMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlndktpTmZYMUJWVWtWZlh5b3ZJRjl5WldGamRDNWtaV1poZFd4MExtTnNiMjVsUld4bGJXVnVkQ2hqTENCdVpYZFFjbTl3Y3lrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBOVBUMGdKMlJsZG1Wc2IzQnRaVzUwSnlBbUppQndjbTlqWlhOekxtVnVkaTVmWDA1RldGUmZVa1ZCUTFSZlVrOVBWQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYjIxcGRDQktVMDlPTFV4RUlITjBjblZqZEhWeVpXUWdaR0YwWVNCemJtbHdjR1YwY3lCbWNtOXRJSFJvWlNCM1lYSnVhVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWXk1MGVYQmxJRDA5UFNBbmMyTnlhWEIwSnlBbUppQmpMbkJ5YjNCeld5ZDBlWEJsSjEwZ0lUMDlJQ2RoY0hCc2FXTmhkR2x2Ymk5c1pDdHFjMjl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOeVkwMWxjM05oWjJVZ1BTQmpMbkJ5YjNCeld5ZHpjbU1uWFNBL0lHQThjMk55YVhCMFBpQjBZV2NnZDJsMGFDQnpjbU05WENJa2UyTXVjSEp2Y0hOYkozTnlZeWRkZlZ3aVlDQTZJR0JwYm14cGJtVWdQSE5qY21sd2RENWdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2d3TENCZmRYUnBiSE1wTG5kaGNtNVBibU5sS0dCRWJ5QnViM1FnWVdSa0lEeHpZM0pwY0hRK0lIUmhaM01nZFhOcGJtY2dibVY0ZEM5b1pXRmtJQ2h6WldVZ0pIdHpjbU5OWlhOellXZGxmU2t1SUZWelpTQnVaWGgwTDNOamNtbHdkQ0JwYm5OMFpXRmtMaUJjWEc1VFpXVWdiVzl5WlNCcGJtWnZJR2hsY21VNklHaDBkSEJ6T2k4dmJtVjRkR3B6TG05eVp5OWtiMk56TDIxbGMzTmhaMlZ6TDI1dkxYTmpjbWx3ZEMxMFlXZHpMV2x1TFdobFlXUXRZMjl0Y0c5dVpXNTBZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR011ZEhsd1pTQTlQVDBnSjJ4cGJtc25JQ1ltSUdNdWNISnZjSE5iSjNKbGJDZGRJRDA5UFNBbmMzUjViR1Z6YUdWbGRDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvTUN3Z1gzVjBhV3h6S1M1M1lYSnVUMjVqWlNoZ1JHOGdibTkwSUdGa1pDQnpkSGxzWlhOb1pXVjBjeUIxYzJsdVp5QnVaWGgwTDJobFlXUWdLSE5sWlNBOGJHbHVheUJ5Wld3OVhDSnpkSGxzWlhOb1pXVjBYQ0krSUhSaFp5QjNhWFJvSUdoeVpXWTlYQ0lrZTJNdWNISnZjSE5iSjJoeVpXWW5YWDFjSWlrdUlGVnpaU0JFYjJOMWJXVnVkQ0JwYm5OMFpXRmtMaUJjWEc1VFpXVWdiVzl5WlNCcGJtWnZJR2hsY21VNklHaDBkSEJ6T2k4dmJtVjRkR3B6TG05eVp5OWtiMk56TDIxbGMzTmhaMlZ6TDI1dkxYTjBlV3hsYzJobFpYUnpMV2x1TFdobFlXUXRZMjl0Y0c5dVpXNTBZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVLQzhxSTE5ZlVGVlNSVjlmS2k4Z1gzSmxZV04wTG1SbFptRjFiSFF1WTJ4dmJtVkZiR1Z0Wlc1MEtHTXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVnh1SUNBZ0lDQWdJQ0I5S1NrN1hHNGdJQ0FnZlNrN1hHNTlYRzR2S2lwY2JpQXFJRlJvYVhNZ1kyOXRjRzl1Wlc1MElHbHVhbVZqZEhNZ1pXeGxiV1Z1ZEhNZ2RHOGdZRHhvWldGa1BtQWdiMllnZVc5MWNpQndZV2RsTGx4dUlDb2dWRzhnWVhadmFXUWdaSFZ3YkdsallYUmxaQ0JnZEdGbmMyQWdhVzRnWUR4b1pXRmtQbUFnZVc5MUlHTmhiaUIxYzJVZ2RHaGxJR0JyWlhsZ0lIQnliM0JsY25SNUxDQjNhR2xqYUNCM2FXeHNJRzFoYTJVZ2MzVnlaU0JsZG1WeWVTQjBZV2NnYVhNZ2IyNXNlU0J5Wlc1a1pYSmxaQ0J2Ym1ObExseHVJQ292SUdaMWJtTjBhVzl1SUVobFlXUW9leUJqYUdsc1pISmxiaUFnZlNrZ2UxeHVJQ0FnSUdOdmJuTjBJR0Z0Y0ZOMFlYUmxJRDBnS0RBc0lGOXlaV0ZqZENrdWRYTmxRMjl1ZEdWNGRDaGZZVzF3UTI5dWRHVjRkQzVCYlhCVGRHRjBaVU52Ym5SbGVIUXBPMXh1SUNBZ0lHTnZibk4wSUdobFlXUk5ZVzVoWjJWeUlEMGdLREFzSUY5eVpXRmpkQ2t1ZFhObFEyOXVkR1Y0ZENoZmFHVmhaRTFoYm1GblpYSkRiMjUwWlhoMExraGxZV1JOWVc1aFoyVnlRMjl1ZEdWNGRDazdYRzRnSUNBZ2NtVjBkWEp1S0M4cUkxOWZVRlZTUlY5ZktpOGdYM0psWVdOMExtUmxabUYxYkhRdVkzSmxZWFJsUld4bGJXVnVkQ2hmYzJsa1pVVm1abVZqZEM1a1pXWmhkV3gwTENCN1hHNGdJQ0FnSUNBZ0lISmxaSFZqWlVOdmJYQnZibVZ1ZEhOVWIxTjBZWFJsT2lCeVpXUjFZMlZEYjIxd2IyNWxiblJ6TEZ4dUlDQWdJQ0FnSUNCb1pXRmtUV0Z1WVdkbGNqb2dhR1ZoWkUxaGJtRm5aWElzWEc0Z0lDQWdJQ0FnSUdsdVFXMXdUVzlrWlRvZ0tEQXNJRjloYlhBcExtbHpTVzVCYlhCTmIyUmxLR0Z0Y0ZOMFlYUmxLVnh1SUNBZ0lIMHNJR05vYVd4a2NtVnVLU2s3WEc1OVhHNTJZWElnWDJSbFptRjFiSFFnUFNCSVpXRmtPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWDJSbFptRjFiSFE3WEc1Y2JtbG1JQ2gwZVhCbGIyWWdaWGh3YjNKMGN5NWtaV1poZFd4MElEMDlQU0FuWm5WdVkzUnBiMjRuSUh4OElDaDBlWEJsYjJZZ1pYaHdiM0owY3k1a1pXWmhkV3gwSUQwOVBTQW5iMkpxWldOMEp5QW1KaUJsZUhCdmNuUnpMbVJsWm1GMWJIUWdJVDA5SUc1MWJHd3BLU0I3WEc0Z0lFOWlhbVZqZEM1aGMzTnBaMjRvWlhod2IzSjBjeTVrWldaaGRXeDBMQ0JsZUhCdmNuUnpLVHRjYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbGVIQnZjblJ6TG1SbFptRjFiSFE3WEc1OVhHNWNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdobFlXUXVhbk11YldGd0lsMHNJbTVoYldWeklqcGJJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laWGh3YjNKMGN5SXNJblpoYkhWbElpd2laR1ZtWVhWc2RFaGxZV1FpTENKZmNtVmhZM1FpTENKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZYYVd4a1kyRnlaQ0lzSW5KbGNYVnBjbVVpTENKZmMybGtaVVZtWm1WamRDSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSmZZVzF3UTI5dWRHVjRkQ0lzSWw5b1pXRmtUV0Z1WVdkbGNrTnZiblJsZUhRaUxDSmZZVzF3SWl3aVgzVjBhV3h6SWl3aWIySnFJaXdpWDE5bGMwMXZaSFZzWlNJc0ltNWxkMDlpYWlJc0ltdGxlU0lzSW5CeWIzUnZkSGx3WlNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aVkyRnNiQ0lzSW1SbGMyTWlMQ0puWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSWlMQ0puWlhRaUxDSnpaWFFpTENKcGJrRnRjRTF2WkdVaUxDSm9aV0ZrSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW1Ob1lYSlRaWFFpTENKd2RYTm9JaXdpYm1GdFpTSXNJbU52Ym5SbGJuUWlMQ0p2Ym14NVVtVmhZM1JGYkdWdFpXNTBJaXdpYkdsemRDSXNJbU5vYVd4a0lpd2lkSGx3WlNJc0lrWnlZV2R0Wlc1MElpd2lZMjl1WTJGMElpd2lRMmhwYkdSeVpXNGlMQ0owYjBGeWNtRjVJaXdpY0hKdmNITWlMQ0pqYUdsc1pISmxiaUlzSW5KbFpIVmpaU0lzSW1aeVlXZHRaVzUwVEdsemRDSXNJbVp5WVdkdFpXNTBRMmhwYkdRaUxDSk5SVlJCVkZsUVJWTWlMQ0oxYm1seGRXVWlMQ0pyWlhseklpd2lVMlYwSWl3aWRHRm5jeUlzSW0xbGRHRlVlWEJsY3lJc0ltMWxkR0ZEWVhSbFoyOXlhV1Z6SWl3aWFDSXNJbWx6Vlc1cGNYVmxJaXdpYUdGelMyVjVJaXdpYVc1a1pYaFBaaUlzSW5Oc2FXTmxJaXdpYUdGeklpd2lZV1JrSWl3aWFTSXNJbXhsYmlJc0lteGxibWQwYUNJc0ltMWxkR0YwZVhCbElpd2lZMkYwWldkdmNua2lMQ0pqWVhSbFoyOXlhV1Z6SWl3aWNtVmtkV05sUTI5dGNHOXVaVzUwY3lJc0ltaGxZV1JGYkdWdFpXNTBjeUlzSW1obFlXUkZiR1Z0Wlc1MElpd2lhR1ZoWkVWc1pXMWxiblJEYUdsc1pISmxiaUlzSW5KbGRtVnljMlVpTENKbWFXeDBaWElpTENKdFlYQWlMQ0pqSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWw5ZlRrVllWRjlQVUZSSlRVbGFSVjlHVDA1VVV5SXNJbk52YldVaUxDSjFjbXdpTENKemRHRnlkSE5YYVhSb0lpd2libVYzVUhKdmNITWlMQ0oxYm1SbFptbHVaV1FpTENKamJHOXVaVVZzWlcxbGJuUWlMQ0pmWDA1RldGUmZVa1ZCUTFSZlVrOVBWQ0lzSW5OeVkwMWxjM05oWjJVaUxDSjNZWEp1VDI1alpTSXNJa2hsWVdRaUxDSmhiWEJUZEdGMFpTSXNJblZ6WlVOdmJuUmxlSFFpTENKQmJYQlRkR0YwWlVOdmJuUmxlSFFpTENKb1pXRmtUV0Z1WVdkbGNpSXNJa2hsWVdSTllXNWhaMlZ5UTI5dWRHVjRkQ0lzSW5KbFpIVmpaVU52YlhCdmJtVnVkSE5VYjFOMFlYUmxJaXdpYVhOSmJrRnRjRTF2WkdVaUxDSmZaR1ZtWVhWc2RDSXNJbUZ6YzJsbmJpSXNJbTF2WkhWc1pTSmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaGVhZC5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvc2lkZS1lZmZlY3QuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvc2lkZS1lZmZlY3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIlxcblxcbnZhciBfdG9Db25zdW1hYmxlQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheSAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanNcXFwiKTtcXG5cXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXFxcIik7XFxuXFxudmFyIF9jcmVhdGVDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1xcXCIpO1xcblxcbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcXFwiKTtcXG5cXG52YXIgX2luaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzXFxcIik7XFxuXFxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1xcXCIpO1xcblxcbnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZiAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanNcXFwiKTtcXG5cXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXFxcInVuZGVmaW5lZFxcXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFxcXCJmdW5jdGlvblxcXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFxcXCJfX2VzTW9kdWxlXFxcIiwgKHtcXG4gIHZhbHVlOiB0cnVlXFxufSkpO1xcbmV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9IHZvaWQgMDtcXG5cXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzXFxcIikpO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xcbiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xcbiAgICByZXR1cm4gb2JqO1xcbiAgfSBlbHNlIHtcXG4gICAgdmFyIG5ld09iaiA9IHt9O1xcblxcbiAgICBpZiAob2JqICE9IG51bGwpIHtcXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XFxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xcbiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTtcXG5cXG4gICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XFxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIG5ld09ialtcXFwiZGVmYXVsdFxcXCJdID0gb2JqO1xcbiAgICByZXR1cm4gbmV3T2JqO1xcbiAgfVxcbn1cXG5cXG52YXIgaXNTZXJ2ZXIgPSBmYWxzZTtcXG5cXG52YXIgX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfcmVhY3QkQ29tcG9uZW50KSB7XFxuICBfaW5oZXJpdHMoX2NsYXNzLCBfcmVhY3QkQ29tcG9uZW50KTtcXG5cXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoX2NsYXNzKTtcXG5cXG4gIGZ1bmN0aW9uIF9jbGFzcyhwcm9wcykge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfY2xhc3MpO1xcblxcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcXG5cXG4gICAgX3RoaXMuZW1pdENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICBpZiAoX3RoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XFxuICAgICAgICBfdGhpcy5wcm9wcy5oZWFkTWFuYWdlci51cGRhdGVIZWFkKF90aGlzLnByb3BzLnJlZHVjZUNvbXBvbmVudHNUb1N0YXRlKF90b0NvbnN1bWFibGVBcnJheShfdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzKSwgX3RoaXMucHJvcHMpKTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIF90aGlzLl9oYXNIZWFkTWFuYWdlciA9IF90aGlzLnByb3BzLmhlYWRNYW5hZ2VyICYmIF90aGlzLnByb3BzLmhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXM7XFxuXFxuICAgIGlmIChpc1NlcnZlciAmJiBfdGhpcy5faGFzSGVhZE1hbmFnZXIpIHtcXG4gICAgICBfdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzLmFkZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgICAgX3RoaXMuZW1pdENoYW5nZSgpO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBfdGhpcztcXG4gIH1cXG5cXG4gIF9jcmVhdGVDbGFzcyhfY2xhc3MsIFt7XFxuICAgIGtleTogXFxcImNvbXBvbmVudERpZE1vdW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xcbiAgICAgIGlmICh0aGlzLl9oYXNIZWFkTWFuYWdlcikge1xcbiAgICAgICAgdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzLmFkZCh0aGlzKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5lbWl0Q2hhbmdlKCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiY29tcG9uZW50RGlkVXBkYXRlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcXG4gICAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJjb21wb25lbnRXaWxsVW5tb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcXG4gICAgICBpZiAodGhpcy5faGFzSGVhZE1hbmFnZXIpIHtcXG4gICAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlc1tcXFwiZGVsZXRlXFxcIl0odGhpcyk7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInJlbmRlclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XFxuICAgICAgcmV0dXJuIG51bGw7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBfY2xhc3M7XFxufShfcmVhY3QuQ29tcG9uZW50KTtcXG5cXG5leHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0gPSBfY2xhc3M7XFxuXFxuO1xcbiAgICAvLyBXcmFwcGVkIGluIGFuIElJRkUgdG8gYXZvaWQgcG9sbHV0aW5nIHRoZSBnbG9iYWwgc2NvcGVcXG4gICAgO1xcbiAgICAoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIF9hLCBfYjtcXG4gICAgICAgIC8vIExlZ2FjeSBDU1MgaW1wbGVtZW50YXRpb25zIHdpbGwgYGV2YWxgIGJyb3dzZXIgY29kZSBpbiBhIE5vZGUuanMgY29udGV4dFxcbiAgICAgICAgLy8gdG8gZXh0cmFjdCBDU1MuIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgbmVlZCB0byBjaGVjayB3ZSdyZSBpbiBhXFxuICAgICAgICAvLyBicm93c2VyIGNvbnRleHQgYmVmb3JlIGNvbnRpbnVpbmcuXFxuICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmXFxuICAgICAgICAgICAgLy8gQU1QIC8gTm8tSlMgbW9kZSBkb2VzIG5vdCBpbmplY3QgdGhlc2UgaGVscGVyczpcXG4gICAgICAgICAgICAnJFJlZnJlc2hIZWxwZXJzJCcgaW4gc2VsZikge1xcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxcbiAgICAgICAgICAgIHZhciBjdXJyZW50RXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxcbiAgICAgICAgICAgIHZhciBwcmV2RXhwb3J0cyA9IChfYiA9IChfYSA9IG1vZHVsZS5ob3QuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByZXZFeHBvcnRzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xcbiAgICAgICAgICAgIC8vIFRoaXMgY2Fubm90IGhhcHBlbiBpbiBNYWluVGVtcGxhdGUgYmVjYXVzZSB0aGUgZXhwb3J0cyBtaXNtYXRjaCBiZXR3ZWVuXFxuICAgICAgICAgICAgLy8gdGVtcGxhdGluZyBhbmQgZXhlY3V0aW9uLlxcbiAgICAgICAgICAgIHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5yZWdpc3RlckV4cG9ydHNGb3JSZWFjdFJlZnJlc2goY3VycmVudEV4cG9ydHMsIG1vZHVsZS5pZCk7XFxuICAgICAgICAgICAgLy8gQSBtb2R1bGUgY2FuIGJlIGFjY2VwdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gaXRzIGV4cG9ydHMsIGUuZy4gd2hlblxcbiAgICAgICAgICAgIC8vIGl0IGlzIGEgUmVmcmVzaCBCb3VuZGFyeS5cXG4gICAgICAgICAgICBpZiAoc2VsZi4kUmVmcmVzaEhlbHBlcnMkLmlzUmVhY3RSZWZyZXNoQm91bmRhcnkoY3VycmVudEV4cG9ydHMpKSB7XFxuICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIHByZXZpb3VzIGV4cG9ydHMgb24gdXBkYXRlIHNvIHdlIGNhbiBjb21wYXJlIHRoZSBib3VuZGFyeVxcbiAgICAgICAgICAgICAgICAvLyBzaWduYXR1cmVzLlxcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJldkV4cG9ydHMgPSBjdXJyZW50RXhwb3J0cztcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIC8vIFVuY29uZGl0aW9uYWxseSBhY2NlcHQgYW4gdXBkYXRlIHRvIHRoaXMgbW9kdWxlLCB3ZSdsbCBjaGVjayBpZiBpdCdzXFxuICAgICAgICAgICAgICAgIC8vIHN0aWxsIGEgUmVmcmVzaCBCb3VuZGFyeSBsYXRlci5cXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBpbXBvcnRNZXRhIGlzIHJlcGxhY2VkIGluIHRoZSBsb2FkZXJcXG4gICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5hY2NlcHQoKTtcXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmaWVsZCBpcyBzZXQgd2hlbiB0aGUgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGlzIG1vZHVsZSB3YXMgYVxcbiAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIEJvdW5kYXJ5LCBsZXR0aW5nIHVzIGtub3cgd2UgbmVlZCB0byBjaGVjayBmb3IgaW52YWxpZGF0aW9uIG9yXFxuICAgICAgICAgICAgICAgIC8vIGVucXVldWUgYW4gdXBkYXRlLlxcbiAgICAgICAgICAgICAgICBpZiAocHJldkV4cG9ydHMgIT09IG51bGwpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYm91bmRhcnkgY2FuIGJlY29tZSBpbmVsaWdpYmxlIGlmIGl0cyBleHBvcnRzIGFyZSBpbmNvbXBhdGlibGVcXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpdGggdGhlIHByZXZpb3VzIGV4cG9ydHMuXFxuICAgICAgICAgICAgICAgICAgICAvL1xcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHlvdSBhZGQvcmVtb3ZlL2NoYW5nZSBleHBvcnRzLCB3ZSdsbCB3YW50IHRvXFxuICAgICAgICAgICAgICAgICAgICAvLyByZS1leGVjdXRlIHRoZSBpbXBvcnRpbmcgbW9kdWxlcywgYW5kIGZvcmNlIHRob3NlIGNvbXBvbmVudHMgdG9cXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlci4gU2ltaWxhcmx5LCBpZiB5b3UgY29udmVydCBhIGNsYXNzIGNvbXBvbmVudCB0byBhXFxuICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiwgd2Ugd2FudCB0byBpbnZhbGlkYXRlIHRoZSBib3VuZGFyeS5cXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuc2hvdWxkSW52YWxpZGF0ZVJlYWN0UmVmcmVzaEJvdW5kYXJ5KHByZXZFeHBvcnRzLCBjdXJyZW50RXhwb3J0cykpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zY2hlZHVsZVVwZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBqdXN0IGV4ZWN1dGVkIHRoZSBjb2RlIGZvciB0aGUgbW9kdWxlLCBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlXFxuICAgICAgICAgICAgICAgIC8vIG5ldyBleHBvcnRzIG1hZGUgaXQgaW5lbGlnaWJsZSBmb3IgYmVpbmcgYSBib3VuZGFyeS5cXG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSBjYXJlIGFib3V0IHRoZSBjYXNlIHdoZW4gd2Ugd2VyZSBfcHJldmlvdXNseV8gYSBib3VuZGFyeSxcXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBhbHJlYWR5IGFjY2VwdGVkIHRoaXMgdXBkYXRlIChhY2NpZGVudGFsIHNpZGUgZWZmZWN0KS5cXG4gICAgICAgICAgICAgICAgdmFyIGlzTm9Mb25nZXJBQm91bmRhcnkgPSBwcmV2RXhwb3J0cyAhPT0gbnVsbDtcXG4gICAgICAgICAgICAgICAgaWYgKGlzTm9Mb25nZXJBQm91bmRhcnkpIHtcXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9KSgpO1xcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXViMlJsWDIxdlpIVnNaWE12Ym1WNGRDOWthWE4wTDNOb1lYSmxaQzlzYVdJdmMybGtaUzFsWm1abFkzUXVhbk11YW5NaUxDSnRZWEJ3YVc1bmN5STZJa0ZCUVdFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJRMkpCTERoRFFVRTJRenRCUVVONlEwY3NSVUZCUVVFc1MwRkJTeXhGUVVGRk8wRkJSR3RETEVOQlFUZERPMEZCUjBGRUxHdENRVUZCTEVkQlFXdENMRXRCUVVzc1EwRkJka0k3TzBGQlEwRXNTVUZCU1VVc1RVRkJUU3hIUVVGSFF5eDFRa0ZCZFVJc1EwRkJRME1zYlVKQlFVOHNRMEZCUXl3MFEwRkJSQ3hEUVVGU0xFTkJRWEJET3p0QlFVTkJMRk5CUVZORUxIVkNRVUZVTEVOQlFXbERSU3hIUVVGcVF5eEZRVUZ6UXp0QlFVTnNReXhOUVVGSlFTeEhRVUZITEVsQlFVbEJMRWRCUVVjc1EwRkJRME1zVlVGQlppeEZRVUV5UWp0QlFVTjJRaXhYUVVGUFJDeEhRVUZRTzBGQlEwZ3NSMEZHUkN4TlFVVlBPMEZCUTBnc1VVRkJTVVVzVFVGQlRTeEhRVUZITEVWQlFXSTdPMEZCUTBFc1VVRkJTVVlzUjBGQlJ5eEpRVUZKTEVsQlFWZ3NSVUZCYVVJN1FVRkRZaXhYUVVGSkxFbEJRVWxITEVkQlFWSXNTVUZCWlVnc1IwRkJaaXhGUVVGdFFqdEJRVU5tTEZsQlFVbFFMRTFCUVUwc1EwRkJRMWNzVTBGQlVDeERRVUZwUWtNc1kwRkJha0lzUTBGQlowTkRMRWxCUVdoRExFTkJRWEZEVGl4SFFVRnlReXhGUVVFd1EwY3NSMEZCTVVNc1EwRkJTaXhGUVVGdlJEdEJRVU5vUkN4alFVRkpTU3hKUVVGSkxFZEJRVWRrTEUxQlFVMHNRMEZCUTBNc1kwRkJVQ3hKUVVGNVFrUXNUVUZCVFN4RFFVRkRaU3gzUWtGQmFFTXNSMEZCTWtSbUxFMUJRVTBzUTBGQlEyVXNkMEpCUVZBc1EwRkJaME5TTEVkQlFXaERMRVZCUVhGRFJ5eEhRVUZ5UXl4RFFVRXpSQ3hIUVVGMVJ5eEZRVUZzU0RzN1FVRkRRU3hqUVVGSlNTeEpRVUZKTEVOQlFVTkZMRWRCUVV3c1NVRkJXVVlzU1VGQlNTeERRVUZEUnl4SFFVRnlRaXhGUVVFd1FqdEJRVU4wUW1wQ0xGbEJRVUZCTEUxQlFVMHNRMEZCUTBNc1kwRkJVQ3hEUVVGelFsRXNUVUZCZEVJc1JVRkJPRUpETEVkQlFUbENMRVZCUVcxRFNTeEpRVUZ1UXp0QlFVTklMRmRCUmtRc1RVRkZUenRCUVVOSVRDeFpRVUZCUVN4TlFVRk5MRU5CUVVORExFZEJRVVFzUTBGQlRpeEhRVUZqU0N4SFFVRkhMRU5CUVVOSExFZEJRVVFzUTBGQmFrSTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTanM3UVVGRFJFUXNTVUZCUVVFc1RVRkJUU3hYUVVGT0xFZEJRV2xDUml4SFFVRnFRanRCUVVOQkxGZEJRVTlGTEUxQlFWQTdRVUZEU0R0QlFVTktPenRCUVVORUxFbEJRVTFUTEZGQlFWRXNVVUZCWkRzN1NVRkRUVU1zVFRzN096czdRVUZEUml4clFrRkJXVU1zUzBGQldpeEZRVUZyUWp0QlFVRkJPenRCUVVGQk96dEJRVU5rTERoQ1FVRk5RU3hMUVVGT096dEJRVU5CTEZWQlFVdERMRlZCUVV3c1IwRkJhMElzV1VGQlNUdEJRVU5zUWl4VlFVRkpMRTFCUVV0RExHVkJRVlFzUlVGQk1FSTdRVUZEZEVJc1kwRkJTMFlzUzBGQlRDeERRVUZYUnl4WFFVRllMRU5CUVhWQ1F5eFZRVUYyUWl4RFFVRnJReXhOUVVGTFNpeExRVUZNTEVOQlFWZExMSFZDUVVGWUxHOUNRVU16UWl4TlFVRkxUQ3hMUVVGTUxFTkJRVmRITEZkQlFWZ3NRMEZCZFVKSExHZENRVVJKTEVkQlJTOUNMRTFCUVV0T0xFdEJSakJDTEVOQlFXeERPMEZCUjBnN1FVRkRTaXhMUVU1RU96dEJRVTlCTEZWQlFVdEZMR1ZCUVV3c1IwRkJkVUlzVFVGQlMwWXNTMEZCVEN4RFFVRlhSeXhYUVVGWUxFbEJRVEJDTEUxQlFVdElMRXRCUVV3c1EwRkJWMGNzVjBGQldDeERRVUYxUWtjc1owSkJRWGhGT3p0QlFVTkJMRkZCUVVsU0xGRkJRVkVzU1VGQlNTeE5RVUZMU1N4bFFVRnlRaXhGUVVGelF6dEJRVU5zUXl4WlFVRkxSaXhMUVVGTUxFTkJRVmRITEZkQlFWZ3NRMEZCZFVKSExHZENRVUYyUWl4RFFVRjNRME1zUjBGQmVFTTdPMEZCUTBFc1dVRkJTMDRzVlVGQlREdEJRVU5JT3p0QlFXSmhPMEZCWTJwQ096czdPMWRCUTBRc05rSkJRVzlDTzBGQlEyaENMRlZCUVVrc1MwRkJTME1zWlVGQlZDeEZRVUV3UWp0QlFVTjBRaXhoUVVGTFJpeExRVUZNTEVOQlFWZEhMRmRCUVZnc1EwRkJkVUpITEdkQ1FVRjJRaXhEUVVGM1EwTXNSMEZCZUVNc1EwRkJORU1zU1VGQk5VTTdRVUZEU0RzN1FVRkRSQ3hYUVVGTFRpeFZRVUZNTzBGQlEwZzdPenRYUVVORUxEaENRVUZ4UWp0QlFVTnFRaXhYUVVGTFFTeFZRVUZNTzBGQlEwZzdPenRYUVVORUxHZERRVUYxUWp0QlFVTnVRaXhWUVVGSkxFdEJRVXRETEdWQlFWUXNSVUZCTUVJN1FVRkRkRUlzWVVGQlMwWXNTMEZCVEN4RFFVRlhSeXhYUVVGWUxFTkJRWFZDUnl4blFrRkJka0lzVjBGQkswTXNTVUZCTDBNN1FVRkRTRHM3UVVGRFJDeFhRVUZMVEN4VlFVRk1PMEZCUTBnN096dFhRVU5FTEd0Q1FVRlRPMEZCUTB3c1lVRkJUeXhKUVVGUU8wRkJRMGc3T3pzN1JVRnFRMmRDYWtJc1RVRkJUU3hEUVVGRGQwSXNVenM3UVVGdFF6VkNNVUlzYTBKQlFVRXNSMEZCYTBKcFFpeE5RVUZzUWlJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMTlPWDBVdkxpOXViMlJsWDIxdlpIVnNaWE12Ym1WNGRDOWthWE4wTDNOb1lYSmxaQzlzYVdJdmMybGtaUzFsWm1abFkzUXVhbk0vTkRBNFl5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJSFp2YVdRZ01EdGNiblpoY2lCZmNtVmhZM1FnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZYYVd4a1kyRnlaQ2h5WlhGMWFYSmxLRndpY21WaFkzUmNJaWtwTzF4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsVjJsc1pHTmhjbVFvYjJKcUtTQjdYRzRnSUNBZ2FXWWdLRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2IySnFPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkUFltb2dQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzlpYWlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJR3RsZVNCcGJpQnZZbW9wZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxTENCclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrWlhOaklEMGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1SUNZbUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lnUHlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRzlpYWl3Z2EyVjVLU0E2SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHVnpZeTVuWlhRZ2ZId2daR1Z6WXk1elpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodVpYZFBZbW9zSUd0bGVTd2daR1Z6WXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGRQWW1wYmEyVjVYU0E5SUc5aWFsdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzVsZDA5aWFpNWtaV1poZFd4MElEMGdiMkpxTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM1QySnFPMXh1SUNBZ0lIMWNibjFjYm1OdmJuTjBJR2x6VTJWeWRtVnlJRDBnZEhsd1pXOW1JSGRwYm1SdmR5QTlQVDBnSjNWdVpHVm1hVzVsWkNjN1hHNWpiR0Z6Y3lCZlkyeGhjM01nWlhoMFpXNWtjeUJmY21WaFkzUXVRMjl0Y0c5dVpXNTBJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh3Y205d2N5bDdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtIQnliM0J6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMFEyaGhibWRsSUQwZ0tDazlQbnRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOW9ZWE5JWldGa1RXRnVZV2RsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVhR1ZoWkUxaGJtRm5aWEl1ZFhCa1lYUmxTR1ZoWkNoMGFHbHpMbkJ5YjNCekxuSmxaSFZqWlVOdmJYQnZibVZ1ZEhOVWIxTjBZWFJsS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMaTR1ZEdocGN5NXdjbTl3Y3k1b1pXRmtUV0Z1WVdkbGNpNXRiM1Z1ZEdWa1NXNXpkR0Z1WTJWelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTd2dkR2hwY3k1d2NtOXdjeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlvWVhOSVpXRmtUV0Z1WVdkbGNpQTlJSFJvYVhNdWNISnZjSE11YUdWaFpFMWhibUZuWlhJZ0ppWWdkR2hwY3k1d2NtOXdjeTVvWldGa1RXRnVZV2RsY2k1dGIzVnVkR1ZrU1c1emRHRnVZMlZ6TzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5UWlhKMlpYSWdKaVlnZEdocGN5NWZhR0Z6U0dWaFpFMWhibUZuWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWFHVmhaRTFoYm1GblpYSXViVzkxYm5SbFpFbHVjM1JoYm1ObGN5NWhaR1FvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhSRGFHRnVaMlVvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyaGhjMGhsWVdSTllXNWhaMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1obFlXUk5ZVzVoWjJWeUxtMXZkVzUwWldSSmJuTjBZVzVqWlhNdVlXUmtLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRU5vWVc1blpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCamIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRU5vWVc1blpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCamIyMXdiMjVsYm5SWGFXeHNWVzV0YjNWdWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJoaGMwaGxZV1JOWVc1aFoyVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbWhsWVdSTllXNWhaMlZ5TG0xdmRXNTBaV1JKYm5OMFlXNWpaWE11WkdWc1pYUmxLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRU5vWVc1blpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibjFjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5amJHRnpjenRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzljMmxrWlMxbFptWmxZM1F1YW5NdWJXRndJbDBzSW01aGJXVnpJanBiSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlhod2IzSjBjeUlzSW5aaGJIVmxJaXdpWDNKbFlXTjBJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxWMmxzWkdOaGNtUWlMQ0p5WlhGMWFYSmxJaXdpYjJKcUlpd2lYMTlsYzAxdlpIVnNaU0lzSW01bGQwOWlhaUlzSW10bGVTSXNJbkJ5YjNSdmRIbHdaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWTJGc2JDSXNJbVJsYzJNaUxDSm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJaUxDSm5aWFFpTENKelpYUWlMQ0pwYzFObGNuWmxjaUlzSWw5amJHRnpjeUlzSW5CeWIzQnpJaXdpWlcxcGRFTm9ZVzVuWlNJc0lsOW9ZWE5JWldGa1RXRnVZV2RsY2lJc0ltaGxZV1JOWVc1aFoyVnlJaXdpZFhCa1lYUmxTR1ZoWkNJc0luSmxaSFZqWlVOdmJYQnZibVZ1ZEhOVWIxTjBZWFJsSWl3aWJXOTFiblJsWkVsdWMzUmhibU5sY3lJc0ltRmtaQ0lzSWtOdmJYQnZibVZ1ZENKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC5qc1xcblwiKTtcblxuLyoqKi8gfSlcblxufSxcbi8qKioqKiovIGZ1bmN0aW9uKF9fd2VicGFja19yZXF1aXJlX18pIHsgLy8gd2VicGFja1J1bnRpbWVNb2R1bGVzXG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4ZWNfXyA9IGZ1bmN0aW9uKG1vZHVsZUlkKSB7IHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IG1vZHVsZUlkKTsgfVxuLyoqKioqKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5PKDAsIFtcInBhZ2VzL19hcHBcIixcIm1haW5cIl0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gX193ZWJwYWNrX2V4ZWNfXyhcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1jbGllbnQtcGFnZXMtbG9hZGVyLmpzP2Fic29sdXRlUGFnZVBhdGg9bmV4dCUyRmRpc3QlMkZwYWdlcyUyRl9lcnJvciZwYWdlPSUyRl9lcnJvciFcIik7IH0pO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oKTtcbi8qKioqKiovIF9OX0UgPSBfX3dlYnBhY2tfZXhwb3J0c19fO1xuLyoqKioqKi8gfVxuXSk7Il0sIm1hcHBpbmdzIjoiNmhHQWVZO21IQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxDQUFDQSxJQUFJLENBQUMsa0JBQUQsQ0FBSixDQUEyQiw0QkFBQUEsSUFBSSxDQUFDLGtCQUFELENBQUosK0JBQTRCLEVBQTVCLENBQTVCLEVBQTREQyxJQUE1RCxDQUFpRSxDQUFDLENBQUMsY0FBRCxDQUFELENBQWtCLENBRW5GLEtBQU0sMklBQ047QUFDQTtBQUNBLG9KQUhNLENBSU4sS0FBTyxTQUFTQyxNQUFULENBQWlCQyx3QkFBakIsQ0FBMkNDLG1CQUEzQyxDQUFnRSxpREFFdkVDLElBQUksQ0FBQyw2OUNBQUQsQ0FBSixDQUVBLEtBQU8sQ0FWNEUsQ0FZbkYsS0FBTSwyQ0FDTjtBQUNBO0FBQ0Esb0RBSE0sQ0FJTixLQUFPLFNBQVNILE1BQVQsQ0FBaUJJLE9BQWpCLENBQTBCRixtQkFBMUIsQ0FBK0MsQ0FFdEQsYUFGc0QsZ0RBR3REQyxJQUFJLENBQUMsdWdsQkFBRCxDQUFKLENBRUEsS0FBTyxDQXJCNEUsQ0F1Qm5GLEtBQU0scURBQ047QUFDQTtBQUNBLDhEQUhNLENBSU4sS0FBTyxTQUFTSCxNQUFULENBQWlCSSxPQUFqQixDQUEwQkYsbUJBQTFCLENBQStDLENBRXRELGFBRnNELGdEQUd0REMsSUFBSSxDQUFDLG12TEFBRCxDQUFKLENBRUEsS0FBTyxDQWhDNEUsQ0FrQ25GLEtBQU0sNkNBQ047QUFDQTtBQUNBLHNEQUhNLENBSU4sS0FBTyxTQUFTSCxNQUFULENBQWlCSSxPQUFqQixDQUEwQkYsbUJBQTFCLENBQStDLENBRXRELGFBRnNELGdEQUd0REMsSUFBSSxDQUFDLDYwUEFBRCxDQUFKLENBRUEsS0FBTyxDQTNDNEUsQ0E2Q25GLEtBQU0sOENBQ047QUFDQTtBQUNBLHVEQUhNLENBSU4sS0FBTyxTQUFTSCxNQUFULENBQWlCSSxPQUFqQixDQUEwQkYsbUJBQTFCLENBQStDLENBRXRELGFBRnNELGdEQUd0REMsSUFBSSxDQUFDLHE4K0JBQUQsQ0FBSixDQUVBLEtBQU8sQ0F0RDRFLENBd0RuRixLQUFNLHFEQUNOO0FBQ0E7QUFDQSw4REFITSxDQUlOLEtBQU8sU0FBU0gsTUFBVCxDQUFpQkksT0FBakIsQ0FBMEJGLG1CQUExQixDQUErQyxDQUV0RCxhQUZzRCxnREFHdERDLElBQUksQ0FBQywwNWJBQUQsQ0FBSixDQUVBLEtBQU8sQ0FqRTRFLENBQWxCLENBb0VqRSxRQUFTLFNBQVNELG1CQUFULENBQThCLGlEQUFFO0FBQ3pDLFFBQVMsR0FBSUcsaUJBQWdCLENBQUcsU0FBU0MsUUFBVCxDQUFtQixpREFBRSxNQUFPSixvQkFBbUIsQ0FBQ0EsbUJBQW1CLENBQUNLLENBQXBCLENBQXdCRCxRQUF6QixDQUExQixDQUErRCxDQUEzRyxDQUNULFFBRnVDLHdCQUU5QkosbUJBQW1CLENBQUNNLENBQXBCLENBQXNCLENBQXRCLENBQXlCLENBQUMsWUFBRCxDQUFjLE1BQWQsQ0FBekIsQ0FBZ0QsVUFBVyxrREFBRSxNQUFPSCxpQkFBZ0IsQ0FBQywwSUFBRCxDQUF2QixDQUFzSyxDQUFuTyxFQUNULFFBQVMsR0FBSUksb0JBQW1CLDJCQUFHUCxtQkFBbUIsQ0FBQ00sQ0FBcEIsRUFBSCxDQUF2QixDQUNULFFBSnVDLHlCQUk5QkUsSUFBSSxDQUFHRCxtQkFBUCxDQUNULFFBQVUsQ0F6RXVELENBQWpFIn0=