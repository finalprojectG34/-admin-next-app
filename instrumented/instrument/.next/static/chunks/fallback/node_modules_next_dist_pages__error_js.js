"use strict";/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */function cov_1onu16fc4(){var path="C:\\Users\\nathn\\Desktop\\final project\\admin-next-app\\instrument\\.next\\static\\chunks\\fallback\\node_modules_next_dist_pages__error_js.js";var hash="1e972aae46ff2777dc0d688b14938fbdeae68c3b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\nathn\\Desktop\\final project\\admin-next-app\\instrument\\.next\\static\\chunks\\fallback\\node_modules_next_dist_pages__error_js.js",statementMap:{"0":{start:{line:8,column:38},end:{line:8,column:172}},"1":{start:{line:8,column:182},end:{line:8,column:224}},"2":{start:{line:8,column:236},end:{line:8,column:265}},"3":{start:{line:8,column:274},end:{line:8,column:288}},"4":{start:{line:8,column:306},end:{line:8,column:1949}},"5":{start:{line:8,column:1963},end:{line:8,column:1992}},"6":{start:{line:8,column:1993},end:{line:8,column:2070}},"7":{start:{line:8,column:2041},end:{line:8,column:2069}},"8":{start:{line:8,column:2089},end:{line:8,column:2103}},"9":{start:{line:9,column:0},end:{line:9,column:50}},"10":{start:{line:9,column:26},end:{line:9,column:48}},"11":{start:{line:9,column:51},end:{line:9,column:73}},"12":{start:{line:9,column:74},end:{line:9,column:91}},"13":{start:{line:9,column:91},end:{line:9,column:115}},"14":{start:{line:9,column:115},end:{line:19,column:14412}},"15":{start:{line:11,column:103},end:{line:11,column:127}},"16":{start:{line:11,column:127},end:{line:11,column:151}},"17":{start:{line:11,column:151},end:{line:11,column:19109}},"18":{start:{line:13,column:113},end:{line:13,column:137}},"19":{start:{line:13,column:137},end:{line:13,column:161}},"20":{start:{line:13,column:161},end:{line:13,column:6043}},"21":{start:{line:15,column:105},end:{line:15,column:129}},"22":{start:{line:15,column:129},end:{line:15,column:153}},"23":{start:{line:15,column:153},end:{line:15,column:8173}},"24":{start:{line:17,column:106},end:{line:17,column:130}},"25":{start:{line:17,column:130},end:{line:17,column:154}},"26":{start:{line:17,column:154},end:{line:17,column:32358}},"27":{start:{line:19,column:113},end:{line:19,column:137}},"28":{start:{line:19,column:137},end:{line:19,column:161}},"29":{start:{line:19,column:161},end:{line:19,column:14402}}},fnMap:{"0":{name:"cov_1kdxb2qmvx",decl:{start:{line:8,column:12},end:{line:8,column:26}},loc:{start:{line:8,column:28},end:{line:9,column:74}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:15},end:{line:9,column:16}},loc:{start:{line:9,column:25},end:{line:9,column:49}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:11,column:58},end:{line:11,column:59}},loc:{start:{line:11,column:102},end:{line:11,column:19115}},line:11},"3":{name:"(anonymous_3)",decl:{start:{line:13,column:68},end:{line:13,column:69}},loc:{start:{line:13,column:112},end:{line:13,column:6049}},line:13},"4":{name:"(anonymous_4)",decl:{start:{line:15,column:60},end:{line:15,column:61}},loc:{start:{line:15,column:104},end:{line:15,column:8179}},line:15},"5":{name:"(anonymous_5)",decl:{start:{line:17,column:61},end:{line:17,column:62}},loc:{start:{line:17,column:105},end:{line:17,column:32364}},line:17},"6":{name:"(anonymous_6)",decl:{start:{line:19,column:68},end:{line:19,column:69}},loc:{start:{line:19,column:112},end:{line:19,column:14408}},line:19}},branchMap:{"0":{loc:{start:{line:8,column:1963},end:{line:8,column:1992}},type:"binary-expr",locations:[{start:{line:8,column:1963},end:{line:8,column:1974}},{start:{line:8,column:1977},end:{line:8,column:1991}}],line:8},"1":{loc:{start:{line:8,column:1993},end:{line:8,column:2070}},type:"if",locations:[{start:{line:8,column:1993},end:{line:8,column:2070}},{start:{line:8,column:1993},end:{line:8,column:2070}}],line:8},"2":{loc:{start:{line:8,column:1996},end:{line:8,column:2039}},type:"binary-expr",locations:[{start:{line:8,column:1996},end:{line:8,column:2011}},{start:{line:8,column:2013},end:{line:8,column:2039}}],line:8},"3":{loc:{start:{line:9,column:141},end:{line:9,column:227}},type:"binary-expr",locations:[{start:{line:9,column:142},end:{line:9,column:193}},{start:{line:9,column:197},end:{line:9,column:226}}],line:9}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,names:["self","push","module","exports","__webpack_require__","eval"],sources:["node_modules_next_dist_pages__error_js.js"],sourcesContent:["\"use strict\";\n/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[\"node_modules_next_dist_pages__error_js\"],{\n\n/***/ \"./node_modules/next/dist/pages/_error.js\":\n/*!************************************************!*\\\n  !*** ./node_modules/next/dist/pages/_error.js ***!\n  \\************************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\n\\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\\\");\\n\\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\\\");\\n\\nvar _inherits = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js\\\");\\n\\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js\\\");\\n\\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js\\\");\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", ({\\n  value: true\\n}));\\nexports[\\\"default\\\"] = void 0;\\n\\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \\\"./node_modules/react/index.js\\\"));\\n\\nvar _head = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/head */ \\\"./node_modules/next/dist/shared/lib/head.js\\\"));\\n\\nfunction _interopRequireDefault(obj) {\\n  return obj && obj.__esModule ? obj : {\\n    \\\"default\\\": obj\\n  };\\n}\\n\\nvar statusCodes = {\\n  400: 'Bad Request',\\n  404: 'This page could not be found',\\n  405: 'Method Not Allowed',\\n  500: 'Internal Server Error'\\n};\\n\\nfunction _getInitialProps(_ref) {\\n  var res = _ref.res,\\n      err = _ref.err;\\n  var statusCode = res && res.statusCode ? res.statusCode : err ? err.statusCode : 404;\\n  return {\\n    statusCode: statusCode\\n  };\\n}\\n\\nvar Error = /*#__PURE__*/function (_react$default$Compon) {\\n  _inherits(Error, _react$default$Compon);\\n\\n  var _super = _createSuper(Error);\\n\\n  function Error() {\\n    _classCallCheck(this, Error);\\n\\n    return _super.apply(this, arguments);\\n  }\\n\\n  _createClass(Error, [{\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var statusCode = this.props.statusCode;\\n      var title = this.props.title || statusCodes[statusCode] || 'An unexpected error has occurred';\\n      return /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"div\\\", {\\n        style: styles.error\\n      }, /*#__PURE__*/_react[\\\"default\\\"].createElement(_head[\\\"default\\\"], null, /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"title\\\", null, statusCode ? \\\"\\\".concat(statusCode, \\\": \\\").concat(title) : 'Application error: a client-side exception has occurred')), /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"div\\\", null, /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"style\\\", {\\n        dangerouslySetInnerHTML: {\\n          __html: \\\"\\\\n                body { margin: 0; color: #000; background: #fff; }\\\\n                .next-error-h1 {\\\\n                  border-right: 1px solid rgba(0, 0, 0, .3);\\\\n                }\\\\n                @media (prefers-color-scheme: dark) {\\\\n                  body { color: #fff; background: #000; }\\\\n                  .next-error-h1 {\\\\n                    border-right: 1px solid rgba(255, 255, 255, .3);\\\\n                  }\\\\n                }\\\"\\n        }\\n      }), statusCode ? /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"h1\\\", {\\n        className: \\\"next-error-h1\\\",\\n        style: styles.h1\\n      }, statusCode) : null, /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"div\\\", {\\n        style: styles.desc\\n      }, /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"h2\\\", {\\n        style: styles.h2\\n      }, this.props.title || statusCode ? title : /*#__PURE__*/_react[\\\"default\\\"].createElement(_react[\\\"default\\\"].Fragment, null, \\\"Application error: a client-side exception has occurred (see the browser console for more information)\\\"), \\\".\\\"))));\\n    }\\n  }]);\\n\\n  return Error;\\n}(_react[\\\"default\\\"].Component);\\n\\nexports[\\\"default\\\"] = Error;\\nError.displayName = 'ErrorPage';\\nError.getInitialProps = _getInitialProps;\\nError.origGetInitialProps = _getInitialProps;\\nvar styles = {\\n  error: {\\n    fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, \\\"Segoe UI\\\", \\\"Fira Sans\\\", Avenir, \\\"Helvetica Neue\\\", \\\"Lucida Grande\\\", sans-serif',\\n    height: '100vh',\\n    textAlign: 'center',\\n    display: 'flex',\\n    flexDirection: 'column',\\n    alignItems: 'center',\\n    justifyContent: 'center'\\n  },\\n  desc: {\\n    display: 'inline-block',\\n    textAlign: 'left',\\n    lineHeight: '49px',\\n    height: '49px',\\n    verticalAlign: 'middle'\\n  },\\n  h1: {\\n    display: 'inline-block',\\n    margin: 0,\\n    marginRight: '20px',\\n    padding: '10px 23px 10px 0',\\n    fontSize: '24px',\\n    fontWeight: 500,\\n    verticalAlign: 'top'\\n  },\\n  h2: {\\n    fontSize: '14px',\\n    fontWeight: 'normal',\\n    lineHeight: 'inherit',\\n    margin: 0,\\n    padding: 0\\n  }\\n};\\n\\n;\\n    // Wrapped in an IIFE to avoid polluting the global scope\\n    ;\\n    (function () {\\n        var _a, _b;\\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\\n        // to extract CSS. For backwards compatibility, we need to check we're in a\\n        // browser context before continuing.\\n        if (typeof self !== 'undefined' &&\\n            // AMP / No-JS mode does not inject these helpers:\\n            '$RefreshHelpers$' in self) {\\n            // @ts-ignore __webpack_module__ is global\\n            var currentExports = module.exports;\\n            // @ts-ignore __webpack_module__ is global\\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\\n            // This cannot happen in MainTemplate because the exports mismatch between\\n            // templating and execution.\\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\\n            // A module can be accepted automatically based on its exports, e.g. when\\n            // it is a Refresh Boundary.\\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\\n                // Save the previous exports on update so we can compare the boundary\\n                // signatures.\\n                module.hot.dispose(function (data) {\\n                    data.prevExports = currentExports;\\n                });\\n                // Unconditionally accept an update to this module, we'll check if it's\\n                // still a Refresh Boundary later.\\n                // @ts-ignore importMeta is replaced in the loader\\n                module.hot.accept();\\n                // This field is set when the previous version of this module was a\\n                // Refresh Boundary, letting us know we need to check for invalidation or\\n                // enqueue an update.\\n                if (prevExports !== null) {\\n                    // A boundary can become ineligible if its exports are incompatible\\n                    // with the previous exports.\\n                    //\\n                    // For example, if you add/remove/change exports, we'll want to\\n                    // re-execute the importing modules, and force those components to\\n                    // re-render. Similarly, if you convert a class component to a\\n                    // function, we want to invalidate the boundary.\\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\\n                        module.hot.invalidate();\\n                    }\\n                    else {\\n                        self.$RefreshHelpers$.scheduleUpdate();\\n                    }\\n                }\\n            }\\n            else {\\n                // Since we just executed the code for the module, it's possible that the\\n                // new exports made it ineligible for being a boundary.\\n                // We only care about the case when we were _previously_ a boundary,\\n                // because we already accepted this update (accidental side effect).\\n                var isNoLongerABoundary = prevExports !== null;\\n                if (isNoLongerABoundary) {\\n                    module.hot.invalidate();\\n                }\\n            }\\n        }\\n    })();\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/pages/_error.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/next/dist/shared/lib/amp-context.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/next/dist/shared/lib/amp-context.js ***!\n  \\**********************************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", ({\\n  value: true\\n}));\\nexports.AmpStateContext = void 0;\\n\\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \\\"./node_modules/react/index.js\\\"));\\n\\nfunction _interopRequireDefault(obj) {\\n  return obj && obj.__esModule ? obj : {\\n    \\\"default\\\": obj\\n  };\\n}\\n\\nvar AmpStateContext = _react[\\\"default\\\"].createContext({});\\n\\nexports.AmpStateContext = AmpStateContext;\\n\\nif (true) {\\n  AmpStateContext.displayName = 'AmpStateContext';\\n}\\n\\n;\\n    // Wrapped in an IIFE to avoid polluting the global scope\\n    ;\\n    (function () {\\n        var _a, _b;\\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\\n        // to extract CSS. For backwards compatibility, we need to check we're in a\\n        // browser context before continuing.\\n        if (typeof self !== 'undefined' &&\\n            // AMP / No-JS mode does not inject these helpers:\\n            '$RefreshHelpers$' in self) {\\n            // @ts-ignore __webpack_module__ is global\\n            var currentExports = module.exports;\\n            // @ts-ignore __webpack_module__ is global\\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\\n            // This cannot happen in MainTemplate because the exports mismatch between\\n            // templating and execution.\\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\\n            // A module can be accepted automatically based on its exports, e.g. when\\n            // it is a Refresh Boundary.\\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\\n                // Save the previous exports on update so we can compare the boundary\\n                // signatures.\\n                module.hot.dispose(function (data) {\\n                    data.prevExports = currentExports;\\n                });\\n                // Unconditionally accept an update to this module, we'll check if it's\\n                // still a Refresh Boundary later.\\n                // @ts-ignore importMeta is replaced in the loader\\n                module.hot.accept();\\n                // This field is set when the previous version of this module was a\\n                // Refresh Boundary, letting us know we need to check for invalidation or\\n                // enqueue an update.\\n                if (prevExports !== null) {\\n                    // A boundary can become ineligible if its exports are incompatible\\n                    // with the previous exports.\\n                    //\\n                    // For example, if you add/remove/change exports, we'll want to\\n                    // re-execute the importing modules, and force those components to\\n                    // re-render. Similarly, if you convert a class component to a\\n                    // function, we want to invalidate the boundary.\\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\\n                        module.hot.invalidate();\\n                    }\\n                    else {\\n                        self.$RefreshHelpers$.scheduleUpdate();\\n                    }\\n                }\\n            }\\n            else {\\n                // Since we just executed the code for the module, it's possible that the\\n                // new exports made it ineligible for being a boundary.\\n                // We only care about the case when we were _previously_ a boundary,\\n                // because we already accepted this update (accidental side effect).\\n                var isNoLongerABoundary = prevExports !== null;\\n                if (isNoLongerABoundary) {\\n                    module.hot.invalidate();\\n                }\\n            }\\n        }\\n    })();\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELHVCQUFBLEdBQTBCLEtBQUssQ0FBL0I7O0FBQ0EsSUFBSUcsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DOztBQUNBLFNBQVNELHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQztBQUNqQyxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFDakMsZUFBU0E7QUFEd0IsR0FBckM7QUFHSDs7QUFDRCxJQUFNSixlQUFlLEdBQUdDLE1BQU0sV0FBTixDQUFlSyxhQUFmLENBQTZCLEVBQTdCLENBQXhCOztBQUNBUix1QkFBQSxHQUEwQkUsZUFBMUI7O0FBQ0EsSUFBSSxNQUF1QztBQUN2Q0EsRUFBQUEsZUFBZSxDQUFDTyxXQUFoQixHQUE4QixpQkFBOUI7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanM/ZTVhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQW1wU3RhdGVDb250ZXh0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmNvbnN0IEFtcFN0YXRlQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQoe30pO1xuZXhwb3J0cy5BbXBTdGF0ZUNvbnRleHQgPSBBbXBTdGF0ZUNvbnRleHQ7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIEFtcFN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdBbXBTdGF0ZUNvbnRleHQnO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbXAtY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBbXBTdGF0ZUNvbnRleHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjcmVhdGVDb250ZXh0IiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/amp-context.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/next/dist/shared/lib/amp.js\":\n/*!**************************************************!*\\\n  !*** ./node_modules/next/dist/shared/lib/amp.js ***!\n  \\**************************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\n\\nvar _s = $RefreshSig$();\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", ({\\n  value: true\\n}));\\nexports.isInAmpMode = isInAmpMode;\\nexports.useAmp = useAmp;\\n\\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \\\"./node_modules/react/index.js\\\"));\\n\\nvar _ampContext = __webpack_require__(/*! ./amp-context */ \\\"./node_modules/next/dist/shared/lib/amp-context.js\\\");\\n\\nfunction _interopRequireDefault(obj) {\\n  return obj && obj.__esModule ? obj : {\\n    \\\"default\\\": obj\\n  };\\n}\\n\\nfunction isInAmpMode() {\\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\\n      _ref$ampFirst = _ref.ampFirst,\\n      ampFirst = _ref$ampFirst === void 0 ? false : _ref$ampFirst,\\n      _ref$hybrid = _ref.hybrid,\\n      hybrid = _ref$hybrid === void 0 ? false : _ref$hybrid,\\n      _ref$hasQuery = _ref.hasQuery,\\n      hasQuery = _ref$hasQuery === void 0 ? false : _ref$hasQuery;\\n\\n  return ampFirst || hybrid && hasQuery;\\n}\\n\\nfunction useAmp() {\\n  _s();\\n\\n  // Don't assign the context value to a variable to save bytes\\n  return isInAmpMode(_react[\\\"default\\\"].useContext(_ampContext.AmpStateContext));\\n}\\n\\n_s(useAmp, \\\"gDsCjeeItUuvgOWf1v4qoK9RF6k=\\\");\\n\\nif (typeof exports[\\\"default\\\"] === 'function' || typeof exports[\\\"default\\\"] === 'object' && exports[\\\"default\\\"] !== null) {\\n  Object.assign(exports[\\\"default\\\"], exports);\\n  module.exports = exports[\\\"default\\\"];\\n}\\n\\n;\\n    // Wrapped in an IIFE to avoid polluting the global scope\\n    ;\\n    (function () {\\n        var _a, _b;\\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\\n        // to extract CSS. For backwards compatibility, we need to check we're in a\\n        // browser context before continuing.\\n        if (typeof self !== 'undefined' &&\\n            // AMP / No-JS mode does not inject these helpers:\\n            '$RefreshHelpers$' in self) {\\n            // @ts-ignore __webpack_module__ is global\\n            var currentExports = module.exports;\\n            // @ts-ignore __webpack_module__ is global\\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\\n            // This cannot happen in MainTemplate because the exports mismatch between\\n            // templating and execution.\\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\\n            // A module can be accepted automatically based on its exports, e.g. when\\n            // it is a Refresh Boundary.\\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\\n                // Save the previous exports on update so we can compare the boundary\\n                // signatures.\\n                module.hot.dispose(function (data) {\\n                    data.prevExports = currentExports;\\n                });\\n                // Unconditionally accept an update to this module, we'll check if it's\\n                // still a Refresh Boundary later.\\n                // @ts-ignore importMeta is replaced in the loader\\n                module.hot.accept();\\n                // This field is set when the previous version of this module was a\\n                // Refresh Boundary, letting us know we need to check for invalidation or\\n                // enqueue an update.\\n                if (prevExports !== null) {\\n                    // A boundary can become ineligible if its exports are incompatible\\n                    // with the previous exports.\\n                    //\\n                    // For example, if you add/remove/change exports, we'll want to\\n                    // re-execute the importing modules, and force those components to\\n                    // re-render. Similarly, if you convert a class component to a\\n                    // function, we want to invalidate the boundary.\\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\\n                        module.hot.invalidate();\\n                    }\\n                    else {\\n                        self.$RefreshHelpers$.scheduleUpdate();\\n                    }\\n                }\\n            }\\n            else {\\n                // Since we just executed the code for the module, it's possible that the\\n                // new exports made it ineligible for being a boundary.\\n                // We only care about the case when we were _previously_ a boundary,\\n                // because we already accepted this update (accidental side effect).\\n                var isNoLongerABoundary = prevExports !== null;\\n                if (isNoLongerABoundary) {\\n                    module.hot.invalidate();\\n                }\\n            }\\n        }\\n    })();\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOzs7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELG1CQUFBLEdBQXNCRSxXQUF0QjtBQUNBRixjQUFBLEdBQWlCRyxNQUFqQjs7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkM7O0FBQ0EsSUFBSUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLHlFQUFELENBQXpCOztBQUNBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQztBQUNqQyxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFDakMsZUFBU0E7QUFEd0IsR0FBckM7QUFHSDs7QUFDRCxTQUFTTixXQUFULEdBQW9GO0FBQUEsaUZBQUosRUFBSTtBQUFBLDJCQUE3RFEsUUFBNkQ7QUFBQSxNQUE3REEsUUFBNkQsOEJBQW5ELEtBQW1EO0FBQUEseUJBQTNDQyxNQUEyQztBQUFBLE1BQTNDQSxNQUEyQyw0QkFBbkMsS0FBbUM7QUFBQSwyQkFBM0JDLFFBQTJCO0FBQUEsTUFBM0JBLFFBQTJCLDhCQUFqQixLQUFpQjs7QUFDaEYsU0FBT0YsUUFBUSxJQUFJQyxNQUFNLElBQUlDLFFBQTdCO0FBQ0g7O0FBQ0QsU0FBU1QsTUFBVCxHQUFrQjtBQUFBOztBQUNkO0FBQ0EsU0FBT0QsV0FBVyxDQUFDRSxNQUFNLFdBQU4sQ0FBZVMsVUFBZixDQUEwQk4sV0FBVyxDQUFDTyxlQUF0QyxDQUFELENBQWxCO0FBQ0g7O0dBSFFYLE07O0FBS1QsSUFBSSxPQUFPSCxPQUFPLFdBQWQsS0FBMkIsVUFBM0IsSUFBMEMsT0FBT0EsT0FBTyxXQUFkLEtBQTJCLFFBQTNCLElBQXVDQSxPQUFPLFdBQVAsS0FBb0IsSUFBekcsRUFBZ0g7QUFDOUdGLEVBQUFBLE1BQU0sQ0FBQ2lCLE1BQVAsQ0FBY2YsT0FBTyxXQUFyQixFQUErQkEsT0FBL0I7QUFDQWdCLEVBQUFBLE1BQU0sQ0FBQ2hCLE9BQVAsR0FBaUJBLE9BQU8sV0FBeEI7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLmpzPzVlNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzSW5BbXBNb2RlID0gaXNJbkFtcE1vZGU7XG5leHBvcnRzLnVzZUFtcCA9IHVzZUFtcDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2FtcENvbnRleHQgPSByZXF1aXJlKFwiLi9hbXAtY29udGV4dFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlzSW5BbXBNb2RlKHsgYW1wRmlyc3QgPWZhbHNlICwgaHlicmlkID1mYWxzZSAsIGhhc1F1ZXJ5ID1mYWxzZSAsICB9ID0ge30pIHtcbiAgICByZXR1cm4gYW1wRmlyc3QgfHwgaHlicmlkICYmIGhhc1F1ZXJ5O1xufVxuZnVuY3Rpb24gdXNlQW1wKCkge1xuICAgIC8vIERvbid0IGFzc2lnbiB0aGUgY29udGV4dCB2YWx1ZSB0byBhIHZhcmlhYmxlIHRvIHNhdmUgYnl0ZXNcbiAgICByZXR1cm4gaXNJbkFtcE1vZGUoX3JlYWN0LmRlZmF1bHQudXNlQ29udGV4dChfYW1wQ29udGV4dC5BbXBTdGF0ZUNvbnRleHQpKTtcbn1cblxuaWYgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpIHtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW1wLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzSW5BbXBNb2RlIiwidXNlQW1wIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYW1wQ29udGV4dCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJhbXBGaXJzdCIsImh5YnJpZCIsImhhc1F1ZXJ5IiwidXNlQ29udGV4dCIsIkFtcFN0YXRlQ29udGV4dCIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/amp.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/next/dist/shared/lib/head.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/next/dist/shared/lib/head.js ***!\n  \\***************************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\n\\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\\\");\\n\\nvar _s = $RefreshSig$();\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", ({\\n  value: true\\n}));\\nexports.defaultHead = defaultHead;\\nexports[\\\"default\\\"] = void 0;\\n\\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \\\"./node_modules/react/index.js\\\"));\\n\\nvar _sideEffect = _interopRequireDefault(__webpack_require__(/*! ./side-effect */ \\\"./node_modules/next/dist/shared/lib/side-effect.js\\\"));\\n\\nvar _ampContext = __webpack_require__(/*! ./amp-context */ \\\"./node_modules/next/dist/shared/lib/amp-context.js\\\");\\n\\nvar _headManagerContext = __webpack_require__(/*! ./head-manager-context */ \\\"./node_modules/next/dist/shared/lib/head-manager-context.js\\\");\\n\\nvar _amp = __webpack_require__(/*! ./amp */ \\\"./node_modules/next/dist/shared/lib/amp.js\\\");\\n\\nvar _utils = __webpack_require__(/*! ./utils */ \\\"./node_modules/next/dist/shared/lib/utils.js\\\");\\n\\nfunction _interopRequireDefault(obj) {\\n  return obj && obj.__esModule ? obj : {\\n    \\\"default\\\": obj\\n  };\\n}\\n\\nfunction _interopRequireWildcard(obj) {\\n  if (obj && obj.__esModule) {\\n    return obj;\\n  } else {\\n    var newObj = {};\\n\\n    if (obj != null) {\\n      for (var key in obj) {\\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\\n\\n          if (desc.get || desc.set) {\\n            Object.defineProperty(newObj, key, desc);\\n          } else {\\n            newObj[key] = obj[key];\\n          }\\n        }\\n      }\\n    }\\n\\n    newObj[\\\"default\\\"] = obj;\\n    return newObj;\\n  }\\n}\\n\\nfunction defaultHead() {\\n  var inAmpMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\\n  var head = [/*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"meta\\\", {\\n    charSet: \\\"utf-8\\\"\\n  })];\\n\\n  if (!inAmpMode) {\\n    head.push( /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"meta\\\", {\\n      name: \\\"viewport\\\",\\n      content: \\\"width=device-width\\\"\\n    }));\\n  }\\n\\n  return head;\\n}\\n\\nfunction onlyReactElement(list, child) {\\n  // React children can be \\\"string\\\" or \\\"number\\\" in this case we ignore them for backwards compat\\n  if (typeof child === 'string' || typeof child === 'number') {\\n    return list;\\n  } // Adds support for React.Fragment\\n\\n\\n  if (child.type === _react[\\\"default\\\"].Fragment) {\\n    return list.concat(_react[\\\"default\\\"].Children.toArray(child.props.children).reduce(function (fragmentList, fragmentChild) {\\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\\n        return fragmentList;\\n      }\\n\\n      return fragmentList.concat(fragmentChild);\\n    }, []));\\n  }\\n\\n  return list.concat(child);\\n}\\n\\nvar METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];\\n/*\\n returns a function for filtering head child elements\\n which shouldn't be duplicated, like <title/>\\n Also adds support for deduplicated `key` properties\\n*/\\n\\nfunction unique() {\\n  var keys = new Set();\\n  var tags = new Set();\\n  var metaTypes = new Set();\\n  var metaCategories = {};\\n  return function (h) {\\n    var isUnique = true;\\n    var hasKey = false;\\n\\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\\n      hasKey = true;\\n      var key = h.key.slice(h.key.indexOf('$') + 1);\\n\\n      if (keys.has(key)) {\\n        isUnique = false;\\n      } else {\\n        keys.add(key);\\n      }\\n    } // eslint-disable-next-line default-case\\n\\n\\n    switch (h.type) {\\n      case 'title':\\n      case 'base':\\n        if (tags.has(h.type)) {\\n          isUnique = false;\\n        } else {\\n          tags.add(h.type);\\n        }\\n\\n        break;\\n\\n      case 'meta':\\n        for (var i = 0, len = METATYPES.length; i < len; i++) {\\n          var metatype = METATYPES[i];\\n          if (!h.props.hasOwnProperty(metatype)) continue;\\n\\n          if (metatype === 'charSet') {\\n            if (metaTypes.has(metatype)) {\\n              isUnique = false;\\n            } else {\\n              metaTypes.add(metatype);\\n            }\\n          } else {\\n            var category = h.props[metatype];\\n            var categories = metaCategories[metatype] || new Set();\\n\\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\\n              isUnique = false;\\n            } else {\\n              categories.add(category);\\n              metaCategories[metatype] = categories;\\n            }\\n          }\\n        }\\n\\n        break;\\n    }\\n\\n    return isUnique;\\n  };\\n}\\n/**\\n *\\n * @param headElements List of multiple <Head> instances\\n */\\n\\n\\nfunction reduceComponents(headElements, props) {\\n  return headElements.reduce(function (list, headElement) {\\n    var headElementChildren = _react[\\\"default\\\"].Children.toArray(headElement.props.children);\\n\\n    return list.concat(headElementChildren);\\n  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map(function (c, i) {\\n    var key = c.key || i;\\n\\n    if (false) { var newProps; }\\n\\n    if (true) {\\n      // omit JSON-LD structured data snippets from the warning\\n      if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\\n        var srcMessage = c.props['src'] ? \\\"<script> tag with src=\\\\\\\"\\\".concat(c.props['src'], \\\"\\\\\\\"\\\") : \\\"inline <script>\\\";\\n        (0, _utils).warnOnce(\\\"Do not add <script> tags using next/head (see \\\".concat(srcMessage, \\\"). Use next/script instead. \\\\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component\\\"));\\n      } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\\n        (0, _utils).warnOnce(\\\"Do not add stylesheets using next/head (see <link rel=\\\\\\\"stylesheet\\\\\\\"> tag with href=\\\\\\\"\\\".concat(c.props['href'], \\\"\\\\\\\"). Use Document instead. \\\\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component\\\"));\\n      }\\n    }\\n\\n    return /*#__PURE__*/_react[\\\"default\\\"].cloneElement(c, {\\n      key: key\\n    });\\n  });\\n}\\n/**\\n * This component injects elements to `<head>` of your page.\\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\\n */\\n\\n\\nfunction Head(_ref) {\\n  _s();\\n\\n  var children = _ref.children;\\n  var ampState = (0, _react).useContext(_ampContext.AmpStateContext);\\n  var headManager = (0, _react).useContext(_headManagerContext.HeadManagerContext);\\n  return /*#__PURE__*/_react[\\\"default\\\"].createElement(_sideEffect[\\\"default\\\"], {\\n    reduceComponentsToState: reduceComponents,\\n    headManager: headManager,\\n    inAmpMode: (0, _amp).isInAmpMode(ampState)\\n  }, children);\\n}\\n\\n_s(Head, \\\"sCUayZmr5V93tUjujy03KdMBCec=\\\");\\n\\n_c = Head;\\nvar _default = Head;\\nexports[\\\"default\\\"] = _default;\\n\\nif (typeof exports[\\\"default\\\"] === 'function' || typeof exports[\\\"default\\\"] === 'object' && exports[\\\"default\\\"] !== null) {\\n  Object.assign(exports[\\\"default\\\"], exports);\\n  module.exports = exports[\\\"default\\\"];\\n}\\n\\nvar _c;\\n\\n$RefreshReg$(_c, \\\"Head\\\");\\n\\n;\\n    // Wrapped in an IIFE to avoid polluting the global scope\\n    ;\\n    (function () {\\n        var _a, _b;\\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\\n        // to extract CSS. For backwards compatibility, we need to check we're in a\\n        // browser context before continuing.\\n        if (typeof self !== 'undefined' &&\\n            // AMP / No-JS mode does not inject these helpers:\\n            '$RefreshHelpers$' in self) {\\n            // @ts-ignore __webpack_module__ is global\\n            var currentExports = module.exports;\\n            // @ts-ignore __webpack_module__ is global\\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\\n            // This cannot happen in MainTemplate because the exports mismatch between\\n            // templating and execution.\\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\\n            // A module can be accepted automatically based on its exports, e.g. when\\n            // it is a Refresh Boundary.\\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\\n                // Save the previous exports on update so we can compare the boundary\\n                // signatures.\\n                module.hot.dispose(function (data) {\\n                    data.prevExports = currentExports;\\n                });\\n                // Unconditionally accept an update to this module, we'll check if it's\\n                // still a Refresh Boundary later.\\n                // @ts-ignore importMeta is replaced in the loader\\n                module.hot.accept();\\n                // This field is set when the previous version of this module was a\\n                // Refresh Boundary, letting us know we need to check for invalidation or\\n                // enqueue an update.\\n                if (prevExports !== null) {\\n                    // A boundary can become ineligible if its exports are incompatible\\n                    // with the previous exports.\\n                    //\\n                    // For example, if you add/remove/change exports, we'll want to\\n                    // re-execute the importing modules, and force those components to\\n                    // re-render. Similarly, if you convert a class component to a\\n                    // function, we want to invalidate the boundary.\\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\\n                        module.hot.invalidate();\\n                    }\\n                    else {\\n                        self.$RefreshHelpers$.scheduleUpdate();\\n                    }\\n                }\\n            }\\n            else {\\n                // Since we just executed the code for the module, it's possible that the\\n                // new exports made it ineligible for being a boundary.\\n                // We only care about the case when we were _previously_ a boundary,\\n                // because we already accepted this update (accidental side effect).\\n                var isNoLongerABoundary = prevExports !== null;\\n                if (isNoLongerABoundary) {\\n                    module.hot.invalidate();\\n                }\\n            }\\n        }\\n    })();\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/head.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/next/dist/shared/lib/side-effect.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/next/dist/shared/lib/side-effect.js ***!\n  \\**********************************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\n\\nvar _toConsumableArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray.js\\\");\\n\\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\\\");\\n\\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\\\");\\n\\nvar _assertThisInitialized = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/assertThisInitialized */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/assertThisInitialized.js\\\");\\n\\nvar _inherits = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js\\\");\\n\\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js\\\");\\n\\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf */ \\\"./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js\\\");\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", ({\\n  value: true\\n}));\\nexports[\\\"default\\\"] = void 0;\\n\\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \\\"./node_modules/react/index.js\\\"));\\n\\nfunction _interopRequireWildcard(obj) {\\n  if (obj && obj.__esModule) {\\n    return obj;\\n  } else {\\n    var newObj = {};\\n\\n    if (obj != null) {\\n      for (var key in obj) {\\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\\n\\n          if (desc.get || desc.set) {\\n            Object.defineProperty(newObj, key, desc);\\n          } else {\\n            newObj[key] = obj[key];\\n          }\\n        }\\n      }\\n    }\\n\\n    newObj[\\\"default\\\"] = obj;\\n    return newObj;\\n  }\\n}\\n\\nvar isServer = false;\\n\\nvar _class = /*#__PURE__*/function (_react$Component) {\\n  _inherits(_class, _react$Component);\\n\\n  var _super = _createSuper(_class);\\n\\n  function _class(props) {\\n    var _this;\\n\\n    _classCallCheck(this, _class);\\n\\n    _this = _super.call(this, props);\\n\\n    _this.emitChange = function () {\\n      if (_this._hasHeadManager) {\\n        _this.props.headManager.updateHead(_this.props.reduceComponentsToState(_toConsumableArray(_this.props.headManager.mountedInstances), _this.props));\\n      }\\n    };\\n\\n    _this._hasHeadManager = _this.props.headManager && _this.props.headManager.mountedInstances;\\n\\n    if (isServer && _this._hasHeadManager) {\\n      _this.props.headManager.mountedInstances.add(_assertThisInitialized(_this));\\n\\n      _this.emitChange();\\n    }\\n\\n    return _this;\\n  }\\n\\n  _createClass(_class, [{\\n    key: \\\"componentDidMount\\\",\\n    value: function componentDidMount() {\\n      if (this._hasHeadManager) {\\n        this.props.headManager.mountedInstances.add(this);\\n      }\\n\\n      this.emitChange();\\n    }\\n  }, {\\n    key: \\\"componentDidUpdate\\\",\\n    value: function componentDidUpdate() {\\n      this.emitChange();\\n    }\\n  }, {\\n    key: \\\"componentWillUnmount\\\",\\n    value: function componentWillUnmount() {\\n      if (this._hasHeadManager) {\\n        this.props.headManager.mountedInstances[\\\"delete\\\"](this);\\n      }\\n\\n      this.emitChange();\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      return null;\\n    }\\n  }]);\\n\\n  return _class;\\n}(_react.Component);\\n\\nexports[\\\"default\\\"] = _class;\\n\\n;\\n    // Wrapped in an IIFE to avoid polluting the global scope\\n    ;\\n    (function () {\\n        var _a, _b;\\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\\n        // to extract CSS. For backwards compatibility, we need to check we're in a\\n        // browser context before continuing.\\n        if (typeof self !== 'undefined' &&\\n            // AMP / No-JS mode does not inject these helpers:\\n            '$RefreshHelpers$' in self) {\\n            // @ts-ignore __webpack_module__ is global\\n            var currentExports = module.exports;\\n            // @ts-ignore __webpack_module__ is global\\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\\n            // This cannot happen in MainTemplate because the exports mismatch between\\n            // templating and execution.\\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\\n            // A module can be accepted automatically based on its exports, e.g. when\\n            // it is a Refresh Boundary.\\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\\n                // Save the previous exports on update so we can compare the boundary\\n                // signatures.\\n                module.hot.dispose(function (data) {\\n                    data.prevExports = currentExports;\\n                });\\n                // Unconditionally accept an update to this module, we'll check if it's\\n                // still a Refresh Boundary later.\\n                // @ts-ignore importMeta is replaced in the loader\\n                module.hot.accept();\\n                // This field is set when the previous version of this module was a\\n                // Refresh Boundary, letting us know we need to check for invalidation or\\n                // enqueue an update.\\n                if (prevExports !== null) {\\n                    // A boundary can become ineligible if its exports are incompatible\\n                    // with the previous exports.\\n                    //\\n                    // For example, if you add/remove/change exports, we'll want to\\n                    // re-execute the importing modules, and force those components to\\n                    // re-render. Similarly, if you convert a class component to a\\n                    // function, we want to invalidate the boundary.\\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\\n                        module.hot.invalidate();\\n                    }\\n                    else {\\n                        self.$RefreshHelpers$.scheduleUpdate();\\n                    }\\n                }\\n            }\\n            else {\\n                // Since we just executed the code for the module, it's possible that the\\n                // new exports made it ineligible for being a boundary.\\n                // We only care about the case when we were _previously_ a boundary,\\n                // because we already accepted this update (accidental side effect).\\n                var isNoLongerABoundary = prevExports !== null;\\n                if (isNoLongerABoundary) {\\n                    module.hot.invalidate();\\n                }\\n            }\\n        }\\n    })();\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvc2lkZS1lZmZlY3QuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELGtCQUFBLEdBQWtCLEtBQUssQ0FBdkI7O0FBQ0EsSUFBSUUsTUFBTSxHQUFHQyx1QkFBdUIsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQXBDOztBQUNBLFNBQVNELHVCQUFULENBQWlDRSxHQUFqQyxFQUFzQztBQUNsQyxNQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBZixFQUEyQjtBQUN2QixXQUFPRCxHQUFQO0FBQ0gsR0FGRCxNQUVPO0FBQ0gsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsUUFBSUYsR0FBRyxJQUFJLElBQVgsRUFBaUI7QUFDYixXQUFJLElBQUlHLEdBQVIsSUFBZUgsR0FBZixFQUFtQjtBQUNmLFlBQUlQLE1BQU0sQ0FBQ1csU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDTixHQUFyQyxFQUEwQ0csR0FBMUMsQ0FBSixFQUFvRDtBQUNoRCxjQUFJSSxJQUFJLEdBQUdkLE1BQU0sQ0FBQ0MsY0FBUCxJQUF5QkQsTUFBTSxDQUFDZSx3QkFBaEMsR0FBMkRmLE1BQU0sQ0FBQ2Usd0JBQVAsQ0FBZ0NSLEdBQWhDLEVBQXFDRyxHQUFyQyxDQUEzRCxHQUF1RyxFQUFsSDs7QUFDQSxjQUFJSSxJQUFJLENBQUNFLEdBQUwsSUFBWUYsSUFBSSxDQUFDRyxHQUFyQixFQUEwQjtBQUN0QmpCLFlBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQlEsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DSSxJQUFuQztBQUNILFdBRkQsTUFFTztBQUNITCxZQUFBQSxNQUFNLENBQUNDLEdBQUQsQ0FBTixHQUFjSCxHQUFHLENBQUNHLEdBQUQsQ0FBakI7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7QUFDREQsSUFBQUEsTUFBTSxXQUFOLEdBQWlCRixHQUFqQjtBQUNBLFdBQU9FLE1BQVA7QUFDSDtBQUNKOztBQUNELElBQU1TLFFBQVEsUUFBZDs7SUFDTUMsTTs7Ozs7QUFDRixrQkFBWUMsS0FBWixFQUFrQjtBQUFBOztBQUFBOztBQUNkLDhCQUFNQSxLQUFOOztBQUNBLFVBQUtDLFVBQUwsR0FBa0IsWUFBSTtBQUNsQixVQUFJLE1BQUtDLGVBQVQsRUFBMEI7QUFDdEIsY0FBS0YsS0FBTCxDQUFXRyxXQUFYLENBQXVCQyxVQUF2QixDQUFrQyxNQUFLSixLQUFMLENBQVdLLHVCQUFYLG9CQUMzQixNQUFLTCxLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQURJLEdBRS9CLE1BQUtOLEtBRjBCLENBQWxDO0FBR0g7QUFDSixLQU5EOztBQU9BLFVBQUtFLGVBQUwsR0FBdUIsTUFBS0YsS0FBTCxDQUFXRyxXQUFYLElBQTBCLE1BQUtILEtBQUwsQ0FBV0csV0FBWCxDQUF1QkcsZ0JBQXhFOztBQUNBLFFBQUlSLFFBQVEsSUFBSSxNQUFLSSxlQUFyQixFQUFzQztBQUNsQyxZQUFLRixLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQUF2QixDQUF3Q0MsR0FBeEM7O0FBQ0EsWUFBS04sVUFBTDtBQUNIOztBQWJhO0FBY2pCOzs7O1dBQ0QsNkJBQW9CO0FBQ2hCLFVBQUksS0FBS0MsZUFBVCxFQUEwQjtBQUN0QixhQUFLRixLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQUF2QixDQUF3Q0MsR0FBeEMsQ0FBNEMsSUFBNUM7QUFDSDs7QUFDRCxXQUFLTixVQUFMO0FBQ0g7OztXQUNELDhCQUFxQjtBQUNqQixXQUFLQSxVQUFMO0FBQ0g7OztXQUNELGdDQUF1QjtBQUNuQixVQUFJLEtBQUtDLGVBQVQsRUFBMEI7QUFDdEIsYUFBS0YsS0FBTCxDQUFXRyxXQUFYLENBQXVCRyxnQkFBdkIsV0FBK0MsSUFBL0M7QUFDSDs7QUFDRCxXQUFLTCxVQUFMO0FBQ0g7OztXQUNELGtCQUFTO0FBQ0wsYUFBTyxJQUFQO0FBQ0g7Ozs7RUFqQ2dCakIsTUFBTSxDQUFDd0IsUzs7QUFtQzVCMUIsa0JBQUEsR0FBa0JpQixNQUFsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvc2lkZS1lZmZlY3QuanM/NDA4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gICAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXdPYmogPSB7fTtcbiAgICAgICAgaWYgKG9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBvYmope1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld09iai5kZWZhdWx0ID0gb2JqO1xuICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgIH1cbn1cbmNvbnN0IGlzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG5jbGFzcyBfY2xhc3MgZXh0ZW5kcyBfcmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5lbWl0Q2hhbmdlID0gKCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNIZWFkTWFuYWdlcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIudXBkYXRlSGVhZCh0aGlzLnByb3BzLnJlZHVjZUNvbXBvbmVudHNUb1N0YXRlKFtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzXG4gICAgICAgICAgICAgICAgXSwgdGhpcy5wcm9wcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9oYXNIZWFkTWFuYWdlciA9IHRoaXMucHJvcHMuaGVhZE1hbmFnZXIgJiYgdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzO1xuICAgICAgICBpZiAoaXNTZXJ2ZXIgJiYgdGhpcy5faGFzSGVhZE1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXMuZGVsZXRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lkZS1lZmZlY3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJpc1NlcnZlciIsIl9jbGFzcyIsInByb3BzIiwiZW1pdENoYW5nZSIsIl9oYXNIZWFkTWFuYWdlciIsImhlYWRNYW5hZ2VyIiwidXBkYXRlSGVhZCIsInJlZHVjZUNvbXBvbmVudHNUb1N0YXRlIiwibW91bnRlZEluc3RhbmNlcyIsImFkZCIsIkNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/side-effect.js\\n\");\n\n/***/ })\n\n}]);"],mappings:"AAAA,aACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,sjEAOY;mHANZ,CAACA,IAAI,CAAC,kBAAD,CAAJ,CAA2B,4BAAAA,IAAI,CAAC,kBAAD,CAAJ,+BAA4B,EAA5B,CAA5B,EAA4DC,IAA5D,CAAiE,CAAC,CAAC,wCAAD,CAAD,CAA4C,CAE7G,KAAM,2CACN;AACA;AACA,oDAHM,CAIN,KAAO,SAASC,MAAT,CAAiBC,OAAjB,CAA0BC,mBAA1B,CAA+C,iDAEtDC,IAAI,CAAC,uglBAAD,CAAJ,CAEA,KAAO,CAVsG,CAY7G,KAAM,qDACN;AACA;AACA,8DAHM,CAIN,KAAO,SAASH,MAAT,CAAiBC,OAAjB,CAA0BC,mBAA1B,CAA+C,iDAEtDC,IAAI,CAAC,mvLAAD,CAAJ,CAEA,KAAO,CApBsG,CAsB7G,KAAM,6CACN;AACA;AACA,sDAHM,CAIN,KAAO,SAASH,MAAT,CAAiBC,OAAjB,CAA0BC,mBAA1B,CAA+C,iDAEtDC,IAAI,CAAC,60PAAD,CAAJ,CAEA,KAAO,CA9BsG,CAgC7G,KAAM,8CACN;AACA;AACA,uDAHM,CAIN,KAAO,SAASH,MAAT,CAAiBC,OAAjB,CAA0BC,mBAA1B,CAA+C,iDAEtDC,IAAI,CAAC,q8+BAAD,CAAJ,CAEA,KAAO,CAxCsG,CA0C7G,KAAM,qDACN;AACA;AACA,8DAHM,CAIN,KAAO,SAASH,MAAT,CAAiBC,OAAjB,CAA0BC,mBAA1B,CAA+C,iDAEtDC,IAAI,CAAC,05bAAD,CAAJ,CAEA,KAAO,CAlDsG,CAA5C,CAAjE"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1e972aae46ff2777dc0d688b14938fbdeae68c3b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1onu16fc4=function(){return actualCoverage;};}return actualCoverage;}cov_1onu16fc4();function cov_1kdxb2qmvx(){cov_1onu16fc4().f[0]++;var path=(cov_1onu16fc4().s[0]++,"C:\\Users\\nathn\\Desktop\\final project\\admin-next-app\\.next\\static\\chunks\\fallback\\node_modules_next_dist_pages__error_js.js");var hash=(cov_1onu16fc4().s[1]++,"1ed521762d2ba7866746e679f080aecf75ab312c");var global=(cov_1onu16fc4().s[2]++,new Function("return this")());var gcv=(cov_1onu16fc4().s[3]++,"__coverage__");var coverageData=(cov_1onu16fc4().s[4]++,{path:"C:\\Users\\nathn\\Desktop\\final project\\admin-next-app\\.next\\static\\chunks\\fallback\\node_modules_next_dist_pages__error_js.js",statementMap:{"0":{start:{line:10,column:0},end:{line:62,column:4}},"1":{start:{line:18,column:0},end:{line:18,column:18958}},"2":{start:{line:28,column:0},end:{line:28,column:5882}},"3":{start:{line:38,column:0},end:{line:38,column:8020}},"4":{start:{line:48,column:0},end:{line:48,column:32204}},"5":{start:{line:58,column:0},end:{line:58,column:14241}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:7},end:{line:16,column:8}},loc:{start:{line:16,column:54},end:{line:20,column:7}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:26,column:7},end:{line:26,column:8}},loc:{start:{line:26,column:54},end:{line:30,column:7}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:7},end:{line:36,column:8}},loc:{start:{line:36,column:54},end:{line:40,column:7}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:46,column:7},end:{line:46,column:8}},loc:{start:{line:46,column:54},end:{line:50,column:7}},line:46},"4":{name:"(anonymous_4)",decl:{start:{line:56,column:7},end:{line:56,column:8}},loc:{start:{line:56,column:54},end:{line:60,column:7}},line:56}},branchMap:{"0":{loc:{start:{line:10,column:28},end:{line:10,column:58}},type:"binary-expr",locations:[{start:{line:10,column:28},end:{line:10,column:52}},{start:{line:10,column:56},end:{line:10,column:58}}],line:10}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1ed521762d2ba7866746e679f080aecf75ab312c"});var coverage=(cov_1onu16fc4().s[5]++,(cov_1onu16fc4().b[0][0]++,global[gcv])||(cov_1onu16fc4().b[0][1]++,global[gcv]={}));cov_1onu16fc4().s[6]++;if((cov_1onu16fc4().b[2][0]++,!coverage[path])||(cov_1onu16fc4().b[2][1]++,coverage[path].hash!==hash)){cov_1onu16fc4().b[1][0]++;cov_1onu16fc4().s[7]++;coverage[path]=coverageData;}else{cov_1onu16fc4().b[1][1]++;}var actualCoverage=(cov_1onu16fc4().s[8]++,coverage[path]);{cov_1onu16fc4().s[9]++;// @ts-ignore
cov_1kdxb2qmvx=function(){cov_1onu16fc4().f[1]++;cov_1onu16fc4().s[10]++;return actualCoverage;};}cov_1onu16fc4().s[11]++;return actualCoverage;}cov_1onu16fc4().s[12]++;cov_1kdxb2qmvx();cov_1onu16fc4().s[13]++;cov_1kdxb2qmvx().s[0]++;cov_1onu16fc4().s[14]++;(self["webpackChunk_N_E"]=(cov_1onu16fc4().b[3][0]++,(cov_1kdxb2qmvx().b[0][0]++,self["webpackChunk_N_E"]))||(cov_1onu16fc4().b[3][1]++,(cov_1kdxb2qmvx().b[0][1]++,[]))).push([["node_modules_next_dist_pages__error_js"],{/***/"./node_modules/next/dist/pages/_error.js":/*!************************************************!*\
  !*** ./node_modules/next/dist/pages/_error.js ***!
  \************************************************/ /***/function(module,exports,__webpack_require__){cov_1onu16fc4().f[2]++;cov_1onu16fc4().s[15]++;cov_1kdxb2qmvx().f[0]++;cov_1onu16fc4().s[16]++;cov_1kdxb2qmvx().s[1]++;cov_1onu16fc4().s[17]++;eval("\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\");\n\nvar _inherits = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js\");\n\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js\");\n\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _head = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar statusCodes = {\n  400: 'Bad Request',\n  404: 'This page could not be found',\n  405: 'Method Not Allowed',\n  500: 'Internal Server Error'\n};\n\nfunction _getInitialProps(_ref) {\n  var res = _ref.res,\n      err = _ref.err;\n  var statusCode = res && res.statusCode ? res.statusCode : err ? err.statusCode : 404;\n  return {\n    statusCode: statusCode\n  };\n}\n\nvar Error = /*#__PURE__*/function (_react$default$Compon) {\n  _inherits(Error, _react$default$Compon);\n\n  var _super = _createSuper(Error);\n\n  function Error() {\n    _classCallCheck(this, Error);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Error, [{\n    key: \"render\",\n    value: function render() {\n      var statusCode = this.props.statusCode;\n      var title = this.props.title || statusCodes[statusCode] || 'An unexpected error has occurred';\n      return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        style: styles.error\n      }, /*#__PURE__*/_react[\"default\"].createElement(_head[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(\"title\", null, statusCode ? \"\".concat(statusCode, \": \").concat(title) : 'Application error: a client-side exception has occurred')), /*#__PURE__*/_react[\"default\"].createElement(\"div\", null, /*#__PURE__*/_react[\"default\"].createElement(\"style\", {\n        dangerouslySetInnerHTML: {\n          __html: \"\\n                body { margin: 0; color: #000; background: #fff; }\\n                .next-error-h1 {\\n                  border-right: 1px solid rgba(0, 0, 0, .3);\\n                }\\n                @media (prefers-color-scheme: dark) {\\n                  body { color: #fff; background: #000; }\\n                  .next-error-h1 {\\n                    border-right: 1px solid rgba(255, 255, 255, .3);\\n                  }\\n                }\"\n        }\n      }), statusCode ? /*#__PURE__*/_react[\"default\"].createElement(\"h1\", {\n        className: \"next-error-h1\",\n        style: styles.h1\n      }, statusCode) : null, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        style: styles.desc\n      }, /*#__PURE__*/_react[\"default\"].createElement(\"h2\", {\n        style: styles.h2\n      }, this.props.title || statusCode ? title : /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, \"Application error: a client-side exception has occurred (see the browser console for more information)\"), \".\"))));\n    }\n  }]);\n\n  return Error;\n}(_react[\"default\"].Component);\n\nexports[\"default\"] = Error;\nError.displayName = 'ErrorPage';\nError.getInitialProps = _getInitialProps;\nError.origGetInitialProps = _getInitialProps;\nvar styles = {\n  error: {\n    fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, \"Segoe UI\", \"Fira Sans\", Avenir, \"Helvetica Neue\", \"Lucida Grande\", sans-serif',\n    height: '100vh',\n    textAlign: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  desc: {\n    display: 'inline-block',\n    textAlign: 'left',\n    lineHeight: '49px',\n    height: '49px',\n    verticalAlign: 'middle'\n  },\n  h1: {\n    display: 'inline-block',\n    margin: 0,\n    marginRight: '20px',\n    padding: '10px 23px 10px 0',\n    fontSize: '24px',\n    fontWeight: 500,\n    verticalAlign: 'top'\n  },\n  h2: {\n    fontSize: '14px',\n    fontWeight: 'normal',\n    lineHeight: 'inherit',\n    margin: 0,\n    padding: 0\n  }\n};\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3BhZ2VzL19lcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7Ozs7Ozs7Ozs7Ozs7OztBQUNiQSw4Q0FBNkM7QUFDekNHLEVBQUFBLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCxrQkFBQSxHQUFrQixLQUFLLENBQXZCOztBQUNBLElBQUlFLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFuQzs7QUFDQSxJQUFJQyxLQUFLLEdBQUdGLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHVFQUFELENBQVIsQ0FBbEM7O0FBQ0EsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQ2pDLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUNqQyxlQUFTQTtBQUR3QixHQUFyQztBQUdIOztBQUNELElBQU1FLFdBQVcsR0FBRztBQUNoQixPQUFLLGFBRFc7QUFFaEIsT0FBSyw4QkFGVztBQUdoQixPQUFLLG9CQUhXO0FBSWhCLE9BQUs7QUFKVyxDQUFwQjs7QUFNQSxTQUFTQyxnQkFBVCxPQUEwQztBQUFBLE1BQWRDLEdBQWMsUUFBZEEsR0FBYztBQUFBLE1BQVJDLEdBQVEsUUFBUkEsR0FBUTtBQUN0QyxNQUFNQyxVQUFVLEdBQUdGLEdBQUcsSUFBSUEsR0FBRyxDQUFDRSxVQUFYLEdBQXdCRixHQUFHLENBQUNFLFVBQTVCLEdBQXlDRCxHQUFHLEdBQUdBLEdBQUcsQ0FBQ0MsVUFBUCxHQUFvQixHQUFuRjtBQUNBLFNBQU87QUFDSEEsSUFBQUEsVUFBVSxFQUFWQTtBQURHLEdBQVA7QUFHSDs7SUFDS0MsSzs7Ozs7Ozs7Ozs7OztXQUNGLGtCQUFTO0FBQ0wsVUFBUUQsVUFBUixHQUF3QixLQUFLRSxLQUE3QixDQUFRRixVQUFSO0FBQ0EsVUFBTUcsS0FBSyxHQUFHLEtBQUtELEtBQUwsQ0FBV0MsS0FBWCxJQUFvQlAsV0FBVyxDQUFDSSxVQUFELENBQS9CLElBQStDLGtDQUE3RDtBQUNBLGFBQU8sYUFBY1YsTUFBTSxXQUFOLENBQWVjLGFBQWYsQ0FBNkIsS0FBN0IsRUFBb0M7QUFDckRDLFFBQUFBLEtBQUssRUFBRUMsTUFBTSxDQUFDQztBQUR1QyxPQUFwQyxFQUVsQixhQUFjakIsTUFBTSxXQUFOLENBQWVjLGFBQWYsQ0FBNkJYLEtBQUssV0FBbEMsRUFBNEMsSUFBNUMsRUFBa0QsYUFBY0gsTUFBTSxXQUFOLENBQWVjLGFBQWYsQ0FBNkIsT0FBN0IsRUFBc0MsSUFBdEMsRUFBNENKLFVBQVUsYUFBTUEsVUFBTixlQUFxQkcsS0FBckIsSUFBK0IseURBQXJGLENBQWhFLENBRkksRUFFOE0sYUFBY2IsTUFBTSxXQUFOLENBQWVjLGFBQWYsQ0FBNkIsS0FBN0IsRUFBb0MsSUFBcEMsRUFBMEMsYUFBY2QsTUFBTSxXQUFOLENBQWVjLGFBQWYsQ0FBNkIsT0FBN0IsRUFBc0M7QUFDM1VJLFFBQUFBLHVCQUF1QixFQUFFO0FBQ3JCQyxVQUFBQSxNQUFNO0FBRGU7QUFEa1QsT0FBdEMsQ0FBeEQsRUFjN09ULFVBQVUsR0FBRyxhQUFjVixNQUFNLFdBQU4sQ0FBZWMsYUFBZixDQUE2QixJQUE3QixFQUFtQztBQUM5RE0sUUFBQUEsU0FBUyxFQUFFLGVBRG1EO0FBRTlETCxRQUFBQSxLQUFLLEVBQUVDLE1BQU0sQ0FBQ0s7QUFGZ0QsT0FBbkMsRUFHNUJYLFVBSDRCLENBQWpCLEdBR0csSUFqQmdPLEVBaUIxTixhQUFjVixNQUFNLFdBQU4sQ0FBZWMsYUFBZixDQUE2QixLQUE3QixFQUFvQztBQUNyRUMsUUFBQUEsS0FBSyxFQUFFQyxNQUFNLENBQUNNO0FBRHVELE9BQXBDLEVBRWxDLGFBQWN0QixNQUFNLFdBQU4sQ0FBZWMsYUFBZixDQUE2QixJQUE3QixFQUFtQztBQUNoREMsUUFBQUEsS0FBSyxFQUFFQyxNQUFNLENBQUNPO0FBRGtDLE9BQW5DLEVBRWQsS0FBS1gsS0FBTCxDQUFXQyxLQUFYLElBQW9CSCxVQUFwQixHQUFpQ0csS0FBakMsR0FBeUMsYUFBY2IsTUFBTSxXQUFOLENBQWVjLGFBQWYsQ0FBNkJkLE1BQU0sV0FBTixDQUFld0IsUUFBNUMsRUFBc0QsSUFBdEQsRUFBNEQsd0dBQTVELENBRnpDLEVBRWdOLEdBRmhOLENBRm9CLENBakI0TSxDQUY1TixDQUFyQjtBQXdCSDs7OztFQTVCZXhCLE1BQU0sV0FBTixDQUFleUIsUzs7QUE4Qm5DM0Isa0JBQUEsR0FBa0JhLEtBQWxCO0FBQ0FBLEtBQUssQ0FBQ2UsV0FBTixHQUFvQixXQUFwQjtBQUNBZixLQUFLLENBQUNnQixlQUFOLEdBQXdCcEIsZ0JBQXhCO0FBQ0FJLEtBQUssQ0FBQ2lCLG1CQUFOLEdBQTRCckIsZ0JBQTVCO0FBQ0EsSUFBTVMsTUFBTSxHQUFHO0FBQ1hDLEVBQUFBLEtBQUssRUFBRTtBQUNIWSxJQUFBQSxVQUFVLEVBQUUsMkhBRFQ7QUFFSEMsSUFBQUEsTUFBTSxFQUFFLE9BRkw7QUFHSEMsSUFBQUEsU0FBUyxFQUFFLFFBSFI7QUFJSEMsSUFBQUEsT0FBTyxFQUFFLE1BSk47QUFLSEMsSUFBQUEsYUFBYSxFQUFFLFFBTFo7QUFNSEMsSUFBQUEsVUFBVSxFQUFFLFFBTlQ7QUFPSEMsSUFBQUEsY0FBYyxFQUFFO0FBUGIsR0FESTtBQVVYYixFQUFBQSxJQUFJLEVBQUU7QUFDRlUsSUFBQUEsT0FBTyxFQUFFLGNBRFA7QUFFRkQsSUFBQUEsU0FBUyxFQUFFLE1BRlQ7QUFHRkssSUFBQUEsVUFBVSxFQUFFLE1BSFY7QUFJRk4sSUFBQUEsTUFBTSxFQUFFLE1BSk47QUFLRk8sSUFBQUEsYUFBYSxFQUFFO0FBTGIsR0FWSztBQWlCWGhCLEVBQUFBLEVBQUUsRUFBRTtBQUNBVyxJQUFBQSxPQUFPLEVBQUUsY0FEVDtBQUVBTSxJQUFBQSxNQUFNLEVBQUUsQ0FGUjtBQUdBQyxJQUFBQSxXQUFXLEVBQUUsTUFIYjtBQUlBQyxJQUFBQSxPQUFPLEVBQUUsa0JBSlQ7QUFLQUMsSUFBQUEsUUFBUSxFQUFFLE1BTFY7QUFNQUMsSUFBQUEsVUFBVSxFQUFFLEdBTlo7QUFPQUwsSUFBQUEsYUFBYSxFQUFFO0FBUGYsR0FqQk87QUEwQlhkLEVBQUFBLEVBQUUsRUFBRTtBQUNBa0IsSUFBQUEsUUFBUSxFQUFFLE1BRFY7QUFFQUMsSUFBQUEsVUFBVSxFQUFFLFFBRlo7QUFHQU4sSUFBQUEsVUFBVSxFQUFFLFNBSFo7QUFJQUUsSUFBQUEsTUFBTSxFQUFFLENBSlI7QUFLQUUsSUFBQUEsT0FBTyxFQUFFO0FBTFQ7QUExQk8sQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3BhZ2VzL19lcnJvci5qcz8xOGYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfaGVhZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXJlZC9saWIvaGVhZFwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5jb25zdCBzdGF0dXNDb2RlcyA9IHtcbiAgICA0MDA6ICdCYWQgUmVxdWVzdCcsXG4gICAgNDA0OiAnVGhpcyBwYWdlIGNvdWxkIG5vdCBiZSBmb3VuZCcsXG4gICAgNDA1OiAnTWV0aG9kIE5vdCBBbGxvd2VkJyxcbiAgICA1MDA6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InXG59O1xuZnVuY3Rpb24gX2dldEluaXRpYWxQcm9wcyh7IHJlcyAsIGVyciAgfSkge1xuICAgIGNvbnN0IHN0YXR1c0NvZGUgPSByZXMgJiYgcmVzLnN0YXR1c0NvZGUgPyByZXMuc3RhdHVzQ29kZSA6IGVyciA/IGVyci5zdGF0dXNDb2RlIDogNDA0O1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1c0NvZGVcbiAgICB9O1xufVxuY2xhc3MgRXJyb3IgZXh0ZW5kcyBfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXNDb2RlICB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLnByb3BzLnRpdGxlIHx8IHN0YXR1c0NvZGVzW3N0YXR1c0NvZGVdIHx8ICdBbiB1bmV4cGVjdGVkIGVycm9yIGhhcyBvY2N1cnJlZCc7XG4gICAgICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5lcnJvclxuICAgICAgICB9LCAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2hlYWQuZGVmYXVsdCwgbnVsbCwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIiwgbnVsbCwgc3RhdHVzQ29kZSA/IGAke3N0YXR1c0NvZGV9OiAke3RpdGxlfWAgOiAnQXBwbGljYXRpb24gZXJyb3I6IGEgY2xpZW50LXNpZGUgZXhjZXB0aW9uIGhhcyBvY2N1cnJlZCcpKSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIsIHtcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgX19odG1sOiBgXG4gICAgICAgICAgICAgICAgYm9keSB7IG1hcmdpbjogMDsgY29sb3I6ICMwMDA7IGJhY2tncm91bmQ6ICNmZmY7IH1cbiAgICAgICAgICAgICAgICAubmV4dC1lcnJvci1oMSB7XG4gICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIC4zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xuICAgICAgICAgICAgICAgICAgYm9keSB7IGNvbG9yOiAjZmZmOyBiYWNrZ3JvdW5kOiAjMDAwOyB9XG4gICAgICAgICAgICAgICAgICAubmV4dC1lcnJvci1oMSB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgLjMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBzdGF0dXNDb2RlID8gLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaDFcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5leHQtZXJyb3ItaDFcIixcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuaDFcbiAgICAgICAgfSwgc3RhdHVzQ29kZSkgOiBudWxsLCAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5kZXNjXG4gICAgICAgIH0sIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImgyXCIsIHtcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuaDJcbiAgICAgICAgfSwgdGhpcy5wcm9wcy50aXRsZSB8fCBzdGF0dXNDb2RlID8gdGl0bGUgOiAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIFwiQXBwbGljYXRpb24gZXJyb3I6IGEgY2xpZW50LXNpZGUgZXhjZXB0aW9uIGhhcyBvY2N1cnJlZCAoc2VlIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yIG1vcmUgaW5mb3JtYXRpb24pXCIpLCBcIi5cIikpKSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEVycm9yO1xuRXJyb3IuZGlzcGxheU5hbWUgPSAnRXJyb3JQYWdlJztcbkVycm9yLmdldEluaXRpYWxQcm9wcyA9IF9nZXRJbml0aWFsUHJvcHM7XG5FcnJvci5vcmlnR2V0SW5pdGlhbFByb3BzID0gX2dldEluaXRpYWxQcm9wcztcbmNvbnN0IHN0eWxlcyA9IHtcbiAgICBlcnJvcjoge1xuICAgICAgICBmb250RmFtaWx5OiAnLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBSb2JvdG8sIFwiU2Vnb2UgVUlcIiwgXCJGaXJhIFNhbnNcIiwgQXZlbmlyLCBcIkhlbHZldGljYSBOZXVlXCIsIFwiTHVjaWRhIEdyYW5kZVwiLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwdmgnLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcbiAgICBkZXNjOiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgbGluZUhlaWdodDogJzQ5cHgnLFxuICAgICAgICBoZWlnaHQ6ICc0OXB4JyxcbiAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgICB9LFxuICAgIGgxOiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIG1hcmdpblJpZ2h0OiAnMjBweCcsXG4gICAgICAgIHBhZGRpbmc6ICcxMHB4IDIzcHggMTBweCAwJyxcbiAgICAgICAgZm9udFNpemU6ICcyNHB4JyxcbiAgICAgICAgZm9udFdlaWdodDogNTAwLFxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xuICAgIH0sXG4gICAgaDI6IHtcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBwYWRkaW5nOiAwXG4gICAgfVxufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Vycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2hlYWQiLCJvYmoiLCJfX2VzTW9kdWxlIiwic3RhdHVzQ29kZXMiLCJfZ2V0SW5pdGlhbFByb3BzIiwicmVzIiwiZXJyIiwic3RhdHVzQ29kZSIsIkVycm9yIiwicHJvcHMiLCJ0aXRsZSIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInN0eWxlcyIsImVycm9yIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjbGFzc05hbWUiLCJoMSIsImRlc2MiLCJoMiIsIkZyYWdtZW50IiwiQ29tcG9uZW50IiwiZGlzcGxheU5hbWUiLCJnZXRJbml0aWFsUHJvcHMiLCJvcmlnR2V0SW5pdGlhbFByb3BzIiwiZm9udEZhbWlseSIsImhlaWdodCIsInRleHRBbGlnbiIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwibGluZUhlaWdodCIsInZlcnRpY2FsQWxpZ24iLCJtYXJnaW4iLCJtYXJnaW5SaWdodCIsInBhZGRpbmciLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/pages/_error.js\n");/***/},/***/"./node_modules/next/dist/shared/lib/amp-context.js":/*!**********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/amp-context.js ***!
  \**********************************************************/ /***/function(module,exports,__webpack_require__){cov_1onu16fc4().f[3]++;cov_1onu16fc4().s[18]++;cov_1kdxb2qmvx().f[1]++;cov_1onu16fc4().s[19]++;cov_1kdxb2qmvx().s[2]++;cov_1onu16fc4().s[20]++;eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AmpStateContext = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar AmpStateContext = _react[\"default\"].createContext({});\n\nexports.AmpStateContext = AmpStateContext;\n\nif (true) {\n  AmpStateContext.displayName = 'AmpStateContext';\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELHVCQUFBLEdBQTBCLEtBQUssQ0FBL0I7O0FBQ0EsSUFBSUcsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQW5DOztBQUNBLFNBQVNELHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQztBQUNqQyxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFDakMsZUFBU0E7QUFEd0IsR0FBckM7QUFHSDs7QUFDRCxJQUFNSixlQUFlLEdBQUdDLE1BQU0sV0FBTixDQUFlSyxhQUFmLENBQTZCLEVBQTdCLENBQXhCOztBQUNBUix1QkFBQSxHQUEwQkUsZUFBMUI7O0FBQ0EsSUFBSSxNQUF1QztBQUN2Q0EsRUFBQUEsZUFBZSxDQUFDTyxXQUFoQixHQUE4QixpQkFBOUI7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanM/ZTVhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQW1wU3RhdGVDb250ZXh0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmNvbnN0IEFtcFN0YXRlQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQoe30pO1xuZXhwb3J0cy5BbXBTdGF0ZUNvbnRleHQgPSBBbXBTdGF0ZUNvbnRleHQ7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIEFtcFN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdBbXBTdGF0ZUNvbnRleHQnO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbXAtY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBbXBTdGF0ZUNvbnRleHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjcmVhdGVDb250ZXh0IiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/amp-context.js\n");/***/},/***/"./node_modules/next/dist/shared/lib/amp.js":/*!**************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/amp.js ***!
  \**************************************************/ /***/function(module,exports,__webpack_require__){cov_1onu16fc4().f[4]++;cov_1onu16fc4().s[21]++;cov_1kdxb2qmvx().f[2]++;cov_1onu16fc4().s[22]++;cov_1kdxb2qmvx().s[3]++;cov_1onu16fc4().s[23]++;eval("\n\nvar _s = $RefreshSig$();\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isInAmpMode = isInAmpMode;\nexports.useAmp = useAmp;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _ampContext = __webpack_require__(/*! ./amp-context */ \"./node_modules/next/dist/shared/lib/amp-context.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction isInAmpMode() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ampFirst = _ref.ampFirst,\n      ampFirst = _ref$ampFirst === void 0 ? false : _ref$ampFirst,\n      _ref$hybrid = _ref.hybrid,\n      hybrid = _ref$hybrid === void 0 ? false : _ref$hybrid,\n      _ref$hasQuery = _ref.hasQuery,\n      hasQuery = _ref$hasQuery === void 0 ? false : _ref$hasQuery;\n\n  return ampFirst || hybrid && hasQuery;\n}\n\nfunction useAmp() {\n  _s();\n\n  // Don't assign the context value to a variable to save bytes\n  return isInAmpMode(_react[\"default\"].useContext(_ampContext.AmpStateContext));\n}\n\n_s(useAmp, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nif (typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) {\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOzs7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELG1CQUFBLEdBQXNCRSxXQUF0QjtBQUNBRixjQUFBLEdBQWlCRyxNQUFqQjs7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDRDQUFELENBQVIsQ0FBbkM7O0FBQ0EsSUFBSUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLHlFQUFELENBQXpCOztBQUNBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQztBQUNqQyxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFDakMsZUFBU0E7QUFEd0IsR0FBckM7QUFHSDs7QUFDRCxTQUFTTixXQUFULEdBQW9GO0FBQUEsaUZBQUosRUFBSTtBQUFBLDJCQUE3RFEsUUFBNkQ7QUFBQSxNQUE3REEsUUFBNkQsOEJBQW5ELEtBQW1EO0FBQUEseUJBQTNDQyxNQUEyQztBQUFBLE1BQTNDQSxNQUEyQyw0QkFBbkMsS0FBbUM7QUFBQSwyQkFBM0JDLFFBQTJCO0FBQUEsTUFBM0JBLFFBQTJCLDhCQUFqQixLQUFpQjs7QUFDaEYsU0FBT0YsUUFBUSxJQUFJQyxNQUFNLElBQUlDLFFBQTdCO0FBQ0g7O0FBQ0QsU0FBU1QsTUFBVCxHQUFrQjtBQUFBOztBQUNkO0FBQ0EsU0FBT0QsV0FBVyxDQUFDRSxNQUFNLFdBQU4sQ0FBZVMsVUFBZixDQUEwQk4sV0FBVyxDQUFDTyxlQUF0QyxDQUFELENBQWxCO0FBQ0g7O0dBSFFYLE07O0FBS1QsSUFBSSxPQUFPSCxPQUFPLFdBQWQsS0FBMkIsVUFBM0IsSUFBMEMsT0FBT0EsT0FBTyxXQUFkLEtBQTJCLFFBQTNCLElBQXVDQSxPQUFPLFdBQVAsS0FBb0IsSUFBekcsRUFBZ0g7QUFDOUdGLEVBQUFBLE1BQU0sQ0FBQ2lCLE1BQVAsQ0FBY2YsT0FBTyxXQUFyQixFQUErQkEsT0FBL0I7QUFDQWdCLEVBQUFBLE1BQU0sQ0FBQ2hCLE9BQVAsR0FBaUJBLE9BQU8sV0FBeEI7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLmpzPzVlNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzSW5BbXBNb2RlID0gaXNJbkFtcE1vZGU7XG5leHBvcnRzLnVzZUFtcCA9IHVzZUFtcDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2FtcENvbnRleHQgPSByZXF1aXJlKFwiLi9hbXAtY29udGV4dFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlzSW5BbXBNb2RlKHsgYW1wRmlyc3QgPWZhbHNlICwgaHlicmlkID1mYWxzZSAsIGhhc1F1ZXJ5ID1mYWxzZSAsICB9ID0ge30pIHtcbiAgICByZXR1cm4gYW1wRmlyc3QgfHwgaHlicmlkICYmIGhhc1F1ZXJ5O1xufVxuZnVuY3Rpb24gdXNlQW1wKCkge1xuICAgIC8vIERvbid0IGFzc2lnbiB0aGUgY29udGV4dCB2YWx1ZSB0byBhIHZhcmlhYmxlIHRvIHNhdmUgYnl0ZXNcbiAgICByZXR1cm4gaXNJbkFtcE1vZGUoX3JlYWN0LmRlZmF1bHQudXNlQ29udGV4dChfYW1wQ29udGV4dC5BbXBTdGF0ZUNvbnRleHQpKTtcbn1cblxuaWYgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpIHtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW1wLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzSW5BbXBNb2RlIiwidXNlQW1wIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYW1wQ29udGV4dCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJhbXBGaXJzdCIsImh5YnJpZCIsImhhc1F1ZXJ5IiwidXNlQ29udGV4dCIsIkFtcFN0YXRlQ29udGV4dCIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/amp.js\n");/***/},/***/"./node_modules/next/dist/shared/lib/head.js":/*!***************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/head.js ***!
  \***************************************************/ /***/function(module,exports,__webpack_require__){cov_1onu16fc4().f[5]++;cov_1onu16fc4().s[24]++;cov_1kdxb2qmvx().f[3]++;cov_1onu16fc4().s[25]++;cov_1kdxb2qmvx().s[4]++;cov_1onu16fc4().s[26]++;eval("\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.defaultHead = defaultHead;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _sideEffect = _interopRequireDefault(__webpack_require__(/*! ./side-effect */ \"./node_modules/next/dist/shared/lib/side-effect.js\"));\n\nvar _ampContext = __webpack_require__(/*! ./amp-context */ \"./node_modules/next/dist/shared/lib/amp-context.js\");\n\nvar _headManagerContext = __webpack_require__(/*! ./head-manager-context */ \"./node_modules/next/dist/shared/lib/head-manager-context.js\");\n\nvar _amp = __webpack_require__(/*! ./amp */ \"./node_modules/next/dist/shared/lib/amp.js\");\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/next/dist/shared/lib/utils.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction defaultHead() {\n  var inAmpMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var head = [/*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n    charSet: \"utf-8\"\n  })];\n\n  if (!inAmpMode) {\n    head.push( /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width\"\n    }));\n  }\n\n  return head;\n}\n\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list;\n  } // Adds support for React.Fragment\n\n\n  if (child.type === _react[\"default\"].Fragment) {\n    return list.concat(_react[\"default\"].Children.toArray(child.props.children).reduce(function (fragmentList, fragmentChild) {\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n        return fragmentList;\n      }\n\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n\n  return list.concat(child);\n}\n\nvar METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\n\nfunction unique() {\n  var keys = new Set();\n  var tags = new Set();\n  var metaTypes = new Set();\n  var metaCategories = {};\n  return function (h) {\n    var isUnique = true;\n    var hasKey = false;\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true;\n      var key = h.key.slice(h.key.indexOf('$') + 1);\n\n      if (keys.has(key)) {\n        isUnique = false;\n      } else {\n        keys.add(key);\n      }\n    } // eslint-disable-next-line default-case\n\n\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false;\n        } else {\n          tags.add(h.type);\n        }\n\n        break;\n\n      case 'meta':\n        for (var i = 0, len = METATYPES.length; i < len; i++) {\n          var metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false;\n            } else {\n              metaTypes.add(metatype);\n            }\n          } else {\n            var category = h.props[metatype];\n            var categories = metaCategories[metatype] || new Set();\n\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false;\n            } else {\n              categories.add(category);\n              metaCategories[metatype] = categories;\n            }\n          }\n        }\n\n        break;\n    }\n\n    return isUnique;\n  };\n}\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\n\n\nfunction reduceComponents(headElements, props) {\n  return headElements.reduce(function (list, headElement) {\n    var headElementChildren = _react[\"default\"].Children.toArray(headElement.props.children);\n\n    return list.concat(headElementChildren);\n  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map(function (c, i) {\n    var key = c.key || i;\n\n    if (false) { var newProps; }\n\n    if (true) {\n      // omit JSON-LD structured data snippets from the warning\n      if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n        var srcMessage = c.props['src'] ? \"<script> tag with src=\\\"\".concat(c.props['src'], \"\\\"\") : \"inline <script>\";\n        (0, _utils).warnOnce(\"Do not add <script> tags using next/head (see \".concat(srcMessage, \"). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component\"));\n      } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n        (0, _utils).warnOnce(\"Do not add stylesheets using next/head (see <link rel=\\\"stylesheet\\\"> tag with href=\\\"\".concat(c.props['href'], \"\\\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component\"));\n      }\n    }\n\n    return /*#__PURE__*/_react[\"default\"].cloneElement(c, {\n      key: key\n    });\n  });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\n\n\nfunction Head(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var ampState = (0, _react).useContext(_ampContext.AmpStateContext);\n  var headManager = (0, _react).useContext(_headManagerContext.HeadManagerContext);\n  return /*#__PURE__*/_react[\"default\"].createElement(_sideEffect[\"default\"], {\n    reduceComponentsToState: reduceComponents,\n    headManager: headManager,\n    inAmpMode: (0, _amp).isInAmpMode(ampState)\n  }, children);\n}\n\n_s(Head, \"sCUayZmr5V93tUjujy03KdMBCec=\");\n\n_c = Head;\nvar _default = Head;\nexports[\"default\"] = _default;\n\nif (typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) {\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Head\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/head.js\n");/***/},/***/"./node_modules/next/dist/shared/lib/side-effect.js":/*!**********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/side-effect.js ***!
  \**********************************************************/ /***/function(module,exports,__webpack_require__){cov_1onu16fc4().f[6]++;cov_1onu16fc4().s[27]++;cov_1kdxb2qmvx().f[4]++;cov_1onu16fc4().s[28]++;cov_1kdxb2qmvx().s[5]++;cov_1onu16fc4().s[29]++;eval("\n\nvar _toConsumableArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/toConsumableArray.js\");\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\");\n\nvar _assertThisInitialized = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/assertThisInitialized */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/assertThisInitialized.js\");\n\nvar _inherits = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/inherits.js\");\n\nvar _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/possibleConstructorReturn.js\");\n\nvar _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/getPrototypeOf.js\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nvar isServer = false;\n\nvar _class = /*#__PURE__*/function (_react$Component) {\n  _inherits(_class, _react$Component);\n\n  var _super = _createSuper(_class);\n\n  function _class(props) {\n    var _this;\n\n    _classCallCheck(this, _class);\n\n    _this = _super.call(this, props);\n\n    _this.emitChange = function () {\n      if (_this._hasHeadManager) {\n        _this.props.headManager.updateHead(_this.props.reduceComponentsToState(_toConsumableArray(_this.props.headManager.mountedInstances), _this.props));\n      }\n    };\n\n    _this._hasHeadManager = _this.props.headManager && _this.props.headManager.mountedInstances;\n\n    if (isServer && _this._hasHeadManager) {\n      _this.props.headManager.mountedInstances.add(_assertThisInitialized(_this));\n\n      _this.emitChange();\n    }\n\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._hasHeadManager) {\n        this.props.headManager.mountedInstances.add(this);\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.emitChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._hasHeadManager) {\n        this.props.headManager.mountedInstances[\"delete\"](this);\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return _class;\n}(_react.Component);\n\nexports[\"default\"] = _class;\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvc2lkZS1lZmZlY3QuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELGtCQUFBLEdBQWtCLEtBQUssQ0FBdkI7O0FBQ0EsSUFBSUUsTUFBTSxHQUFHQyx1QkFBdUIsQ0FBQ0MsbUJBQU8sQ0FBQyw0Q0FBRCxDQUFSLENBQXBDOztBQUNBLFNBQVNELHVCQUFULENBQWlDRSxHQUFqQyxFQUFzQztBQUNsQyxNQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBZixFQUEyQjtBQUN2QixXQUFPRCxHQUFQO0FBQ0gsR0FGRCxNQUVPO0FBQ0gsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsUUFBSUYsR0FBRyxJQUFJLElBQVgsRUFBaUI7QUFDYixXQUFJLElBQUlHLEdBQVIsSUFBZUgsR0FBZixFQUFtQjtBQUNmLFlBQUlQLE1BQU0sQ0FBQ1csU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDTixHQUFyQyxFQUEwQ0csR0FBMUMsQ0FBSixFQUFvRDtBQUNoRCxjQUFJSSxJQUFJLEdBQUdkLE1BQU0sQ0FBQ0MsY0FBUCxJQUF5QkQsTUFBTSxDQUFDZSx3QkFBaEMsR0FBMkRmLE1BQU0sQ0FBQ2Usd0JBQVAsQ0FBZ0NSLEdBQWhDLEVBQXFDRyxHQUFyQyxDQUEzRCxHQUF1RyxFQUFsSDs7QUFDQSxjQUFJSSxJQUFJLENBQUNFLEdBQUwsSUFBWUYsSUFBSSxDQUFDRyxHQUFyQixFQUEwQjtBQUN0QmpCLFlBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQlEsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DSSxJQUFuQztBQUNILFdBRkQsTUFFTztBQUNITCxZQUFBQSxNQUFNLENBQUNDLEdBQUQsQ0FBTixHQUFjSCxHQUFHLENBQUNHLEdBQUQsQ0FBakI7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7QUFDREQsSUFBQUEsTUFBTSxXQUFOLEdBQWlCRixHQUFqQjtBQUNBLFdBQU9FLE1BQVA7QUFDSDtBQUNKOztBQUNELElBQU1TLFFBQVEsUUFBZDs7SUFDTUMsTTs7Ozs7QUFDRixrQkFBWUMsS0FBWixFQUFrQjtBQUFBOztBQUFBOztBQUNkLDhCQUFNQSxLQUFOOztBQUNBLFVBQUtDLFVBQUwsR0FBa0IsWUFBSTtBQUNsQixVQUFJLE1BQUtDLGVBQVQsRUFBMEI7QUFDdEIsY0FBS0YsS0FBTCxDQUFXRyxXQUFYLENBQXVCQyxVQUF2QixDQUFrQyxNQUFLSixLQUFMLENBQVdLLHVCQUFYLG9CQUMzQixNQUFLTCxLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQURJLEdBRS9CLE1BQUtOLEtBRjBCLENBQWxDO0FBR0g7QUFDSixLQU5EOztBQU9BLFVBQUtFLGVBQUwsR0FBdUIsTUFBS0YsS0FBTCxDQUFXRyxXQUFYLElBQTBCLE1BQUtILEtBQUwsQ0FBV0csV0FBWCxDQUF1QkcsZ0JBQXhFOztBQUNBLFFBQUlSLFFBQVEsSUFBSSxNQUFLSSxlQUFyQixFQUFzQztBQUNsQyxZQUFLRixLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQUF2QixDQUF3Q0MsR0FBeEM7O0FBQ0EsWUFBS04sVUFBTDtBQUNIOztBQWJhO0FBY2pCOzs7O1dBQ0QsNkJBQW9CO0FBQ2hCLFVBQUksS0FBS0MsZUFBVCxFQUEwQjtBQUN0QixhQUFLRixLQUFMLENBQVdHLFdBQVgsQ0FBdUJHLGdCQUF2QixDQUF3Q0MsR0FBeEMsQ0FBNEMsSUFBNUM7QUFDSDs7QUFDRCxXQUFLTixVQUFMO0FBQ0g7OztXQUNELDhCQUFxQjtBQUNqQixXQUFLQSxVQUFMO0FBQ0g7OztXQUNELGdDQUF1QjtBQUNuQixVQUFJLEtBQUtDLGVBQVQsRUFBMEI7QUFDdEIsYUFBS0YsS0FBTCxDQUFXRyxXQUFYLENBQXVCRyxnQkFBdkIsV0FBK0MsSUFBL0M7QUFDSDs7QUFDRCxXQUFLTCxVQUFMO0FBQ0g7OztXQUNELGtCQUFTO0FBQ0wsYUFBTyxJQUFQO0FBQ0g7Ozs7RUFqQ2dCakIsTUFBTSxDQUFDd0IsUzs7QUFtQzVCMUIsa0JBQUEsR0FBa0JpQixNQUFsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvc2lkZS1lZmZlY3QuanM/NDA4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gICAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXdPYmogPSB7fTtcbiAgICAgICAgaWYgKG9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBvYmope1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld09iai5kZWZhdWx0ID0gb2JqO1xuICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgIH1cbn1cbmNvbnN0IGlzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG5jbGFzcyBfY2xhc3MgZXh0ZW5kcyBfcmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5lbWl0Q2hhbmdlID0gKCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNIZWFkTWFuYWdlcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIudXBkYXRlSGVhZCh0aGlzLnByb3BzLnJlZHVjZUNvbXBvbmVudHNUb1N0YXRlKFtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzXG4gICAgICAgICAgICAgICAgXSwgdGhpcy5wcm9wcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9oYXNIZWFkTWFuYWdlciA9IHRoaXMucHJvcHMuaGVhZE1hbmFnZXIgJiYgdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzO1xuICAgICAgICBpZiAoaXNTZXJ2ZXIgJiYgdGhpcy5faGFzSGVhZE1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXMuZGVsZXRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lkZS1lZmZlY3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJpc1NlcnZlciIsIl9jbGFzcyIsInByb3BzIiwiZW1pdENoYW5nZSIsIl9oYXNIZWFkTWFuYWdlciIsImhlYWRNYW5hZ2VyIiwidXBkYXRlSGVhZCIsInJlZHVjZUNvbXBvbmVudHNUb1N0YXRlIiwibW91bnRlZEluc3RhbmNlcyIsImFkZCIsIkNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/side-effect.js\n");/***/}}]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZWxmIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXZhbCJdLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc19uZXh0X2Rpc3RfcGFnZXNfX2Vycm9yX2pzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIEFUVEVOVElPTjogQW4gXCJldmFsLXNvdXJjZS1tYXBcIiBkZXZ0b29sIGhhcyBiZWVuIHVzZWQuXG4gKiBUaGlzIGRldnRvb2wgaXMgbmVpdGhlciBtYWRlIGZvciBwcm9kdWN0aW9uIG5vciBmb3IgcmVhZGFibGUgb3V0cHV0IGZpbGVzLlxuICogSXQgdXNlcyBcImV2YWwoKVwiIGNhbGxzIHRvIGNyZWF0ZSBhIHNlcGFyYXRlIHNvdXJjZSBmaWxlIHdpdGggYXR0YWNoZWQgU291cmNlTWFwcyBpbiB0aGUgYnJvd3NlciBkZXZ0b29scy5cbiAqIElmIHlvdSBhcmUgdHJ5aW5nIHRvIHJlYWQgdGhlIG91dHB1dCBmaWxlLCBzZWxlY3QgYSBkaWZmZXJlbnQgZGV2dG9vbCAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2RldnRvb2wvKVxuICogb3IgZGlzYWJsZSB0aGUgZGVmYXVsdCBkZXZ0b29sIHdpdGggXCJkZXZ0b29sOiBmYWxzZVwiLlxuICogSWYgeW91IGFyZSBsb29raW5nIGZvciBwcm9kdWN0aW9uLXJlYWR5IG91dHB1dCBmaWxlcywgc2VlIG1vZGU6IFwicHJvZHVjdGlvblwiIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vbW9kZS8pLlxuICovXG4oc2VsZltcIndlYnBhY2tDaHVua19OX0VcIl0gPSBzZWxmW1wid2VicGFja0NodW5rX05fRVwiXSB8fCBbXSkucHVzaChbW1wibm9kZV9tb2R1bGVzX25leHRfZGlzdF9wYWdlc19fZXJyb3JfanNcIl0se1xuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9wYWdlcy9fZXJyb3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvcGFnZXMvX2Vycm9yLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJcXG5cXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXFxcIik7XFxuXFxudmFyIF9jcmVhdGVDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1xcXCIpO1xcblxcbnZhciBfaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cyAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanNcXFwiKTtcXG5cXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzXFxcIik7XFxuXFxudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qc1xcXCIpO1xcblxcbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcXFwidW5kZWZpbmVkXFxcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXFxcImZ1bmN0aW9uXFxcIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXFxcIl9fZXNNb2R1bGVcXFwiLCAoe1xcbiAgdmFsdWU6IHRydWVcXG59KSk7XFxuZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdID0gdm9pZCAwO1xcblxcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovIFxcXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qc1xcXCIpKTtcXG5cXG52YXIgX2hlYWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3NoYXJlZC9saWIvaGVhZCAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaGVhZC5qc1xcXCIpKTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcXG4gICAgXFxcImRlZmF1bHRcXFwiOiBvYmpcXG4gIH07XFxufVxcblxcbnZhciBzdGF0dXNDb2RlcyA9IHtcXG4gIDQwMDogJ0JhZCBSZXF1ZXN0JyxcXG4gIDQwNDogJ1RoaXMgcGFnZSBjb3VsZCBub3QgYmUgZm91bmQnLFxcbiAgNDA1OiAnTWV0aG9kIE5vdCBBbGxvd2VkJyxcXG4gIDUwMDogJ0ludGVybmFsIFNlcnZlciBFcnJvcidcXG59O1xcblxcbmZ1bmN0aW9uIF9nZXRJbml0aWFsUHJvcHMoX3JlZikge1xcbiAgdmFyIHJlcyA9IF9yZWYucmVzLFxcbiAgICAgIGVyciA9IF9yZWYuZXJyO1xcbiAgdmFyIHN0YXR1c0NvZGUgPSByZXMgJiYgcmVzLnN0YXR1c0NvZGUgPyByZXMuc3RhdHVzQ29kZSA6IGVyciA/IGVyci5zdGF0dXNDb2RlIDogNDA0O1xcbiAgcmV0dXJuIHtcXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZVxcbiAgfTtcXG59XFxuXFxudmFyIEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfcmVhY3QkZGVmYXVsdCRDb21wb24pIHtcXG4gIF9pbmhlcml0cyhFcnJvciwgX3JlYWN0JGRlZmF1bHQkQ29tcG9uKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRXJyb3IpO1xcblxcbiAgZnVuY3Rpb24gRXJyb3IoKSB7XFxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFcnJvcik7XFxuXFxuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gIH1cXG5cXG4gIF9jcmVhdGVDbGFzcyhFcnJvciwgW3tcXG4gICAga2V5OiBcXFwicmVuZGVyXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcXG4gICAgICB2YXIgc3RhdHVzQ29kZSA9IHRoaXMucHJvcHMuc3RhdHVzQ29kZTtcXG4gICAgICB2YXIgdGl0bGUgPSB0aGlzLnByb3BzLnRpdGxlIHx8IHN0YXR1c0NvZGVzW3N0YXR1c0NvZGVdIHx8ICdBbiB1bmV4cGVjdGVkIGVycm9yIGhhcyBvY2N1cnJlZCc7XFxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCB7XFxuICAgICAgICBzdHlsZTogc3R5bGVzLmVycm9yXFxuICAgICAgfSwgLyojX19QVVJFX18qL19yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLmNyZWF0ZUVsZW1lbnQoX2hlYWRbXFxcImRlZmF1bHRcXFwiXSwgbnVsbCwgLyojX19QVVJFX18qL19yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLmNyZWF0ZUVsZW1lbnQoXFxcInRpdGxlXFxcIiwgbnVsbCwgc3RhdHVzQ29kZSA/IFxcXCJcXFwiLmNvbmNhdChzdGF0dXNDb2RlLCBcXFwiOiBcXFwiKS5jb25jYXQodGl0bGUpIDogJ0FwcGxpY2F0aW9uIGVycm9yOiBhIGNsaWVudC1zaWRlIGV4Y2VwdGlvbiBoYXMgb2NjdXJyZWQnKSksIC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCBudWxsLCAvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlRWxlbWVudChcXFwic3R5bGVcXFwiLCB7XFxuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xcbiAgICAgICAgICBfX2h0bWw6IFxcXCJcXFxcbiAgICAgICAgICAgICAgICBib2R5IHsgbWFyZ2luOiAwOyBjb2xvcjogIzAwMDsgYmFja2dyb3VuZDogI2ZmZjsgfVxcXFxuICAgICAgICAgICAgICAgIC5uZXh0LWVycm9yLWgxIHtcXFxcbiAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgLjMpO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBAbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxcXG4gICAgICAgICAgICAgICAgICBib2R5IHsgY29sb3I6ICNmZmY7IGJhY2tncm91bmQ6ICMwMDA7IH1cXFxcbiAgICAgICAgICAgICAgICAgIC5uZXh0LWVycm9yLWgxIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAuMyk7XFxcXG4gICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfVxcXCJcXG4gICAgICAgIH1cXG4gICAgICB9KSwgc3RhdHVzQ29kZSA/IC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KFxcXCJoMVxcXCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogXFxcIm5leHQtZXJyb3ItaDFcXFwiLFxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5oMVxcbiAgICAgIH0sIHN0YXR1c0NvZGUpIDogbnVsbCwgLyojX19QVVJFX18qL19yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIsIHtcXG4gICAgICAgIHN0eWxlOiBzdHlsZXMuZGVzY1xcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KFxcXCJoMlxcXCIsIHtcXG4gICAgICAgIHN0eWxlOiBzdHlsZXMuaDJcXG4gICAgICB9LCB0aGlzLnByb3BzLnRpdGxlIHx8IHN0YXR1c0NvZGUgPyB0aXRsZSA6IC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jcmVhdGVFbGVtZW50KF9yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLkZyYWdtZW50LCBudWxsLCBcXFwiQXBwbGljYXRpb24gZXJyb3I6IGEgY2xpZW50LXNpZGUgZXhjZXB0aW9uIGhhcyBvY2N1cnJlZCAoc2VlIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yIG1vcmUgaW5mb3JtYXRpb24pXFxcIiksIFxcXCIuXFxcIikpKSk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBFcnJvcjtcXG59KF9yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLkNvbXBvbmVudCk7XFxuXFxuZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdID0gRXJyb3I7XFxuRXJyb3IuZGlzcGxheU5hbWUgPSAnRXJyb3JQYWdlJztcXG5FcnJvci5nZXRJbml0aWFsUHJvcHMgPSBfZ2V0SW5pdGlhbFByb3BzO1xcbkVycm9yLm9yaWdHZXRJbml0aWFsUHJvcHMgPSBfZ2V0SW5pdGlhbFByb3BzO1xcbnZhciBzdHlsZXMgPSB7XFxuICBlcnJvcjoge1xcbiAgICBmb250RmFtaWx5OiAnLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBSb2JvdG8sIFxcXCJTZWdvZSBVSVxcXCIsIFxcXCJGaXJhIFNhbnNcXFwiLCBBdmVuaXIsIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIFxcXCJMdWNpZGEgR3JhbmRlXFxcIiwgc2Fucy1zZXJpZicsXFxuICAgIGhlaWdodDogJzEwMHZoJyxcXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xcbiAgfSxcXG4gIGRlc2M6IHtcXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXFxuICAgIHRleHRBbGlnbjogJ2xlZnQnLFxcbiAgICBsaW5lSGVpZ2h0OiAnNDlweCcsXFxuICAgIGhlaWdodDogJzQ5cHgnLFxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xcbiAgfSxcXG4gIGgxOiB7XFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxcbiAgICBtYXJnaW46IDAsXFxuICAgIG1hcmdpblJpZ2h0OiAnMjBweCcsXFxuICAgIHBhZGRpbmc6ICcxMHB4IDIzcHggMTBweCAwJyxcXG4gICAgZm9udFNpemU6ICcyNHB4JyxcXG4gICAgZm9udFdlaWdodDogNTAwLFxcbiAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xcbiAgfSxcXG4gIGgyOiB7XFxuICAgIGZvbnRTaXplOiAnMTRweCcsXFxuICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxcbiAgICBsaW5lSGVpZ2h0OiAnaW5oZXJpdCcsXFxuICAgIG1hcmdpbjogMCxcXG4gICAgcGFkZGluZzogMFxcbiAgfVxcbn07XFxuXFxuO1xcbiAgICAvLyBXcmFwcGVkIGluIGFuIElJRkUgdG8gYXZvaWQgcG9sbHV0aW5nIHRoZSBnbG9iYWwgc2NvcGVcXG4gICAgO1xcbiAgICAoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIF9hLCBfYjtcXG4gICAgICAgIC8vIExlZ2FjeSBDU1MgaW1wbGVtZW50YXRpb25zIHdpbGwgYGV2YWxgIGJyb3dzZXIgY29kZSBpbiBhIE5vZGUuanMgY29udGV4dFxcbiAgICAgICAgLy8gdG8gZXh0cmFjdCBDU1MuIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgbmVlZCB0byBjaGVjayB3ZSdyZSBpbiBhXFxuICAgICAgICAvLyBicm93c2VyIGNvbnRleHQgYmVmb3JlIGNvbnRpbnVpbmcuXFxuICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmXFxuICAgICAgICAgICAgLy8gQU1QIC8gTm8tSlMgbW9kZSBkb2VzIG5vdCBpbmplY3QgdGhlc2UgaGVscGVyczpcXG4gICAgICAgICAgICAnJFJlZnJlc2hIZWxwZXJzJCcgaW4gc2VsZikge1xcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxcbiAgICAgICAgICAgIHZhciBjdXJyZW50RXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxcbiAgICAgICAgICAgIHZhciBwcmV2RXhwb3J0cyA9IChfYiA9IChfYSA9IG1vZHVsZS5ob3QuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByZXZFeHBvcnRzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xcbiAgICAgICAgICAgIC8vIFRoaXMgY2Fubm90IGhhcHBlbiBpbiBNYWluVGVtcGxhdGUgYmVjYXVzZSB0aGUgZXhwb3J0cyBtaXNtYXRjaCBiZXR3ZWVuXFxuICAgICAgICAgICAgLy8gdGVtcGxhdGluZyBhbmQgZXhlY3V0aW9uLlxcbiAgICAgICAgICAgIHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5yZWdpc3RlckV4cG9ydHNGb3JSZWFjdFJlZnJlc2goY3VycmVudEV4cG9ydHMsIG1vZHVsZS5pZCk7XFxuICAgICAgICAgICAgLy8gQSBtb2R1bGUgY2FuIGJlIGFjY2VwdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gaXRzIGV4cG9ydHMsIGUuZy4gd2hlblxcbiAgICAgICAgICAgIC8vIGl0IGlzIGEgUmVmcmVzaCBCb3VuZGFyeS5cXG4gICAgICAgICAgICBpZiAoc2VsZi4kUmVmcmVzaEhlbHBlcnMkLmlzUmVhY3RSZWZyZXNoQm91bmRhcnkoY3VycmVudEV4cG9ydHMpKSB7XFxuICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIHByZXZpb3VzIGV4cG9ydHMgb24gdXBkYXRlIHNvIHdlIGNhbiBjb21wYXJlIHRoZSBib3VuZGFyeVxcbiAgICAgICAgICAgICAgICAvLyBzaWduYXR1cmVzLlxcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJldkV4cG9ydHMgPSBjdXJyZW50RXhwb3J0cztcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIC8vIFVuY29uZGl0aW9uYWxseSBhY2NlcHQgYW4gdXBkYXRlIHRvIHRoaXMgbW9kdWxlLCB3ZSdsbCBjaGVjayBpZiBpdCdzXFxuICAgICAgICAgICAgICAgIC8vIHN0aWxsIGEgUmVmcmVzaCBCb3VuZGFyeSBsYXRlci5cXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBpbXBvcnRNZXRhIGlzIHJlcGxhY2VkIGluIHRoZSBsb2FkZXJcXG4gICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5hY2NlcHQoKTtcXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmaWVsZCBpcyBzZXQgd2hlbiB0aGUgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGlzIG1vZHVsZSB3YXMgYVxcbiAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIEJvdW5kYXJ5LCBsZXR0aW5nIHVzIGtub3cgd2UgbmVlZCB0byBjaGVjayBmb3IgaW52YWxpZGF0aW9uIG9yXFxuICAgICAgICAgICAgICAgIC8vIGVucXVldWUgYW4gdXBkYXRlLlxcbiAgICAgICAgICAgICAgICBpZiAocHJldkV4cG9ydHMgIT09IG51bGwpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYm91bmRhcnkgY2FuIGJlY29tZSBpbmVsaWdpYmxlIGlmIGl0cyBleHBvcnRzIGFyZSBpbmNvbXBhdGlibGVcXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpdGggdGhlIHByZXZpb3VzIGV4cG9ydHMuXFxuICAgICAgICAgICAgICAgICAgICAvL1xcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHlvdSBhZGQvcmVtb3ZlL2NoYW5nZSBleHBvcnRzLCB3ZSdsbCB3YW50IHRvXFxuICAgICAgICAgICAgICAgICAgICAvLyByZS1leGVjdXRlIHRoZSBpbXBvcnRpbmcgbW9kdWxlcywgYW5kIGZvcmNlIHRob3NlIGNvbXBvbmVudHMgdG9cXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlci4gU2ltaWxhcmx5LCBpZiB5b3UgY29udmVydCBhIGNsYXNzIGNvbXBvbmVudCB0byBhXFxuICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiwgd2Ugd2FudCB0byBpbnZhbGlkYXRlIHRoZSBib3VuZGFyeS5cXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuc2hvdWxkSW52YWxpZGF0ZVJlYWN0UmVmcmVzaEJvdW5kYXJ5KHByZXZFeHBvcnRzLCBjdXJyZW50RXhwb3J0cykpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zY2hlZHVsZVVwZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBqdXN0IGV4ZWN1dGVkIHRoZSBjb2RlIGZvciB0aGUgbW9kdWxlLCBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlXFxuICAgICAgICAgICAgICAgIC8vIG5ldyBleHBvcnRzIG1hZGUgaXQgaW5lbGlnaWJsZSBmb3IgYmVpbmcgYSBib3VuZGFyeS5cXG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSBjYXJlIGFib3V0IHRoZSBjYXNlIHdoZW4gd2Ugd2VyZSBfcHJldmlvdXNseV8gYSBib3VuZGFyeSxcXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBhbHJlYWR5IGFjY2VwdGVkIHRoaXMgdXBkYXRlIChhY2NpZGVudGFsIHNpZGUgZWZmZWN0KS5cXG4gICAgICAgICAgICAgICAgdmFyIGlzTm9Mb25nZXJBQm91bmRhcnkgPSBwcmV2RXhwb3J0cyAhPT0gbnVsbDtcXG4gICAgICAgICAgICAgICAgaWYgKGlzTm9Mb25nZXJBQm91bmRhcnkpIHtcXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9KSgpO1xcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXViMlJsWDIxdlpIVnNaWE12Ym1WNGRDOWthWE4wTDNCaFoyVnpMMTlsY25KdmNpNXFjeTVxY3lJc0ltMWhjSEJwYm1keklqb2lRVUZCWVRzN096czdPenM3T3pzN096czdPenRCUVVOaVFTdzRRMEZCTmtNN1FVRkRla05ITEVWQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVSclF5eERRVUUzUXp0QlFVZEJSQ3hyUWtGQlFTeEhRVUZyUWl4TFFVRkxMRU5CUVhaQ096dEJRVU5CTEVsQlFVbEZMRTFCUVUwc1IwRkJSME1zYzBKQlFYTkNMRU5CUVVORExHMUNRVUZQTEVOQlFVTXNORU5CUVVRc1EwRkJVaXhEUVVGdVF6czdRVUZEUVN4SlFVRkpReXhMUVVGTExFZEJRVWRHTEhOQ1FVRnpRaXhEUVVGRFF5eHRRa0ZCVHl4RFFVRkRMSFZGUVVGRUxFTkJRVklzUTBGQmJFTTdPMEZCUTBFc1UwRkJVMFFzYzBKQlFWUXNRMEZCWjBOSExFZEJRV2hETEVWQlFYRkRPMEZCUTJwRExGTkJRVTlCTEVkQlFVY3NTVUZCU1VFc1IwRkJSeXhEUVVGRFF5eFZRVUZZTEVkQlFYZENSQ3hIUVVGNFFpeEhRVUU0UWp0QlFVTnFReXhsUVVGVFFUdEJRVVIzUWl4SFFVRnlRenRCUVVkSU96dEJRVU5FTEVsQlFVMUZMRmRCUVZjc1IwRkJSenRCUVVOb1FpeFBRVUZMTEdGQlJGYzdRVUZGYUVJc1QwRkJTeXc0UWtGR1Z6dEJRVWRvUWl4UFFVRkxMRzlDUVVoWE8wRkJTV2hDTEU5QlFVczdRVUZLVnl4RFFVRndRanM3UVVGTlFTeFRRVUZUUXl4blFrRkJWQ3hQUVVFd1F6dEJRVUZCTEUxQlFXUkRMRWRCUVdNc1VVRkJaRUVzUjBGQll6dEJRVUZCTEUxQlFWSkRMRWRCUVZFc1VVRkJVa0VzUjBGQlVUdEJRVU4wUXl4TlFVRk5ReXhWUVVGVkxFZEJRVWRHTEVkQlFVY3NTVUZCU1VFc1IwRkJSeXhEUVVGRFJTeFZRVUZZTEVkQlFYZENSaXhIUVVGSExFTkJRVU5GTEZWQlFUVkNMRWRCUVhsRFJDeEhRVUZITEVkQlFVZEJMRWRCUVVjc1EwRkJRME1zVlVGQlVDeEhRVUZ2UWl4SFFVRnVSanRCUVVOQkxGTkJRVTg3UVVGRFNFRXNTVUZCUVVFc1ZVRkJWU3hGUVVGV1FUdEJRVVJITEVkQlFWQTdRVUZIU0RzN1NVRkRTME1zU3pzN096czdPenM3T3pzN096dFhRVU5HTEd0Q1FVRlRPMEZCUTB3c1ZVRkJVVVFzVlVGQlVpeEhRVUYzUWl4TFFVRkxSU3hMUVVFM1FpeERRVUZSUml4VlFVRlNPMEZCUTBFc1ZVRkJUVWNzUzBGQlN5eEhRVUZITEV0QlFVdEVMRXRCUVV3c1EwRkJWME1zUzBGQldDeEpRVUZ2UWxBc1YwRkJWeXhEUVVGRFNTeFZRVUZFTEVOQlFTOUNMRWxCUVN0RExHdERRVUUzUkR0QlFVTkJMR0ZCUVU4c1lVRkJZMVlzVFVGQlRTeFhRVUZPTEVOQlFXVmpMR0ZCUVdZc1EwRkJOa0lzUzBGQk4wSXNSVUZCYjBNN1FVRkRja1JETEZGQlFVRkJMRXRCUVVzc1JVRkJSVU1zVFVGQlRTeERRVUZEUXp0QlFVUjFReXhQUVVGd1F5eEZRVVZzUWl4aFFVRmpha0lzVFVGQlRTeFhRVUZPTEVOQlFXVmpMR0ZCUVdZc1EwRkJOa0pZTEV0QlFVc3NWMEZCYkVNc1JVRkJORU1zU1VGQk5VTXNSVUZCYTBRc1lVRkJZMGdzVFVGQlRTeFhRVUZPTEVOQlFXVmpMR0ZCUVdZc1EwRkJOa0lzVDBGQk4wSXNSVUZCYzBNc1NVRkJkRU1zUlVGQk5FTktMRlZCUVZVc1lVRkJUVUVzVlVGQlRpeGxRVUZ4UWtjc1MwRkJja0lzU1VGQkswSXNlVVJCUVhKR0xFTkJRV2hGTEVOQlJra3NSVUZGT0Uwc1lVRkJZMklzVFVGQlRTeFhRVUZPTEVOQlFXVmpMR0ZCUVdZc1EwRkJOa0lzUzBGQk4wSXNSVUZCYjBNc1NVRkJjRU1zUlVGQk1FTXNZVUZCWTJRc1RVRkJUU3hYUVVGT0xFTkJRV1ZqTEdGQlFXWXNRMEZCTmtJc1QwRkJOMElzUlVGQmMwTTdRVUZETTFWSkxGRkJRVUZCTEhWQ1FVRjFRaXhGUVVGRk8wRkJRM0pDUXl4VlFVRkJRU3hOUVVGTk8wRkJSR1U3UVVGRWExUXNUMEZCZEVNc1EwRkJlRVFzUlVGak4wOVVMRlZCUVZVc1IwRkJSeXhoUVVGalZpeE5RVUZOTEZkQlFVNHNRMEZCWldNc1lVRkJaaXhEUVVFMlFpeEpRVUUzUWl4RlFVRnRRenRCUVVNNVJFMHNVVUZCUVVFc1UwRkJVeXhGUVVGRkxHVkJSRzFFTzBGQlJUbEVUQ3hSUVVGQlFTeExRVUZMTEVWQlFVVkRMRTFCUVUwc1EwRkJRMHM3UVVGR1owUXNUMEZCYmtNc1JVRkhOVUpZTEZWQlNEUkNMRU5CUVdwQ0xFZEJSMGNzU1VGcVFtZFBMRVZCYVVJeFRpeGhRVUZqVml4TlFVRk5MRmRCUVU0c1EwRkJaV01zWVVGQlppeERRVUUyUWl4TFFVRTNRaXhGUVVGdlF6dEJRVU55UlVNc1VVRkJRVUVzUzBGQlN5eEZRVUZGUXl4TlFVRk5MRU5CUVVOTk8wRkJSSFZFTEU5QlFYQkRMRVZCUld4RExHRkJRV04wUWl4TlFVRk5MRmRCUVU0c1EwRkJaV01zWVVGQlppeERRVUUyUWl4SlFVRTNRaXhGUVVGdFF6dEJRVU5vUkVNc1VVRkJRVUVzUzBGQlN5eEZRVUZGUXl4TlFVRk5MRU5CUVVOUE8wRkJSR3RETEU5QlFXNURMRVZCUldRc1MwRkJTMWdzUzBGQlRDeERRVUZYUXl4TFFVRllMRWxCUVc5Q1NDeFZRVUZ3UWl4SFFVRnBRMGNzUzBGQmFrTXNSMEZCZVVNc1lVRkJZMklzVFVGQlRTeFhRVUZPTEVOQlFXVmpMR0ZCUVdZc1EwRkJOa0prTEUxQlFVMHNWMEZCVGl4RFFVRmxkMElzVVVGQk5VTXNSVUZCYzBRc1NVRkJkRVFzUlVGQk5FUXNkMGRCUVRWRUxFTkJSbnBETEVWQlJXZE9MRWRCUm1oT0xFTkJSbTlDTEVOQmFrSTBUU3hEUVVZMVRpeERRVUZ5UWp0QlFYZENTRHM3T3p0RlFUVkNaWGhDTEUxQlFVMHNWMEZCVGl4RFFVRmxlVUlzVXpzN1FVRTRRbTVETTBJc2EwSkJRVUVzUjBGQmEwSmhMRXRCUVd4Q08wRkJRMEZCTEV0QlFVc3NRMEZCUTJVc1YwRkJUaXhIUVVGdlFpeFhRVUZ3UWp0QlFVTkJaaXhMUVVGTExFTkJRVU5uUWl4bFFVRk9MRWRCUVhkQ2NFSXNaMEpCUVhoQ08wRkJRMEZKTEV0QlFVc3NRMEZCUTJsQ0xHMUNRVUZPTEVkQlFUUkNja0lzWjBKQlFUVkNPMEZCUTBFc1NVRkJUVk1zVFVGQlRTeEhRVUZITzBGQlExaERMRVZCUVVGQkxFdEJRVXNzUlVGQlJUdEJRVU5JV1N4SlFVRkJRU3hWUVVGVkxFVkJRVVVzTWtoQlJGUTdRVUZGU0VNc1NVRkJRVUVzVFVGQlRTeEZRVUZGTEU5QlJrdzdRVUZIU0VNc1NVRkJRVUVzVTBGQlV5eEZRVUZGTEZGQlNGSTdRVUZKU0VNc1NVRkJRVUVzVDBGQlR5eEZRVUZGTEUxQlNrNDdRVUZMU0VNc1NVRkJRVUVzWVVGQllTeEZRVUZGTEZGQlRGbzdRVUZOU0VNc1NVRkJRVUVzVlVGQlZTeEZRVUZGTEZGQlRsUTdRVUZQU0VNc1NVRkJRVUVzWTBGQll5eEZRVUZGTzBGQlVHSXNSMEZFU1R0QlFWVllZaXhGUVVGQlFTeEpRVUZKTEVWQlFVVTdRVUZEUmxVc1NVRkJRVUVzVDBGQlR5eEZRVUZGTEdOQlJGQTdRVUZGUmtRc1NVRkJRVUVzVTBGQlV5eEZRVUZGTEUxQlJsUTdRVUZIUmtzc1NVRkJRVUVzVlVGQlZTeEZRVUZGTEUxQlNGWTdRVUZKUms0c1NVRkJRVUVzVFVGQlRTeEZRVUZGTEUxQlNrNDdRVUZMUms4c1NVRkJRVUVzWVVGQllTeEZRVUZGTzBGQlRHSXNSMEZXU3p0QlFXbENXR2hDTEVWQlFVRkJMRVZCUVVVc1JVRkJSVHRCUVVOQlZ5eEpRVUZCUVN4UFFVRlBMRVZCUVVVc1kwRkVWRHRCUVVWQlRTeEpRVUZCUVN4TlFVRk5MRVZCUVVVc1EwRkdVanRCUVVkQlF5eEpRVUZCUVN4WFFVRlhMRVZCUVVVc1RVRklZanRCUVVsQlF5eEpRVUZCUVN4UFFVRlBMRVZCUVVVc2EwSkJTbFE3UVVGTFFVTXNTVUZCUVVFc1VVRkJVU3hGUVVGRkxFMUJURlk3UVVGTlFVTXNTVUZCUVVFc1ZVRkJWU3hGUVVGRkxFZEJUbG83UVVGUFFVd3NTVUZCUVVFc1lVRkJZU3hGUVVGRk8wRkJVR1lzUjBGcVFrODdRVUV3UWxoa0xFVkJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVTkJhMElzU1VGQlFVRXNVVUZCVVN4RlFVRkZMRTFCUkZZN1FVRkZRVU1zU1VGQlFVRXNWVUZCVlN4RlFVRkZMRkZCUmxvN1FVRkhRVTRzU1VGQlFVRXNWVUZCVlN4RlFVRkZMRk5CU0ZvN1FVRkpRVVVzU1VGQlFVRXNUVUZCVFN4RlFVRkZMRU5CU2xJN1FVRkxRVVVzU1VGQlFVRXNUMEZCVHl4RlFVRkZPMEZCVEZRN1FVRXhRazhzUTBGQlppSXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDE5T1gwVXZMaTl1YjJSbFgyMXZaSFZzWlhNdmJtVjRkQzlrYVhOMEwzQmhaMlZ6TDE5bGNuSnZjaTVxY3o4eE9HWXlJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJQ0FnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnZG05cFpDQXdPMXh1ZG1GeUlGOXlaV0ZqZENBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvY21WeGRXbHlaU2hjSW5KbFlXTjBYQ0lwS1R0Y2JuWmhjaUJmYUdWaFpDQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2NtVnhkV2x5WlNoY0lpNHVMM05vWVhKbFpDOXNhV0l2YUdWaFpGd2lLU2s3WEc1bWRXNWpkR2x2YmlCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRzlpYWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVZ1B5QnZZbW9nT2lCN1hHNGdJQ0FnSUNBZ0lHUmxabUYxYkhRNklHOWlhbHh1SUNBZ0lIMDdYRzU5WEc1amIyNXpkQ0J6ZEdGMGRYTkRiMlJsY3lBOUlIdGNiaUFnSUNBME1EQTZJQ2RDWVdRZ1VtVnhkV1Z6ZENjc1hHNGdJQ0FnTkRBME9pQW5WR2hwY3lCd1lXZGxJR052ZFd4a0lHNXZkQ0JpWlNCbWIzVnVaQ2NzWEc0Z0lDQWdOREExT2lBblRXVjBhRzlrSUU1dmRDQkJiR3h2ZDJWa0p5eGNiaUFnSUNBMU1EQTZJQ2RKYm5SbGNtNWhiQ0JUWlhKMlpYSWdSWEp5YjNJblhHNTlPMXh1Wm5WdVkzUnBiMjRnWDJkbGRFbHVhWFJwWVd4UWNtOXdjeWg3SUhKbGN5QXNJR1Z5Y2lBZ2ZTa2dlMXh1SUNBZ0lHTnZibk4wSUhOMFlYUjFjME52WkdVZ1BTQnlaWE1nSmlZZ2NtVnpMbk4wWVhSMWMwTnZaR1VnUHlCeVpYTXVjM1JoZEhWelEyOWtaU0E2SUdWeWNpQS9JR1Z5Y2k1emRHRjBkWE5EYjJSbElEb2dOREEwTzF4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJSE4wWVhSMWMwTnZaR1ZjYmlBZ0lDQjlPMXh1ZlZ4dVkyeGhjM01nUlhKeWIzSWdaWGgwWlc1a2N5QmZjbVZoWTNRdVpHVm1ZWFZzZEM1RGIyMXdiMjVsYm5RZ2UxeHVJQ0FnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCemRHRjBkWE5EYjJSbElDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEdsMGJHVWdQU0IwYUdsekxuQnliM0J6TG5ScGRHeGxJSHg4SUhOMFlYUjFjME52WkdWelczTjBZWFIxYzBOdlpHVmRJSHg4SUNkQmJpQjFibVY0Y0dWamRHVmtJR1Z5Y205eUlHaGhjeUJ2WTJOMWNuSmxaQ2M3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaWd2S2lOZlgxQlZVa1ZmWHlvdklGOXlaV0ZqZEM1a1pXWmhkV3gwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0prYVhaY0lpd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U2SUhOMGVXeGxjeTVsY25KdmNseHVJQ0FnSUNBZ0lDQjlMQ0F2S2lOZlgxQlZVa1ZmWHlvdklGOXlaV0ZqZEM1a1pXWmhkV3gwTG1OeVpXRjBaVVZzWlcxbGJuUW9YMmhsWVdRdVpHVm1ZWFZzZEN3Z2JuVnNiQ3dnTHlvalgxOVFWVkpGWDE4cUx5QmZjbVZoWTNRdVpHVm1ZWFZzZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpZEdsMGJHVmNJaXdnYm5Wc2JDd2djM1JoZEhWelEyOWtaU0EvSUdBa2UzTjBZWFIxYzBOdlpHVjlPaUFrZTNScGRHeGxmV0FnT2lBblFYQndiR2xqWVhScGIyNGdaWEp5YjNJNklHRWdZMnhwWlc1MExYTnBaR1VnWlhoalpYQjBhVzl1SUdoaGN5QnZZMk4xY25KbFpDY3BLU3dnTHlvalgxOVFWVkpGWDE4cUx5QmZjbVZoWTNRdVpHVm1ZWFZzZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpWkdsMlhDSXNJRzUxYkd3c0lDOHFJMTlmVUZWU1JWOWZLaThnWDNKbFlXTjBMbVJsWm1GMWJIUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0luTjBlV3hsWENJc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGJtZGxjbTkxYzJ4NVUyVjBTVzV1WlhKSVZFMU1PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDE5b2RHMXNPaUJnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VTQjdJRzFoY21kcGJqb2dNRHNnWTI5c2IzSTZJQ013TURBN0lHSmhZMnRuY205MWJtUTZJQ05tWm1ZN0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVibVY0ZEMxbGNuSnZjaTFvTVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliM0prWlhJdGNtbG5hSFE2SURGd2VDQnpiMnhwWkNCeVoySmhLREFzSURBc0lEQXNJQzR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FHMWxaR2xoSUNod2NtVm1aWEp6TFdOdmJHOXlMWE5qYUdWdFpUb2daR0Z5YXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNCN0lHTnZiRzl5T2lBalptWm1PeUJpWVdOclozSnZkVzVrT2lBak1EQXdPeUI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWJtVjRkQzFsY25KdmNpMW9NU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZjbVJsY2kxeWFXZG9kRG9nTVhCNElITnZiR2xrSUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z0xqTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcExDQnpkR0YwZFhORGIyUmxJRDhnTHlvalgxOVFWVkpGWDE4cUx5QmZjbVZoWTNRdVpHVm1ZWFZzZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpYURGY0lpd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbE9pQmNJbTVsZUhRdFpYSnliM0l0YURGY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxPaUJ6ZEhsc1pYTXVhREZjYmlBZ0lDQWdJQ0FnZlN3Z2MzUmhkSFZ6UTI5a1pTa2dPaUJ1ZFd4c0xDQXZLaU5mWDFCVlVrVmZYeW92SUY5eVpXRmpkQzVrWldaaGRXeDBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSmthWFpjSWl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVTZJSE4wZVd4bGN5NWtaWE5qWEc0Z0lDQWdJQ0FnSUgwc0lDOHFJMTlmVUZWU1JWOWZLaThnWDNKbFlXTjBMbVJsWm1GMWJIUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltZ3lYQ0lzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bE9pQnpkSGxzWlhNdWFESmNiaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXdjbTl3Y3k1MGFYUnNaU0I4ZkNCemRHRjBkWE5EYjJSbElEOGdkR2wwYkdVZ09pQXZLaU5mWDFCVlVrVmZYeW92SUY5eVpXRmpkQzVrWldaaGRXeDBMbU55WldGMFpVVnNaVzFsYm5Rb1gzSmxZV04wTG1SbFptRjFiSFF1Um5KaFoyMWxiblFzSUc1MWJHd3NJRndpUVhCd2JHbGpZWFJwYjI0Z1pYSnliM0k2SUdFZ1kyeHBaVzUwTFhOcFpHVWdaWGhqWlhCMGFXOXVJR2hoY3lCdlkyTjFjbkpsWkNBb2MyVmxJSFJvWlNCaWNtOTNjMlZ5SUdOdmJuTnZiR1VnWm05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0cFhDSXBMQ0JjSWk1Y0lpa3BLU2twTzF4dUlDQWdJSDFjYm4xY2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlFVnljbTl5TzF4dVJYSnliM0l1WkdsemNHeGhlVTVoYldVZ1BTQW5SWEp5YjNKUVlXZGxKenRjYmtWeWNtOXlMbWRsZEVsdWFYUnBZV3hRY205d2N5QTlJRjluWlhSSmJtbDBhV0ZzVUhKdmNITTdYRzVGY25KdmNpNXZjbWxuUjJWMFNXNXBkR2xoYkZCeWIzQnpJRDBnWDJkbGRFbHVhWFJwWVd4UWNtOXdjenRjYm1OdmJuTjBJSE4wZVd4bGN5QTlJSHRjYmlBZ0lDQmxjbkp2Y2pvZ2UxeHVJQ0FnSUNBZ0lDQm1iMjUwUm1GdGFXeDVPaUFuTFdGd2NHeGxMWE41YzNSbGJTd2dRbXhwYm10TllXTlRlWE4wWlcxR2IyNTBMQ0JTYjJKdmRHOHNJRndpVTJWbmIyVWdWVWxjSWl3Z1hDSkdhWEpoSUZOaGJuTmNJaXdnUVhabGJtbHlMQ0JjSWtobGJIWmxkR2xqWVNCT1pYVmxYQ0lzSUZ3aVRIVmphV1JoSUVkeVlXNWtaVndpTENCellXNXpMWE5sY21sbUp5eGNiaUFnSUNBZ0lDQWdhR1ZwWjJoME9pQW5NVEF3ZG1nbkxGeHVJQ0FnSUNBZ0lDQjBaWGgwUVd4cFoyNDZJQ2RqWlc1MFpYSW5MRnh1SUNBZ0lDQWdJQ0JrYVhOd2JHRjVPaUFuWm14bGVDY3NYRzRnSUNBZ0lDQWdJR1pzWlhoRWFYSmxZM1JwYjI0NklDZGpiMngxYlc0bkxGeHVJQ0FnSUNBZ0lDQmhiR2xuYmtsMFpXMXpPaUFuWTJWdWRHVnlKeXhjYmlBZ0lDQWdJQ0FnYW5WemRHbG1lVU52Ym5SbGJuUTZJQ2RqWlc1MFpYSW5YRzRnSUNBZ2ZTeGNiaUFnSUNCa1pYTmpPaUI3WEc0Z0lDQWdJQ0FnSUdScGMzQnNZWGs2SUNkcGJteHBibVV0WW14dlkyc25MRnh1SUNBZ0lDQWdJQ0IwWlhoMFFXeHBaMjQ2SUNkc1pXWjBKeXhjYmlBZ0lDQWdJQ0FnYkdsdVpVaGxhV2RvZERvZ0p6UTVjSGduTEZ4dUlDQWdJQ0FnSUNCb1pXbG5hSFE2SUNjME9YQjRKeXhjYmlBZ0lDQWdJQ0FnZG1WeWRHbGpZV3hCYkdsbmJqb2dKMjFwWkdSc1pTZGNiaUFnSUNCOUxGeHVJQ0FnSUdneE9pQjdYRzRnSUNBZ0lDQWdJR1JwYzNCc1lYazZJQ2RwYm14cGJtVXRZbXh2WTJzbkxGeHVJQ0FnSUNBZ0lDQnRZWEpuYVc0NklEQXNYRzRnSUNBZ0lDQWdJRzFoY21kcGJsSnBaMmgwT2lBbk1qQndlQ2NzWEc0Z0lDQWdJQ0FnSUhCaFpHUnBibWM2SUNjeE1IQjRJREl6Y0hnZ01UQndlQ0F3Snl4Y2JpQWdJQ0FnSUNBZ1ptOXVkRk5wZW1VNklDY3lOSEI0Snl4Y2JpQWdJQ0FnSUNBZ1ptOXVkRmRsYVdkb2REb2dOVEF3TEZ4dUlDQWdJQ0FnSUNCMlpYSjBhV05oYkVGc2FXZHVPaUFuZEc5d0oxeHVJQ0FnSUgwc1hHNGdJQ0FnYURJNklIdGNiaUFnSUNBZ0lDQWdabTl1ZEZOcGVtVTZJQ2N4TkhCNEp5eGNiaUFnSUNBZ0lDQWdabTl1ZEZkbGFXZG9kRG9nSjI1dmNtMWhiQ2NzWEc0Z0lDQWdJQ0FnSUd4cGJtVklaV2xuYUhRNklDZHBibWhsY21sMEp5eGNiaUFnSUNBZ0lDQWdiV0Z5WjJsdU9pQXdMRnh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5PaUF3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WDJWeWNtOXlMbXB6TG0xaGNDSmRMQ0p1WVcxbGN5STZXeUpQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbVY0Y0c5eWRITWlMQ0oyWVd4MVpTSXNJbDl5WldGamRDSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2lYMmhsWVdRaUxDSnZZbW9pTENKZlgyVnpUVzlrZFd4bElpd2ljM1JoZEhWelEyOWtaWE1pTENKZloyVjBTVzVwZEdsaGJGQnliM0J6SWl3aWNtVnpJaXdpWlhKeUlpd2ljM1JoZEhWelEyOWtaU0lzSWtWeWNtOXlJaXdpY0hKdmNITWlMQ0owYVhSc1pTSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnpkSGxzWlNJc0luTjBlV3hsY3lJc0ltVnljbTl5SWl3aVpHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXdpTENKZlgyaDBiV3dpTENKamJHRnpjMDVoYldVaUxDSm9NU0lzSW1SbGMyTWlMQ0pvTWlJc0lrWnlZV2R0Wlc1MElpd2lRMjl0Y0c5dVpXNTBJaXdpWkdsemNHeGhlVTVoYldVaUxDSm5aWFJKYm1sMGFXRnNVSEp2Y0hNaUxDSnZjbWxuUjJWMFNXNXBkR2xoYkZCeWIzQnpJaXdpWm05dWRFWmhiV2xzZVNJc0ltaGxhV2RvZENJc0luUmxlSFJCYkdsbmJpSXNJbVJwYzNCc1lYa2lMQ0ptYkdWNFJHbHlaV04wYVc5dUlpd2lZV3hwWjI1SmRHVnRjeUlzSW1wMWMzUnBabmxEYjI1MFpXNTBJaXdpYkdsdVpVaGxhV2RvZENJc0luWmxjblJwWTJGc1FXeHBaMjRpTENKdFlYSm5hVzRpTENKdFlYSm5hVzVTYVdkb2RDSXNJbkJoWkdScGJtY2lMQ0ptYjI1MFUybDZaU0lzSW1admJuUlhaV2xuYUhRaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvcGFnZXMvX2Vycm9yLmpzXFxuXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtY29udGV4dC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtY29udGV4dC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIlxcblxcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcXFwiX19lc01vZHVsZVxcXCIsICh7XFxuICB2YWx1ZTogdHJ1ZVxcbn0pKTtcXG5leHBvcnRzLkFtcFN0YXRlQ29udGV4dCA9IHZvaWQgMDtcXG5cXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByZWFjdCAqLyBcXFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanNcXFwiKSk7XFxuXFxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcXG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XFxuICAgIFxcXCJkZWZhdWx0XFxcIjogb2JqXFxuICB9O1xcbn1cXG5cXG52YXIgQW1wU3RhdGVDb250ZXh0ID0gX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlQ29udGV4dCh7fSk7XFxuXFxuZXhwb3J0cy5BbXBTdGF0ZUNvbnRleHQgPSBBbXBTdGF0ZUNvbnRleHQ7XFxuXFxuaWYgKHRydWUpIHtcXG4gIEFtcFN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdBbXBTdGF0ZUNvbnRleHQnO1xcbn1cXG5cXG47XFxuICAgIC8vIFdyYXBwZWQgaW4gYW4gSUlGRSB0byBhdm9pZCBwb2xsdXRpbmcgdGhlIGdsb2JhbCBzY29wZVxcbiAgICA7XFxuICAgIChmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgLy8gTGVnYWN5IENTUyBpbXBsZW1lbnRhdGlvbnMgd2lsbCBgZXZhbGAgYnJvd3NlciBjb2RlIGluIGEgTm9kZS5qcyBjb250ZXh0XFxuICAgICAgICAvLyB0byBleHRyYWN0IENTUy4gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBuZWVkIHRvIGNoZWNrIHdlJ3JlIGluIGFcXG4gICAgICAgIC8vIGJyb3dzZXIgY29udGV4dCBiZWZvcmUgY29udGludWluZy5cXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiZcXG4gICAgICAgICAgICAvLyBBTVAgLyBOby1KUyBtb2RlIGRvZXMgbm90IGluamVjdCB0aGVzZSBoZWxwZXJzOlxcbiAgICAgICAgICAgICckUmVmcmVzaEhlbHBlcnMkJyBpbiBzZWxmKSB7XFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXFxuICAgICAgICAgICAgdmFyIGN1cnJlbnRFeHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXFxuICAgICAgICAgICAgdmFyIHByZXZFeHBvcnRzID0gKF9iID0gKF9hID0gbW9kdWxlLmhvdC5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkV4cG9ydHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XFxuICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgaGFwcGVuIGluIE1haW5UZW1wbGF0ZSBiZWNhdXNlIHRoZSBleHBvcnRzIG1pc21hdGNoIGJldHdlZW5cXG4gICAgICAgICAgICAvLyB0ZW1wbGF0aW5nIGFuZCBleGVjdXRpb24uXFxuICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnJlZ2lzdGVyRXhwb3J0c0ZvclJlYWN0UmVmcmVzaChjdXJyZW50RXhwb3J0cywgbW9kdWxlLmlkKTtcXG4gICAgICAgICAgICAvLyBBIG1vZHVsZSBjYW4gYmUgYWNjZXB0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBpdHMgZXhwb3J0cywgZS5nLiB3aGVuXFxuICAgICAgICAgICAgLy8gaXQgaXMgYSBSZWZyZXNoIEJvdW5kYXJ5LlxcbiAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuaXNSZWFjdFJlZnJlc2hCb3VuZGFyeShjdXJyZW50RXhwb3J0cykpIHtcXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgZXhwb3J0cyBvbiB1cGRhdGUgc28gd2UgY2FuIGNvbXBhcmUgdGhlIGJvdW5kYXJ5XFxuICAgICAgICAgICAgICAgIC8vIHNpZ25hdHVyZXMuXFxuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmV2RXhwb3J0cyA9IGN1cnJlbnRFeHBvcnRzO1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgLy8gVW5jb25kaXRpb25hbGx5IGFjY2VwdCBhbiB1cGRhdGUgdG8gdGhpcyBtb2R1bGUsIHdlJ2xsIGNoZWNrIGlmIGl0J3NcXG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgYSBSZWZyZXNoIEJvdW5kYXJ5IGxhdGVyLlxcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIGltcG9ydE1ldGEgaXMgcmVwbGFjZWQgaW4gdGhlIGxvYWRlclxcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgpO1xcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZpZWxkIGlzIHNldCB3aGVuIHRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgbW9kdWxlIHdhcyBhXFxuICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggQm91bmRhcnksIGxldHRpbmcgdXMga25vdyB3ZSBuZWVkIHRvIGNoZWNrIGZvciBpbnZhbGlkYXRpb24gb3JcXG4gICAgICAgICAgICAgICAgLy8gZW5xdWV1ZSBhbiB1cGRhdGUuXFxuICAgICAgICAgICAgICAgIGlmIChwcmV2RXhwb3J0cyAhPT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBib3VuZGFyeSBjYW4gYmVjb21lIGluZWxpZ2libGUgaWYgaXRzIGV4cG9ydHMgYXJlIGluY29tcGF0aWJsZVxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgZXhwb3J0cy5cXG4gICAgICAgICAgICAgICAgICAgIC8vXFxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgaWYgeW91IGFkZC9yZW1vdmUvY2hhbmdlIGV4cG9ydHMsIHdlJ2xsIHdhbnQgdG9cXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLWV4ZWN1dGUgdGhlIGltcG9ydGluZyBtb2R1bGVzLCBhbmQgZm9yY2UgdGhvc2UgY29tcG9uZW50cyB0b1xcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyLiBTaW1pbGFybHksIGlmIHlvdSBjb252ZXJ0IGEgY2xhc3MgY29tcG9uZW50IHRvIGFcXG4gICAgICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uLCB3ZSB3YW50IHRvIGludmFsaWRhdGUgdGhlIGJvdW5kYXJ5LlxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zaG91bGRJbnZhbGlkYXRlUmVhY3RSZWZyZXNoQm91bmRhcnkocHJldkV4cG9ydHMsIGN1cnJlbnRFeHBvcnRzKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNjaGVkdWxlVXBkYXRlKCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIGp1c3QgZXhlY3V0ZWQgdGhlIGNvZGUgZm9yIHRoZSBtb2R1bGUsIGl0J3MgcG9zc2libGUgdGhhdCB0aGVcXG4gICAgICAgICAgICAgICAgLy8gbmV3IGV4cG9ydHMgbWFkZSBpdCBpbmVsaWdpYmxlIGZvciBiZWluZyBhIGJvdW5kYXJ5LlxcbiAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGNhc2Ugd2hlbiB3ZSB3ZXJlIF9wcmV2aW91c2x5XyBhIGJvdW5kYXJ5LFxcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGFscmVhZHkgYWNjZXB0ZWQgdGhpcyB1cGRhdGUgKGFjY2lkZW50YWwgc2lkZSBlZmZlY3QpLlxcbiAgICAgICAgICAgICAgICB2YXIgaXNOb0xvbmdlckFCb3VuZGFyeSA9IHByZXZFeHBvcnRzICE9PSBudWxsO1xcbiAgICAgICAgICAgICAgICBpZiAoaXNOb0xvbmdlckFCb3VuZGFyeSkge1xcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0pKCk7XFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5dWIyUmxYMjF2WkhWc1pYTXZibVY0ZEM5a2FYTjBMM05vWVhKbFpDOXNhV0l2WVcxd0xXTnZiblJsZUhRdWFuTXVhbk1pTENKdFlYQndhVzVuY3lJNklrRkJRV0U3TzBGQlEySkJMRGhEUVVFMlF6dEJRVU42UTBjc1JVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlJHdERMRU5CUVRkRE8wRkJSMEZFTEhWQ1FVRkJMRWRCUVRCQ0xFdEJRVXNzUTBGQkwwSTdPMEZCUTBFc1NVRkJTVWNzVFVGQlRTeEhRVUZIUXl4elFrRkJjMElzUTBGQlEwTXNiVUpCUVU4c1EwRkJReXcwUTBGQlJDeERRVUZTTEVOQlFXNURPenRCUVVOQkxGTkJRVk5FTEhOQ1FVRlVMRU5CUVdkRFJTeEhRVUZvUXl4RlFVRnhRenRCUVVOcVF5eFRRVUZQUVN4SFFVRkhMRWxCUVVsQkxFZEJRVWNzUTBGQlEwTXNWVUZCV0N4SFFVRjNRa1FzUjBGQmVFSXNSMEZCT0VJN1FVRkRha01zWlVGQlUwRTdRVUZFZDBJc1IwRkJja003UVVGSFNEczdRVUZEUkN4SlFVRk5TaXhsUVVGbExFZEJRVWRETEUxQlFVMHNWMEZCVGl4RFFVRmxTeXhoUVVGbUxFTkJRVFpDTEVWQlFUZENMRU5CUVhoQ096dEJRVU5CVWl4MVFrRkJRU3hIUVVFd1FrVXNaVUZCTVVJN08wRkJRMEVzU1VGQlNTeE5RVUYxUXp0QlFVTjJRMEVzUlVGQlFVRXNaVUZCWlN4RFFVRkRUeXhYUVVGb1FpeEhRVUU0UWl4cFFrRkJPVUk3UVVGRFNDSXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDE5T1gwVXZMaTl1YjJSbFgyMXZaSFZzWlhNdmJtVjRkQzlrYVhOMEwzTm9ZWEpsWkM5c2FXSXZZVzF3TFdOdmJuUmxlSFF1YW5NL1pUVmhOeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11UVcxd1UzUmhkR1ZEYjI1MFpYaDBJRDBnZG05cFpDQXdPMXh1ZG1GeUlGOXlaV0ZqZENBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvY21WeGRXbHlaU2hjSW5KbFlXTjBYQ0lwS1R0Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2diMkpxWEc0Z0lDQWdmVHRjYm4xY2JtTnZibk4wSUVGdGNGTjBZWFJsUTI5dWRHVjRkQ0E5SUY5eVpXRmpkQzVrWldaaGRXeDBMbU55WldGMFpVTnZiblJsZUhRb2UzMHBPMXh1Wlhod2IzSjBjeTVCYlhCVGRHRjBaVU52Ym5SbGVIUWdQU0JCYlhCVGRHRjBaVU52Ym5SbGVIUTdYRzVwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5a2dlMXh1SUNBZ0lFRnRjRk4wWVhSbFEyOXVkR1Y0ZEM1a2FYTndiR0Y1VG1GdFpTQTlJQ2RCYlhCVGRHRjBaVU52Ym5SbGVIUW5PMXh1ZlZ4dVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFoYlhBdFkyOXVkR1Y0ZEM1cWN5NXRZWEFpWFN3aWJtRnRaWE1pT2xzaVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGVIQnZjblJ6SWl3aWRtRnNkV1VpTENKQmJYQlRkR0YwWlVOdmJuUmxlSFFpTENKZmNtVmhZM1FpTENKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW05aWFpSXNJbDlmWlhOTmIyUjFiR1VpTENKamNtVmhkR1ZEYjI1MFpYaDBJaXdpWkdsemNHeGhlVTVoYldVaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtY29udGV4dC5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5ldmFsKFwiXFxuXFxudmFyIF9zID0gJFJlZnJlc2hTaWckKCk7XFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFxcXCJfX2VzTW9kdWxlXFxcIiwgKHtcXG4gIHZhbHVlOiB0cnVlXFxufSkpO1xcbmV4cG9ydHMuaXNJbkFtcE1vZGUgPSBpc0luQW1wTW9kZTtcXG5leHBvcnRzLnVzZUFtcCA9IHVzZUFtcDtcXG5cXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByZWFjdCAqLyBcXFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanNcXFwiKSk7XFxuXFxudmFyIF9hbXBDb250ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hbXAtY29udGV4dCAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYW1wLWNvbnRleHQuanNcXFwiKTtcXG5cXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcXG4gICAgXFxcImRlZmF1bHRcXFwiOiBvYmpcXG4gIH07XFxufVxcblxcbmZ1bmN0aW9uIGlzSW5BbXBNb2RlKCkge1xcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxcbiAgICAgIF9yZWYkYW1wRmlyc3QgPSBfcmVmLmFtcEZpcnN0LFxcbiAgICAgIGFtcEZpcnN0ID0gX3JlZiRhbXBGaXJzdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGFtcEZpcnN0LFxcbiAgICAgIF9yZWYkaHlicmlkID0gX3JlZi5oeWJyaWQsXFxuICAgICAgaHlicmlkID0gX3JlZiRoeWJyaWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRoeWJyaWQsXFxuICAgICAgX3JlZiRoYXNRdWVyeSA9IF9yZWYuaGFzUXVlcnksXFxuICAgICAgaGFzUXVlcnkgPSBfcmVmJGhhc1F1ZXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaGFzUXVlcnk7XFxuXFxuICByZXR1cm4gYW1wRmlyc3QgfHwgaHlicmlkICYmIGhhc1F1ZXJ5O1xcbn1cXG5cXG5mdW5jdGlvbiB1c2VBbXAoKSB7XFxuICBfcygpO1xcblxcbiAgLy8gRG9uJ3QgYXNzaWduIHRoZSBjb250ZXh0IHZhbHVlIHRvIGEgdmFyaWFibGUgdG8gc2F2ZSBieXRlc1xcbiAgcmV0dXJuIGlzSW5BbXBNb2RlKF9yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLnVzZUNvbnRleHQoX2FtcENvbnRleHQuQW1wU3RhdGVDb250ZXh0KSk7XFxufVxcblxcbl9zKHVzZUFtcCwgXFxcImdEc0NqZWVJdFV1dmdPV2YxdjRxb0s5UkY2az1cXFwiKTtcXG5cXG5pZiAodHlwZW9mIGV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdID09PSAnb2JqZWN0JyAmJiBleHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0gIT09IG51bGwpIHtcXG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdLCBleHBvcnRzKTtcXG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdO1xcbn1cXG5cXG47XFxuICAgIC8vIFdyYXBwZWQgaW4gYW4gSUlGRSB0byBhdm9pZCBwb2xsdXRpbmcgdGhlIGdsb2JhbCBzY29wZVxcbiAgICA7XFxuICAgIChmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgLy8gTGVnYWN5IENTUyBpbXBsZW1lbnRhdGlvbnMgd2lsbCBgZXZhbGAgYnJvd3NlciBjb2RlIGluIGEgTm9kZS5qcyBjb250ZXh0XFxuICAgICAgICAvLyB0byBleHRyYWN0IENTUy4gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBuZWVkIHRvIGNoZWNrIHdlJ3JlIGluIGFcXG4gICAgICAgIC8vIGJyb3dzZXIgY29udGV4dCBiZWZvcmUgY29udGludWluZy5cXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiZcXG4gICAgICAgICAgICAvLyBBTVAgLyBOby1KUyBtb2RlIGRvZXMgbm90IGluamVjdCB0aGVzZSBoZWxwZXJzOlxcbiAgICAgICAgICAgICckUmVmcmVzaEhlbHBlcnMkJyBpbiBzZWxmKSB7XFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXFxuICAgICAgICAgICAgdmFyIGN1cnJlbnRFeHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXFxuICAgICAgICAgICAgdmFyIHByZXZFeHBvcnRzID0gKF9iID0gKF9hID0gbW9kdWxlLmhvdC5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkV4cG9ydHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XFxuICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgaGFwcGVuIGluIE1haW5UZW1wbGF0ZSBiZWNhdXNlIHRoZSBleHBvcnRzIG1pc21hdGNoIGJldHdlZW5cXG4gICAgICAgICAgICAvLyB0ZW1wbGF0aW5nIGFuZCBleGVjdXRpb24uXFxuICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnJlZ2lzdGVyRXhwb3J0c0ZvclJlYWN0UmVmcmVzaChjdXJyZW50RXhwb3J0cywgbW9kdWxlLmlkKTtcXG4gICAgICAgICAgICAvLyBBIG1vZHVsZSBjYW4gYmUgYWNjZXB0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBpdHMgZXhwb3J0cywgZS5nLiB3aGVuXFxuICAgICAgICAgICAgLy8gaXQgaXMgYSBSZWZyZXNoIEJvdW5kYXJ5LlxcbiAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuaXNSZWFjdFJlZnJlc2hCb3VuZGFyeShjdXJyZW50RXhwb3J0cykpIHtcXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgZXhwb3J0cyBvbiB1cGRhdGUgc28gd2UgY2FuIGNvbXBhcmUgdGhlIGJvdW5kYXJ5XFxuICAgICAgICAgICAgICAgIC8vIHNpZ25hdHVyZXMuXFxuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmV2RXhwb3J0cyA9IGN1cnJlbnRFeHBvcnRzO1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgLy8gVW5jb25kaXRpb25hbGx5IGFjY2VwdCBhbiB1cGRhdGUgdG8gdGhpcyBtb2R1bGUsIHdlJ2xsIGNoZWNrIGlmIGl0J3NcXG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgYSBSZWZyZXNoIEJvdW5kYXJ5IGxhdGVyLlxcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIGltcG9ydE1ldGEgaXMgcmVwbGFjZWQgaW4gdGhlIGxvYWRlclxcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgpO1xcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZpZWxkIGlzIHNldCB3aGVuIHRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgbW9kdWxlIHdhcyBhXFxuICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggQm91bmRhcnksIGxldHRpbmcgdXMga25vdyB3ZSBuZWVkIHRvIGNoZWNrIGZvciBpbnZhbGlkYXRpb24gb3JcXG4gICAgICAgICAgICAgICAgLy8gZW5xdWV1ZSBhbiB1cGRhdGUuXFxuICAgICAgICAgICAgICAgIGlmIChwcmV2RXhwb3J0cyAhPT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBib3VuZGFyeSBjYW4gYmVjb21lIGluZWxpZ2libGUgaWYgaXRzIGV4cG9ydHMgYXJlIGluY29tcGF0aWJsZVxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgZXhwb3J0cy5cXG4gICAgICAgICAgICAgICAgICAgIC8vXFxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgaWYgeW91IGFkZC9yZW1vdmUvY2hhbmdlIGV4cG9ydHMsIHdlJ2xsIHdhbnQgdG9cXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLWV4ZWN1dGUgdGhlIGltcG9ydGluZyBtb2R1bGVzLCBhbmQgZm9yY2UgdGhvc2UgY29tcG9uZW50cyB0b1xcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyLiBTaW1pbGFybHksIGlmIHlvdSBjb252ZXJ0IGEgY2xhc3MgY29tcG9uZW50IHRvIGFcXG4gICAgICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uLCB3ZSB3YW50IHRvIGludmFsaWRhdGUgdGhlIGJvdW5kYXJ5LlxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zaG91bGRJbnZhbGlkYXRlUmVhY3RSZWZyZXNoQm91bmRhcnkocHJldkV4cG9ydHMsIGN1cnJlbnRFeHBvcnRzKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNjaGVkdWxlVXBkYXRlKCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIGp1c3QgZXhlY3V0ZWQgdGhlIGNvZGUgZm9yIHRoZSBtb2R1bGUsIGl0J3MgcG9zc2libGUgdGhhdCB0aGVcXG4gICAgICAgICAgICAgICAgLy8gbmV3IGV4cG9ydHMgbWFkZSBpdCBpbmVsaWdpYmxlIGZvciBiZWluZyBhIGJvdW5kYXJ5LlxcbiAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGNhc2Ugd2hlbiB3ZSB3ZXJlIF9wcmV2aW91c2x5XyBhIGJvdW5kYXJ5LFxcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGFscmVhZHkgYWNjZXB0ZWQgdGhpcyB1cGRhdGUgKGFjY2lkZW50YWwgc2lkZSBlZmZlY3QpLlxcbiAgICAgICAgICAgICAgICB2YXIgaXNOb0xvbmdlckFCb3VuZGFyeSA9IHByZXZFeHBvcnRzICE9PSBudWxsO1xcbiAgICAgICAgICAgICAgICBpZiAoaXNOb0xvbmdlckFCb3VuZGFyeSkge1xcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0pKCk7XFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5dWIyUmxYMjF2WkhWc1pYTXZibVY0ZEM5a2FYTjBMM05vWVhKbFpDOXNhV0l2WVcxd0xtcHpMbXB6SWl3aWJXRndjR2x1WjNNaU9pSkJRVUZoT3pzN08wRkJRMkpCTERoRFFVRTJRenRCUVVONlEwY3NSVUZCUVVFc1MwRkJTeXhGUVVGRk8wRkJSR3RETEVOQlFUZERPMEZCUjBGRUxHMUNRVUZCTEVkQlFYTkNSU3hYUVVGMFFqdEJRVU5CUml4alFVRkJMRWRCUVdsQ1J5eE5RVUZxUWpzN1FVRkRRU3hKUVVGSlF5eE5RVUZOTEVkQlFVZERMSE5DUVVGelFpeERRVUZEUXl4dFFrRkJUeXhEUVVGRExEUkRRVUZFTEVOQlFWSXNRMEZCYmtNN08wRkJRMEVzU1VGQlNVTXNWMEZCVnl4SFFVRkhSQ3h0UWtGQlR5eERRVUZETEhsRlFVRkVMRU5CUVhwQ096dEJRVU5CTEZOQlFWTkVMSE5DUVVGVUxFTkJRV2REUnl4SFFVRm9ReXhGUVVGeFF6dEJRVU5xUXl4VFFVRlBRU3hIUVVGSExFbEJRVWxCTEVkQlFVY3NRMEZCUTBNc1ZVRkJXQ3hIUVVGM1FrUXNSMEZCZUVJc1IwRkJPRUk3UVVGRGFrTXNaVUZCVTBFN1FVRkVkMElzUjBGQmNrTTdRVUZIU0RzN1FVRkRSQ3hUUVVGVFRpeFhRVUZVTEVkQlFXOUdPMEZCUVVFc2FVWkJRVW9zUlVGQlNUdEJRVUZCTERKQ1FVRTNSRkVzVVVGQk5rUTdRVUZCUVN4TlFVRTNSRUVzVVVGQk5rUXNPRUpCUVc1RUxFdEJRVzFFTzBGQlFVRXNlVUpCUVRORFF5eE5RVUV5UXp0QlFVRkJMRTFCUVRORFFTeE5RVUV5UXl3MFFrRkJia01zUzBGQmJVTTdRVUZCUVN3eVFrRkJNMEpETEZGQlFUSkNPMEZCUVVFc1RVRkJNMEpCTEZGQlFUSkNMRGhDUVVGcVFpeExRVUZwUWpzN1FVRkRhRVlzVTBGQlQwWXNVVUZCVVN4SlFVRkpReXhOUVVGTkxFbEJRVWxETEZGQlFUZENPMEZCUTBnN08wRkJRMFFzVTBGQlUxUXNUVUZCVkN4SFFVRnJRanRCUVVGQk96dEJRVU5rTzBGQlEwRXNVMEZCVDBRc1YwRkJWeXhEUVVGRFJTeE5RVUZOTEZkQlFVNHNRMEZCWlZNc1ZVRkJaaXhEUVVFd1FrNHNWMEZCVnl4RFFVRkRUeXhsUVVGMFF5eERRVUZFTEVOQlFXeENPMEZCUTBnN08wZEJTRkZZTEUwN08wRkJTMVFzU1VGQlNTeFBRVUZQU0N4UFFVRlBMRmRCUVdRc1MwRkJNa0lzVlVGQk0wSXNTVUZCTUVNc1QwRkJUMEVzVDBGQlR5eFhRVUZrTEV0QlFUSkNMRkZCUVROQ0xFbEJRWFZEUVN4UFFVRlBMRmRCUVZBc1MwRkJiMElzU1VGQmVrY3NSVUZCWjBnN1FVRkRPVWRHTEVWQlFVRkJMRTFCUVUwc1EwRkJRMmxDTEUxQlFWQXNRMEZCWTJZc1QwRkJUeXhYUVVGeVFpeEZRVUVyUWtFc1QwRkJMMEk3UVVGRFFXZENMRVZCUVVGQkxFMUJRVTBzUTBGQlEyaENMRTlCUVZBc1IwRkJhVUpCTEU5QlFVOHNWMEZCZUVJN1FVRkRSQ0lzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwxOU9YMFV2TGk5dWIyUmxYMjF2WkhWc1pYTXZibVY0ZEM5a2FYTjBMM05vWVhKbFpDOXNhV0l2WVcxd0xtcHpQelZsTkdZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtbHpTVzVCYlhCTmIyUmxJRDBnYVhOSmJrRnRjRTF2WkdVN1hHNWxlSEJ2Y25SekxuVnpaVUZ0Y0NBOUlIVnpaVUZ0Y0R0Y2JuWmhjaUJmY21WaFkzUWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSnlaV0ZqZEZ3aUtTazdYRzUyWVhJZ1gyRnRjRU52Ym5SbGVIUWdQU0J5WlhGMWFYSmxLRndpTGk5aGJYQXRZMjl1ZEdWNGRGd2lLVHRjYm1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9iMkpxS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUh0Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2IySnFYRzRnSUNBZ2ZUdGNibjFjYm1aMWJtTjBhVzl1SUdselNXNUJiWEJOYjJSbEtIc2dZVzF3Um1seWMzUWdQV1poYkhObElDd2dhSGxpY21sa0lEMW1ZV3h6WlNBc0lHaGhjMUYxWlhKNUlEMW1ZV3h6WlNBc0lDQjlJRDBnZTMwcElIdGNiaUFnSUNCeVpYUjFjbTRnWVcxd1JtbHljM1FnZkh3Z2FIbGljbWxrSUNZbUlHaGhjMUYxWlhKNU8xeHVmVnh1Wm5WdVkzUnBiMjRnZFhObFFXMXdLQ2tnZTF4dUlDQWdJQzh2SUVSdmJpZDBJR0Z6YzJsbmJpQjBhR1VnWTI5dWRHVjRkQ0IyWVd4MVpTQjBieUJoSUhaaGNtbGhZbXhsSUhSdklITmhkbVVnWW5sMFpYTmNiaUFnSUNCeVpYUjFjbTRnYVhOSmJrRnRjRTF2WkdVb1gzSmxZV04wTG1SbFptRjFiSFF1ZFhObFEyOXVkR1Y0ZENoZllXMXdRMjl1ZEdWNGRDNUJiWEJUZEdGMFpVTnZiblJsZUhRcEtUdGNibjFjYmx4dWFXWWdLSFI1Y0dWdlppQmxlSEJ2Y25SekxtUmxabUYxYkhRZ1BUMDlJQ2RtZFc1amRHbHZiaWNnZkh3Z0tIUjVjR1Z2WmlCbGVIQnZjblJ6TG1SbFptRjFiSFFnUFQwOUlDZHZZbXBsWTNRbklDWW1JR1Y0Y0c5eWRITXVaR1ZtWVhWc2RDQWhQVDBnYm5Wc2JDa3BJSHRjYmlBZ1QySnFaV04wTG1GemMybG5iaWhsZUhCdmNuUnpMbVJsWm1GMWJIUXNJR1Y0Y0c5eWRITXBPMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdWNGNHOXlkSE11WkdWbVlYVnNkRHRjYm4xY2JseHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WVcxd0xtcHpMbTFoY0NKZExDSnVZVzFsY3lJNld5SlBZbXBsWTNRaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltVjRjRzl5ZEhNaUxDSjJZV3gxWlNJc0ltbHpTVzVCYlhCTmIyUmxJaXdpZFhObFFXMXdJaXdpWDNKbFlXTjBJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0pmWVcxd1EyOXVkR1Y0ZENJc0ltOWlhaUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmhiWEJHYVhKemRDSXNJbWg1WW5KcFpDSXNJbWhoYzFGMVpYSjVJaXdpZFhObFEyOXVkR1Y0ZENJc0lrRnRjRk4wWVhSbFEyOXVkR1Y0ZENJc0ltRnpjMmxuYmlJc0ltMXZaSFZzWlNKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAuanNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2hlYWQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9oZWFkLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV2YWwoXCJcXG5cXG52YXIgX2RlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzXFxcIik7XFxuXFxudmFyIF9zID0gJFJlZnJlc2hTaWckKCk7XFxuXFxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFxcXCJfX2VzTW9kdWxlXFxcIiwgKHtcXG4gIHZhbHVlOiB0cnVlXFxufSkpO1xcbmV4cG9ydHMuZGVmYXVsdEhlYWQgPSBkZWZhdWx0SGVhZDtcXG5leHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0gPSB2b2lkIDA7XFxuXFxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovIFxcXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qc1xcXCIpKTtcXG5cXG52YXIgX3NpZGVFZmZlY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc2lkZS1lZmZlY3QgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3NpZGUtZWZmZWN0LmpzXFxcIikpO1xcblxcbnZhciBfYW1wQ29udGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYW1wLWNvbnRleHQgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2FtcC1jb250ZXh0LmpzXFxcIik7XFxuXFxudmFyIF9oZWFkTWFuYWdlckNvbnRleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2hlYWQtbWFuYWdlci1jb250ZXh0ICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9oZWFkLW1hbmFnZXItY29udGV4dC5qc1xcXCIpO1xcblxcbnZhciBfYW1wID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hbXAgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2FtcC5qc1xcXCIpO1xcblxcbnZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWxzICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi91dGlscy5qc1xcXCIpO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XFxuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xcbiAgICBcXFwiZGVmYXVsdFxcXCI6IG9ialxcbiAgfTtcXG59XFxuXFxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XFxuICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XFxuICAgIHJldHVybiBvYmo7XFxuICB9IGVsc2Uge1xcbiAgICB2YXIgbmV3T2JqID0ge307XFxuXFxuICAgIGlmIChvYmogIT0gbnVsbCkge1xcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XFxuICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9O1xcblxcbiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHtcXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xcbiAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgbmV3T2JqW1xcXCJkZWZhdWx0XFxcIl0gPSBvYmo7XFxuICAgIHJldHVybiBuZXdPYmo7XFxuICB9XFxufVxcblxcbmZ1bmN0aW9uIGRlZmF1bHRIZWFkKCkge1xcbiAgdmFyIGluQW1wTW9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XFxuICB2YXIgaGVhZCA9IFsvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlRWxlbWVudChcXFwibWV0YVxcXCIsIHtcXG4gICAgY2hhclNldDogXFxcInV0Zi04XFxcIlxcbiAgfSldO1xcblxcbiAgaWYgKCFpbkFtcE1vZGUpIHtcXG4gICAgaGVhZC5wdXNoKCAvKiNfX1BVUkVfXyovX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uY3JlYXRlRWxlbWVudChcXFwibWV0YVxcXCIsIHtcXG4gICAgICBuYW1lOiBcXFwidmlld3BvcnRcXFwiLFxcbiAgICAgIGNvbnRlbnQ6IFxcXCJ3aWR0aD1kZXZpY2Utd2lkdGhcXFwiXFxuICAgIH0pKTtcXG4gIH1cXG5cXG4gIHJldHVybiBoZWFkO1xcbn1cXG5cXG5mdW5jdGlvbiBvbmx5UmVhY3RFbGVtZW50KGxpc3QsIGNoaWxkKSB7XFxuICAvLyBSZWFjdCBjaGlsZHJlbiBjYW4gYmUgXFxcInN0cmluZ1xcXCIgb3IgXFxcIm51bWJlclxcXCIgaW4gdGhpcyBjYXNlIHdlIGlnbm9yZSB0aGVtIGZvciBiYWNrd2FyZHMgY29tcGF0XFxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XFxuICAgIHJldHVybiBsaXN0O1xcbiAgfSAvLyBBZGRzIHN1cHBvcnQgZm9yIFJlYWN0LkZyYWdtZW50XFxuXFxuXFxuICBpZiAoY2hpbGQudHlwZSA9PT0gX3JlYWN0W1xcXCJkZWZhdWx0XFxcIl0uRnJhZ21lbnQpIHtcXG4gICAgcmV0dXJuIGxpc3QuY29uY2F0KF9yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLkNoaWxkcmVuLnRvQXJyYXkoY2hpbGQucHJvcHMuY2hpbGRyZW4pLnJlZHVjZShmdW5jdGlvbiAoZnJhZ21lbnRMaXN0LCBmcmFnbWVudENoaWxkKSB7XFxuICAgICAgaWYgKHR5cGVvZiBmcmFnbWVudENoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZnJhZ21lbnRDaGlsZCA9PT0gJ251bWJlcicpIHtcXG4gICAgICAgIHJldHVybiBmcmFnbWVudExpc3Q7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBmcmFnbWVudExpc3QuY29uY2F0KGZyYWdtZW50Q2hpbGQpO1xcbiAgICB9LCBbXSkpO1xcbiAgfVxcblxcbiAgcmV0dXJuIGxpc3QuY29uY2F0KGNoaWxkKTtcXG59XFxuXFxudmFyIE1FVEFUWVBFUyA9IFsnbmFtZScsICdodHRwRXF1aXYnLCAnY2hhclNldCcsICdpdGVtUHJvcCddO1xcbi8qXFxuIHJldHVybnMgYSBmdW5jdGlvbiBmb3IgZmlsdGVyaW5nIGhlYWQgY2hpbGQgZWxlbWVudHNcXG4gd2hpY2ggc2hvdWxkbid0IGJlIGR1cGxpY2F0ZWQsIGxpa2UgPHRpdGxlLz5cXG4gQWxzbyBhZGRzIHN1cHBvcnQgZm9yIGRlZHVwbGljYXRlZCBga2V5YCBwcm9wZXJ0aWVzXFxuKi9cXG5cXG5mdW5jdGlvbiB1bmlxdWUoKSB7XFxuICB2YXIga2V5cyA9IG5ldyBTZXQoKTtcXG4gIHZhciB0YWdzID0gbmV3IFNldCgpO1xcbiAgdmFyIG1ldGFUeXBlcyA9IG5ldyBTZXQoKTtcXG4gIHZhciBtZXRhQ2F0ZWdvcmllcyA9IHt9O1xcbiAgcmV0dXJuIGZ1bmN0aW9uIChoKSB7XFxuICAgIHZhciBpc1VuaXF1ZSA9IHRydWU7XFxuICAgIHZhciBoYXNLZXkgPSBmYWxzZTtcXG5cXG4gICAgaWYgKGgua2V5ICYmIHR5cGVvZiBoLmtleSAhPT0gJ251bWJlcicgJiYgaC5rZXkuaW5kZXhPZignJCcpID4gMCkge1xcbiAgICAgIGhhc0tleSA9IHRydWU7XFxuICAgICAgdmFyIGtleSA9IGgua2V5LnNsaWNlKGgua2V5LmluZGV4T2YoJyQnKSArIDEpO1xcblxcbiAgICAgIGlmIChrZXlzLmhhcyhrZXkpKSB7XFxuICAgICAgICBpc1VuaXF1ZSA9IGZhbHNlO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBrZXlzLmFkZChrZXkpO1xcbiAgICAgIH1cXG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXFxuXFxuXFxuICAgIHN3aXRjaCAoaC50eXBlKSB7XFxuICAgICAgY2FzZSAndGl0bGUnOlxcbiAgICAgIGNhc2UgJ2Jhc2UnOlxcbiAgICAgICAgaWYgKHRhZ3MuaGFzKGgudHlwZSkpIHtcXG4gICAgICAgICAgaXNVbmlxdWUgPSBmYWxzZTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHRhZ3MuYWRkKGgudHlwZSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBicmVhaztcXG5cXG4gICAgICBjYXNlICdtZXRhJzpcXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNRVRBVFlQRVMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcXG4gICAgICAgICAgdmFyIG1ldGF0eXBlID0gTUVUQVRZUEVTW2ldO1xcbiAgICAgICAgICBpZiAoIWgucHJvcHMuaGFzT3duUHJvcGVydHkobWV0YXR5cGUpKSBjb250aW51ZTtcXG5cXG4gICAgICAgICAgaWYgKG1ldGF0eXBlID09PSAnY2hhclNldCcpIHtcXG4gICAgICAgICAgICBpZiAobWV0YVR5cGVzLmhhcyhtZXRhdHlwZSkpIHtcXG4gICAgICAgICAgICAgIGlzVW5pcXVlID0gZmFsc2U7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgIG1ldGFUeXBlcy5hZGQobWV0YXR5cGUpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSBoLnByb3BzW21ldGF0eXBlXTtcXG4gICAgICAgICAgICB2YXIgY2F0ZWdvcmllcyA9IG1ldGFDYXRlZ29yaWVzW21ldGF0eXBlXSB8fCBuZXcgU2V0KCk7XFxuXFxuICAgICAgICAgICAgaWYgKChtZXRhdHlwZSAhPT0gJ25hbWUnIHx8ICFoYXNLZXkpICYmIGNhdGVnb3JpZXMuaGFzKGNhdGVnb3J5KSkge1xcbiAgICAgICAgICAgICAgaXNVbmlxdWUgPSBmYWxzZTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgY2F0ZWdvcmllcy5hZGQoY2F0ZWdvcnkpO1xcbiAgICAgICAgICAgICAgbWV0YUNhdGVnb3JpZXNbbWV0YXR5cGVdID0gY2F0ZWdvcmllcztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGJyZWFrO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBpc1VuaXF1ZTtcXG4gIH07XFxufVxcbi8qKlxcbiAqXFxuICogQHBhcmFtIGhlYWRFbGVtZW50cyBMaXN0IG9mIG11bHRpcGxlIDxIZWFkPiBpbnN0YW5jZXNcXG4gKi9cXG5cXG5cXG5mdW5jdGlvbiByZWR1Y2VDb21wb25lbnRzKGhlYWRFbGVtZW50cywgcHJvcHMpIHtcXG4gIHJldHVybiBoZWFkRWxlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChsaXN0LCBoZWFkRWxlbWVudCkge1xcbiAgICB2YXIgaGVhZEVsZW1lbnRDaGlsZHJlbiA9IF9yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLkNoaWxkcmVuLnRvQXJyYXkoaGVhZEVsZW1lbnQucHJvcHMuY2hpbGRyZW4pO1xcblxcbiAgICByZXR1cm4gbGlzdC5jb25jYXQoaGVhZEVsZW1lbnRDaGlsZHJlbik7XFxuICB9LCBbXSkucmVkdWNlKG9ubHlSZWFjdEVsZW1lbnQsIFtdKS5yZXZlcnNlKCkuY29uY2F0KGRlZmF1bHRIZWFkKHByb3BzLmluQW1wTW9kZSkpLmZpbHRlcih1bmlxdWUoKSkucmV2ZXJzZSgpLm1hcChmdW5jdGlvbiAoYywgaSkge1xcbiAgICB2YXIga2V5ID0gYy5rZXkgfHwgaTtcXG5cXG4gICAgaWYgKGZhbHNlKSB7IHZhciBuZXdQcm9wczsgfVxcblxcbiAgICBpZiAodHJ1ZSkge1xcbiAgICAgIC8vIG9taXQgSlNPTi1MRCBzdHJ1Y3R1cmVkIGRhdGEgc25pcHBldHMgZnJvbSB0aGUgd2FybmluZ1xcbiAgICAgIGlmIChjLnR5cGUgPT09ICdzY3JpcHQnICYmIGMucHJvcHNbJ3R5cGUnXSAhPT0gJ2FwcGxpY2F0aW9uL2xkK2pzb24nKSB7XFxuICAgICAgICB2YXIgc3JjTWVzc2FnZSA9IGMucHJvcHNbJ3NyYyddID8gXFxcIjxzY3JpcHQ+IHRhZyB3aXRoIHNyYz1cXFxcXFxcIlxcXCIuY29uY2F0KGMucHJvcHNbJ3NyYyddLCBcXFwiXFxcXFxcXCJcXFwiKSA6IFxcXCJpbmxpbmUgPHNjcmlwdD5cXFwiO1xcbiAgICAgICAgKDAsIF91dGlscykud2Fybk9uY2UoXFxcIkRvIG5vdCBhZGQgPHNjcmlwdD4gdGFncyB1c2luZyBuZXh0L2hlYWQgKHNlZSBcXFwiLmNvbmNhdChzcmNNZXNzYWdlLCBcXFwiKS4gVXNlIG5leHQvc2NyaXB0IGluc3RlYWQuIFxcXFxuU2VlIG1vcmUgaW5mbyBoZXJlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9uby1zY3JpcHQtdGFncy1pbi1oZWFkLWNvbXBvbmVudFxcXCIpKTtcXG4gICAgICB9IGVsc2UgaWYgKGMudHlwZSA9PT0gJ2xpbmsnICYmIGMucHJvcHNbJ3JlbCddID09PSAnc3R5bGVzaGVldCcpIHtcXG4gICAgICAgICgwLCBfdXRpbHMpLndhcm5PbmNlKFxcXCJEbyBub3QgYWRkIHN0eWxlc2hlZXRzIHVzaW5nIG5leHQvaGVhZCAoc2VlIDxsaW5rIHJlbD1cXFxcXFxcInN0eWxlc2hlZXRcXFxcXFxcIj4gdGFnIHdpdGggaHJlZj1cXFxcXFxcIlxcXCIuY29uY2F0KGMucHJvcHNbJ2hyZWYnXSwgXFxcIlxcXFxcXFwiKS4gVXNlIERvY3VtZW50IGluc3RlYWQuIFxcXFxuU2VlIG1vcmUgaW5mbyBoZXJlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9uby1zdHlsZXNoZWV0cy1pbi1oZWFkLWNvbXBvbmVudFxcXCIpKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXFxcImRlZmF1bHRcXFwiXS5jbG9uZUVsZW1lbnQoYywge1xcbiAgICAgIGtleToga2V5XFxuICAgIH0pO1xcbiAgfSk7XFxufVxcbi8qKlxcbiAqIFRoaXMgY29tcG9uZW50IGluamVjdHMgZWxlbWVudHMgdG8gYDxoZWFkPmAgb2YgeW91ciBwYWdlLlxcbiAqIFRvIGF2b2lkIGR1cGxpY2F0ZWQgYHRhZ3NgIGluIGA8aGVhZD5gIHlvdSBjYW4gdXNlIHRoZSBga2V5YCBwcm9wZXJ0eSwgd2hpY2ggd2lsbCBtYWtlIHN1cmUgZXZlcnkgdGFnIGlzIG9ubHkgcmVuZGVyZWQgb25jZS5cXG4gKi9cXG5cXG5cXG5mdW5jdGlvbiBIZWFkKF9yZWYpIHtcXG4gIF9zKCk7XFxuXFxuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xcbiAgdmFyIGFtcFN0YXRlID0gKDAsIF9yZWFjdCkudXNlQ29udGV4dChfYW1wQ29udGV4dC5BbXBTdGF0ZUNvbnRleHQpO1xcbiAgdmFyIGhlYWRNYW5hZ2VyID0gKDAsIF9yZWFjdCkudXNlQ29udGV4dChfaGVhZE1hbmFnZXJDb250ZXh0LkhlYWRNYW5hZ2VyQ29udGV4dCk7XFxuICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcXFwiZGVmYXVsdFxcXCJdLmNyZWF0ZUVsZW1lbnQoX3NpZGVFZmZlY3RbXFxcImRlZmF1bHRcXFwiXSwge1xcbiAgICByZWR1Y2VDb21wb25lbnRzVG9TdGF0ZTogcmVkdWNlQ29tcG9uZW50cyxcXG4gICAgaGVhZE1hbmFnZXI6IGhlYWRNYW5hZ2VyLFxcbiAgICBpbkFtcE1vZGU6ICgwLCBfYW1wKS5pc0luQW1wTW9kZShhbXBTdGF0ZSlcXG4gIH0sIGNoaWxkcmVuKTtcXG59XFxuXFxuX3MoSGVhZCwgXFxcInNDVWF5Wm1yNVY5M3RVanVqeTAzS2RNQkNlYz1cXFwiKTtcXG5cXG5fYyA9IEhlYWQ7XFxudmFyIF9kZWZhdWx0ID0gSGVhZDtcXG5leHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0gPSBfZGVmYXVsdDtcXG5cXG5pZiAodHlwZW9mIGV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdID09PSAnb2JqZWN0JyAmJiBleHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0gIT09IG51bGwpIHtcXG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdLCBleHBvcnRzKTtcXG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcXFwiZGVmYXVsdFxcXCJdO1xcbn1cXG5cXG52YXIgX2M7XFxuXFxuJFJlZnJlc2hSZWckKF9jLCBcXFwiSGVhZFxcXCIpO1xcblxcbjtcXG4gICAgLy8gV3JhcHBlZCBpbiBhbiBJSUZFIHRvIGF2b2lkIHBvbGx1dGluZyB0aGUgZ2xvYmFsIHNjb3BlXFxuICAgIDtcXG4gICAgKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBfYSwgX2I7XFxuICAgICAgICAvLyBMZWdhY3kgQ1NTIGltcGxlbWVudGF0aW9ucyB3aWxsIGBldmFsYCBicm93c2VyIGNvZGUgaW4gYSBOb2RlLmpzIGNvbnRleHRcXG4gICAgICAgIC8vIHRvIGV4dHJhY3QgQ1NTLiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIG5lZWQgdG8gY2hlY2sgd2UncmUgaW4gYVxcbiAgICAgICAgLy8gYnJvd3NlciBjb250ZXh0IGJlZm9yZSBjb250aW51aW5nLlxcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJlxcbiAgICAgICAgICAgIC8vIEFNUCAvIE5vLUpTIG1vZGUgZG9lcyBub3QgaW5qZWN0IHRoZXNlIGhlbHBlcnM6XFxuICAgICAgICAgICAgJyRSZWZyZXNoSGVscGVycyQnIGluIHNlbGYpIHtcXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIF9fd2VicGFja19tb2R1bGVfXyBpcyBnbG9iYWxcXG4gICAgICAgICAgICB2YXIgY3VycmVudEV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIF9fd2VicGFja19tb2R1bGVfXyBpcyBnbG9iYWxcXG4gICAgICAgICAgICB2YXIgcHJldkV4cG9ydHMgPSAoX2IgPSAoX2EgPSBtb2R1bGUuaG90LmRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wcmV2RXhwb3J0cykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcXG4gICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCBoYXBwZW4gaW4gTWFpblRlbXBsYXRlIGJlY2F1c2UgdGhlIGV4cG9ydHMgbWlzbWF0Y2ggYmV0d2VlblxcbiAgICAgICAgICAgIC8vIHRlbXBsYXRpbmcgYW5kIGV4ZWN1dGlvbi5cXG4gICAgICAgICAgICBzZWxmLiRSZWZyZXNoSGVscGVycyQucmVnaXN0ZXJFeHBvcnRzRm9yUmVhY3RSZWZyZXNoKGN1cnJlbnRFeHBvcnRzLCBtb2R1bGUuaWQpO1xcbiAgICAgICAgICAgIC8vIEEgbW9kdWxlIGNhbiBiZSBhY2NlcHRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIGl0cyBleHBvcnRzLCBlLmcuIHdoZW5cXG4gICAgICAgICAgICAvLyBpdCBpcyBhIFJlZnJlc2ggQm91bmRhcnkuXFxuICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5pc1JlYWN0UmVmcmVzaEJvdW5kYXJ5KGN1cnJlbnRFeHBvcnRzKSkge1xcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBwcmV2aW91cyBleHBvcnRzIG9uIHVwZGF0ZSBzbyB3ZSBjYW4gY29tcGFyZSB0aGUgYm91bmRhcnlcXG4gICAgICAgICAgICAgICAgLy8gc2lnbmF0dXJlcy5cXG4gICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnByZXZFeHBvcnRzID0gY3VycmVudEV4cG9ydHM7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAvLyBVbmNvbmRpdGlvbmFsbHkgYWNjZXB0IGFuIHVwZGF0ZSB0byB0aGlzIG1vZHVsZSwgd2UnbGwgY2hlY2sgaWYgaXQnc1xcbiAgICAgICAgICAgICAgICAvLyBzdGlsbCBhIFJlZnJlc2ggQm91bmRhcnkgbGF0ZXIuXFxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgaW1wb3J0TWV0YSBpcyByZXBsYWNlZCBpbiB0aGUgbG9hZGVyXFxuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KCk7XFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZmllbGQgaXMgc2V0IHdoZW4gdGhlIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBtb2R1bGUgd2FzIGFcXG4gICAgICAgICAgICAgICAgLy8gUmVmcmVzaCBCb3VuZGFyeSwgbGV0dGluZyB1cyBrbm93IHdlIG5lZWQgdG8gY2hlY2sgZm9yIGludmFsaWRhdGlvbiBvclxcbiAgICAgICAgICAgICAgICAvLyBlbnF1ZXVlIGFuIHVwZGF0ZS5cXG4gICAgICAgICAgICAgICAgaWYgKHByZXZFeHBvcnRzICE9PSBudWxsKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyBBIGJvdW5kYXJ5IGNhbiBiZWNvbWUgaW5lbGlnaWJsZSBpZiBpdHMgZXhwb3J0cyBhcmUgaW5jb21wYXRpYmxlXFxuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIHRoZSBwcmV2aW91cyBleHBvcnRzLlxcbiAgICAgICAgICAgICAgICAgICAgLy9cXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB5b3UgYWRkL3JlbW92ZS9jaGFuZ2UgZXhwb3J0cywgd2UnbGwgd2FudCB0b1xcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtZXhlY3V0ZSB0aGUgaW1wb3J0aW5nIG1vZHVsZXMsIGFuZCBmb3JjZSB0aG9zZSBjb21wb25lbnRzIHRvXFxuICAgICAgICAgICAgICAgICAgICAvLyByZS1yZW5kZXIuIFNpbWlsYXJseSwgaWYgeW91IGNvbnZlcnQgYSBjbGFzcyBjb21wb25lbnQgdG8gYVxcbiAgICAgICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24sIHdlIHdhbnQgdG8gaW52YWxpZGF0ZSB0aGUgYm91bmRhcnkuXFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNob3VsZEludmFsaWRhdGVSZWFjdFJlZnJlc2hCb3VuZGFyeShwcmV2RXhwb3J0cywgY3VycmVudEV4cG9ydHMpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRSZWZyZXNoSGVscGVycyQuc2NoZWR1bGVVcGRhdGUoKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICAgICAgLy8gU2luY2Ugd2UganVzdCBleGVjdXRlZCB0aGUgY29kZSBmb3IgdGhlIG1vZHVsZSwgaXQncyBwb3NzaWJsZSB0aGF0IHRoZVxcbiAgICAgICAgICAgICAgICAvLyBuZXcgZXhwb3J0cyBtYWRlIGl0IGluZWxpZ2libGUgZm9yIGJlaW5nIGEgYm91bmRhcnkuXFxuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgY2FyZSBhYm91dCB0aGUgY2FzZSB3aGVuIHdlIHdlcmUgX3ByZXZpb3VzbHlfIGEgYm91bmRhcnksXFxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2UgYWxyZWFkeSBhY2NlcHRlZCB0aGlzIHVwZGF0ZSAoYWNjaWRlbnRhbCBzaWRlIGVmZmVjdCkuXFxuICAgICAgICAgICAgICAgIHZhciBpc05vTG9uZ2VyQUJvdW5kYXJ5ID0gcHJldkV4cG9ydHMgIT09IG51bGw7XFxuICAgICAgICAgICAgICAgIGlmIChpc05vTG9uZ2VyQUJvdW5kYXJ5KSB7XFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfSkoKTtcXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl1YjJSbFgyMXZaSFZzWlhNdmJtVjRkQzlrYVhOMEwzTm9ZWEpsWkM5c2FXSXZhR1ZoWkM1cWN5NXFjeUlzSW0xaGNIQnBibWR6SWpvaVFVRkJZVHM3T3pzN096czdPenRCUVVOaVFTdzRRMEZCTmtNN1FVRkRla05ITEVWQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVSclF5eERRVUUzUXp0QlFVZEJSQ3h0UWtGQlFTeEhRVUZ6UWtVc1YwRkJkRUk3UVVGRFFVWXNhMEpCUVVFc1IwRkJhMElzUzBGQlN5eERRVUYyUWpzN1FVRkRRU3hKUVVGSlJ5eE5RVUZOTEVkQlFVZERMSFZDUVVGMVFpeERRVUZEUXl4dFFrRkJUeXhEUVVGRExEUkRRVUZFTEVOQlFWSXNRMEZCY0VNN08wRkJRMEVzU1VGQlNVTXNWMEZCVnl4SFFVRkhReXh6UWtGQmMwSXNRMEZCUTBZc2JVSkJRVThzUTBGQlF5eDVSVUZCUkN4RFFVRlNMRU5CUVhoRE96dEJRVU5CTEVsQlFVbEhMRmRCUVZjc1IwRkJSMGdzYlVKQlFVOHNRMEZCUXl4NVJVRkJSQ3hEUVVGNlFqczdRVUZEUVN4SlFVRkpTU3h0UWtGQmJVSXNSMEZCUjBvc2JVSkJRVThzUTBGQlF5d3lSa0ZCUkN4RFFVRnFRenM3UVVGRFFTeEpRVUZKU3l4SlFVRkpMRWRCUVVkTUxHMUNRVUZQTEVOQlFVTXNlVVJCUVVRc1EwRkJiRUk3TzBGQlEwRXNTVUZCU1Uwc1RVRkJUU3hIUVVGSFRpeHRRa0ZCVHl4RFFVRkRMRFpFUVVGRUxFTkJRWEJDT3p0QlFVTkJMRk5CUVZORkxITkNRVUZVTEVOQlFXZERTeXhIUVVGb1F5eEZRVUZ4UXp0QlFVTnFReXhUUVVGUFFTeEhRVUZITEVsQlFVbEJMRWRCUVVjc1EwRkJRME1zVlVGQldDeEhRVUYzUWtRc1IwRkJlRUlzUjBGQk9FSTdRVUZEYWtNc1pVRkJVMEU3UVVGRWQwSXNSMEZCY2tNN1FVRkhTRHM3UVVGRFJDeFRRVUZUVWl4MVFrRkJWQ3hEUVVGcFExRXNSMEZCYWtNc1JVRkJjME03UVVGRGJFTXNUVUZCU1VFc1IwRkJSeXhKUVVGSlFTeEhRVUZITEVOQlFVTkRMRlZCUVdZc1JVRkJNa0k3UVVGRGRrSXNWMEZCVDBRc1IwRkJVRHRCUVVOSUxFZEJSa1FzVFVGRlR6dEJRVU5JTEZGQlFVbEZMRTFCUVUwc1IwRkJSeXhGUVVGaU96dEJRVU5CTEZGQlFVbEdMRWRCUVVjc1NVRkJTU3hKUVVGWUxFVkJRV2xDTzBGQlEySXNWMEZCU1N4SlFVRkpSeXhIUVVGU0xFbEJRV1ZJTEVkQlFXWXNSVUZCYlVJN1FVRkRaaXhaUVVGSlpDeE5RVUZOTEVOQlFVTnJRaXhUUVVGUUxFTkJRV2xDUXl4alFVRnFRaXhEUVVGblEwTXNTVUZCYUVNc1EwRkJjVU5PTEVkQlFYSkRMRVZCUVRCRFJ5eEhRVUV4UXl4RFFVRktMRVZCUVc5RU8wRkJRMmhFTEdOQlFVbEpMRWxCUVVrc1IwRkJSM0pDTEUxQlFVMHNRMEZCUTBNc1kwRkJVQ3hKUVVGNVFrUXNUVUZCVFN4RFFVRkRjMElzZDBKQlFXaERMRWRCUVRKRWRFSXNUVUZCVFN4RFFVRkRjMElzZDBKQlFWQXNRMEZCWjBOU0xFZEJRV2hETEVWQlFYRkRSeXhIUVVGeVF5eERRVUV6UkN4SFFVRjFSeXhGUVVGc1NEczdRVUZEUVN4alFVRkpTU3hKUVVGSkxFTkJRVU5GTEVkQlFVd3NTVUZCV1VZc1NVRkJTU3hEUVVGRFJ5eEhRVUZ5UWl4RlFVRXdRanRCUVVOMFFuaENMRmxCUVVGQkxFMUJRVTBzUTBGQlEwTXNZMEZCVUN4RFFVRnpRbVVzVFVGQmRFSXNSVUZCT0VKRExFZEJRVGxDTEVWQlFXMURTU3hKUVVGdVF6dEJRVU5JTEZkQlJrUXNUVUZGVHp0QlFVTklUQ3haUVVGQlFTeE5RVUZOTEVOQlFVTkRMRWRCUVVRc1EwRkJUaXhIUVVGalNDeEhRVUZITEVOQlFVTkhMRWRCUVVRc1EwRkJha0k3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2pzN1FVRkRSRVFzU1VGQlFVRXNUVUZCVFN4WFFVRk9MRWRCUVdsQ1JpeEhRVUZxUWp0QlFVTkJMRmRCUVU5RkxFMUJRVkE3UVVGRFNEdEJRVU5LT3p0QlFVTkVMRk5CUVZOYUxGZEJRVlFzUjBGQmQwTTdRVUZCUVN4TlFVRnVRbkZDTEZOQlFXMUNMSFZGUVVGUUxFdEJRVTg3UVVGRGNFTXNUVUZCVFVNc1NVRkJTU3hIUVVGSExFTkJRMVFzWVVGQlkzSkNMRTFCUVUwc1YwRkJUaXhEUVVGbGMwSXNZVUZCWml4RFFVRTJRaXhOUVVFM1FpeEZRVUZ4UXp0QlFVTXZRME1zU1VGQlFVRXNUMEZCVHl4RlFVRkZPMEZCUkhORExFZEJRWEpETEVOQlJFd3NRMEZCWWpzN1FVRkxRU3hOUVVGSkxFTkJRVU5JTEZOQlFVd3NSVUZCWjBJN1FVRkRXa01zU1VGQlFVRXNTVUZCU1N4RFFVRkRSeXhKUVVGTUxFVkJRVlVzWVVGQlkzaENMRTFCUVUwc1YwRkJUaXhEUVVGbGMwSXNZVUZCWml4RFFVRTJRaXhOUVVFM1FpeEZRVUZ4UXp0QlFVTjZSRWNzVFVGQlFVRXNTVUZCU1N4RlFVRkZMRlZCUkcxRU8wRkJSWHBFUXl4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGR1owUXNTMEZCY2tNc1EwRkJlRUk3UVVGSlNEczdRVUZEUkN4VFFVRlBUQ3hKUVVGUU8wRkJRMGc3TzBGQlEwUXNVMEZCVTAwc1owSkJRVlFzUTBGQk1FSkRMRWxCUVRGQ0xFVkJRV2REUXl4TFFVRm9ReXhGUVVGMVF6dEJRVU51UXp0QlFVTkJMRTFCUVVrc1QwRkJUMEVzUzBGQlVDeExRVUZwUWl4UlFVRnFRaXhKUVVFMlFpeFBRVUZQUVN4TFFVRlFMRXRCUVdsQ0xGRkJRV3hFTEVWQlFUUkVPMEZCUTNoRUxGZEJRVTlFTEVsQlFWQTdRVUZEU0N4SFFVcHJReXhEUVV0dVF6czdPMEZCUTBFc1RVRkJTVU1zUzBGQlN5eERRVUZEUXl4SlFVRk9MRXRCUVdVNVFpeE5RVUZOTEZkQlFVNHNRMEZCWlN0Q0xGRkJRV3hETEVWQlFUUkRPMEZCUTNoRExGZEJRVTlJTEVsQlFVa3NRMEZCUTBrc1RVRkJUQ3hEUVVGWmFFTXNUVUZCVFN4WFFVRk9MRU5CUVdWcFF5eFJRVUZtTEVOQlFYZENReXhQUVVGNFFpeERRVUZuUTB3c1MwRkJTeXhEUVVGRFRTeExRVUZPTEVOQlFWbERMRkZCUVRWRExFVkJRWE5FUXl4TlFVRjBSQ3hEUVVFMlJDeFZRVUZEUXl4WlFVRkVMRVZCUVdWRExHRkJRV1lzUlVGQkswSTdRVUZETTBjc1ZVRkJTU3hQUVVGUFFTeGhRVUZRTEV0QlFYbENMRkZCUVhwQ0xFbEJRWEZETEU5QlFVOUJMR0ZCUVZBc1MwRkJlVUlzVVVGQmJFVXNSVUZCTkVVN1FVRkRlRVVzWlVGQlQwUXNXVUZCVUR0QlFVTklPenRCUVVORUxHRkJRVTlCTEZsQlFWa3NRMEZCUTA0c1RVRkJZaXhEUVVGdlFrOHNZVUZCY0VJc1EwRkJVRHRCUVVOSUxFdEJUR3RDTEVWQlMyaENMRVZCVEdkQ0xFTkJRVm9zUTBGQlVEdEJRVTFJT3p0QlFVTkVMRk5CUVU5WUxFbEJRVWtzUTBGQlEwa3NUVUZCVEN4RFFVRlpTQ3hMUVVGYUxFTkJRVkE3UVVGRFNEczdRVUZEUkN4SlFVRk5WeXhUUVVGVExFZEJRVWNzUTBGRFpDeE5RVVJqTEVWQlJXUXNWMEZHWXl4RlFVZGtMRk5CU0dNc1JVRkpaQ3hWUVVwakxFTkJRV3hDTzBGQlRVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGQlJ5eFRRVUZUUXl4TlFVRlVMRWRCUVd0Q08wRkJRMnBDTEUxQlFVMURMRWxCUVVrc1IwRkJSeXhKUVVGSlF5eEhRVUZLTEVWQlFXSTdRVUZEUVN4TlFVRk5ReXhKUVVGSkxFZEJRVWNzU1VGQlNVUXNSMEZCU2l4RlFVRmlPMEZCUTBFc1RVRkJUVVVzVTBGQlV5eEhRVUZITEVsQlFVbEdMRWRCUVVvc1JVRkJiRUk3UVVGRFFTeE5RVUZOUnl4alFVRmpMRWRCUVVjc1JVRkJka0k3UVVGRFFTeFRRVUZQTEZWQlFVTkRMRU5CUVVRc1JVRkJTenRCUVVOU0xGRkJRVWxETEZGQlFWRXNSMEZCUnl4SlFVRm1PMEZCUTBFc1VVRkJTVU1zVFVGQlRTeEhRVUZITEV0QlFXSTdPMEZCUTBFc1VVRkJTVVlzUTBGQlF5eERRVUZEYmtNc1IwRkJSaXhKUVVGVExFOUJRVTl0UXl4RFFVRkRMRU5CUVVOdVF5eEhRVUZVTEV0QlFXbENMRkZCUVRGQ0xFbEJRWE5EYlVNc1EwRkJReXhEUVVGRGJrTXNSMEZCUml4RFFVRk5jME1zVDBGQlRpeERRVUZqTEVkQlFXUXNTVUZCY1VJc1EwRkJMMFFzUlVGQmEwVTdRVUZET1VSRUxFMUJRVUZCTEUxQlFVMHNSMEZCUnl4SlFVRlVPMEZCUTBFc1ZVRkJUWEpETEVkQlFVY3NSMEZCUjIxRExFTkJRVU1zUTBGQlEyNURMRWRCUVVZc1EwRkJUWFZETEV0QlFVNHNRMEZCV1Vvc1EwRkJReXhEUVVGRGJrTXNSMEZCUml4RFFVRk5jME1zVDBGQlRpeERRVUZqTEVkQlFXUXNTVUZCY1VJc1EwRkJha01zUTBGQldqczdRVUZEUVN4VlFVRkpVaXhKUVVGSkxFTkJRVU5WTEVkQlFVd3NRMEZCVTNoRExFZEJRVlFzUTBGQlNpeEZRVUZ0UWp0QlFVTm1iME1zVVVGQlFVRXNVVUZCVVN4SFFVRkhMRXRCUVZnN1FVRkRTQ3hQUVVaRUxFMUJSVTg3UVVGRFNFNHNVVUZCUVVFc1NVRkJTU3hEUVVGRFZ5eEhRVUZNTEVOQlFWTjZReXhIUVVGVU8wRkJRMGc3UVVGRFNpeExRVmhQTEVOQldWSTdPenRCUVVOQkxGbEJRVTl0UXl4RFFVRkRMRU5CUVVOcVFpeEpRVUZVTzBGQlEwa3NWMEZCU3l4UFFVRk1PMEZCUTBFc1YwRkJTeXhOUVVGTU8wRkJRMGtzV1VGQlNXTXNTVUZCU1N4RFFVRkRVU3hIUVVGTUxFTkJRVk5NTEVOQlFVTXNRMEZCUTJwQ0xFbEJRVmdzUTBGQlNpeEZRVUZ6UWp0QlFVTnNRbXRDTEZWQlFVRkJMRkZCUVZFc1IwRkJSeXhMUVVGWU8wRkJRMGdzVTBGR1JDeE5RVVZQTzBGQlEwaEtMRlZCUVVGQkxFbEJRVWtzUTBGQlExTXNSMEZCVEN4RFFVRlRUaXhEUVVGRExFTkJRVU5xUWl4SlFVRllPMEZCUTBnN08wRkJRMFE3TzBGQlEwb3NWMEZCU3l4TlFVRk1PMEZCUTBrc1lVRkJTU3hKUVVGSmQwSXNRMEZCUXl4SFFVRkhMRU5CUVZJc1JVRkJWME1zUjBGQlJ5eEhRVUZIWml4VFFVRlRMRU5CUVVOblFpeE5RVUV2UWl4RlFVRjFRMFlzUTBGQlF5eEhRVUZIUXl4SFFVRXpReXhGUVVGblJFUXNRMEZCUXl4RlFVRnFSQ3hGUVVGdlJEdEJRVU5vUkN4alFVRk5SeXhSUVVGUkxFZEJRVWRxUWl4VFFVRlRMRU5CUVVOakxFTkJRVVFzUTBGQk1VSTdRVUZEUVN4alFVRkpMRU5CUVVOUUxFTkJRVU1zUTBGQlExb3NTMEZCUml4RFFVRlJja0lzWTBGQlVpeERRVUYxUWpKRExGRkJRWFpDTEVOQlFVd3NSVUZCZFVNN08wRkJRM1pETEdOQlFVbEJMRkZCUVZFc1MwRkJTeXhUUVVGcVFpeEZRVUUwUWp0QlFVTjRRaXhuUWtGQlNWb3NVMEZCVXl4RFFVRkRUeXhIUVVGV0xFTkJRV05MTEZGQlFXUXNRMEZCU2l4RlFVRTJRanRCUVVONlFsUXNZMEZCUVVFc1VVRkJVU3hIUVVGSExFdEJRVmc3UVVGRFNDeGhRVVpFTEUxQlJVODdRVUZEU0Vnc1kwRkJRVUVzVTBGQlV5eERRVUZEVVN4SFFVRldMRU5CUVdOSkxGRkJRV1E3UVVGRFNEdEJRVU5LTEZkQlRrUXNUVUZOVHp0QlFVTklMR2RDUVVGTlF5eFJRVUZSTEVkQlFVZFlMRU5CUVVNc1EwRkJRMW9zUzBGQlJpeERRVUZSYzBJc1VVRkJVaXhEUVVGcVFqdEJRVU5CTEdkQ1FVRk5SU3hWUVVGVkxFZEJRVWRpTEdOQlFXTXNRMEZCUTFjc1VVRkJSQ3hEUVVGa0xFbEJRVFJDTEVsQlFVbGtMRWRCUVVvc1JVRkJMME03TzBGQlEwRXNaMEpCUVVrc1EwRkJRMk1zVVVGQlVTeExRVUZMTEUxQlFXSXNTVUZCZFVJc1EwRkJRMUlzVFVGQmVrSXNTMEZCYjBOVkxGVkJRVlVzUTBGQlExQXNSMEZCV0N4RFFVRmxUU3hSUVVGbUxFTkJRWGhETEVWQlFXdEZPMEZCUXpsRVZpeGpRVUZCUVN4UlFVRlJMRWRCUVVjc1MwRkJXRHRCUVVOSUxHRkJSa1FzVFVGRlR6dEJRVU5JVnl4alFVRkJRU3hWUVVGVkxFTkJRVU5PTEVkQlFWZ3NRMEZCWlVzc1VVRkJaanRCUVVOQldpeGpRVUZCUVN4alFVRmpMRU5CUVVOWExGRkJRVVFzUTBGQlpDeEhRVUV5UWtVc1ZVRkJNMEk3UVVGRFNEdEJRVU5LTzBGQlEwbzdPMEZCUTBRN1FVRTVRbEk3TzBGQlowTkJMRmRCUVU5WUxGRkJRVkE3UVVGRFNDeEhRVGxEUkR0QlFTdERTRHRCUVVORU8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVRkJTU3hUUVVGVFdTeG5Ra0ZCVkN4RFFVRXdRa01zV1VGQk1VSXNSVUZCZDBNeFFpeExRVUY0UXl4RlFVRXJRenRCUVVNdlF5eFRRVUZQTUVJc1dVRkJXU3hEUVVGRGVFSXNUVUZCWWl4RFFVRnZRaXhWUVVGRFZDeEpRVUZFTEVWQlFVOXJReXhYUVVGUUxFVkJRWEZDTzBGQlF6VkRMRkZCUVUxRExHMUNRVUZ0UWl4SFFVRkhMMFFzVFVGQlRTeFhRVUZPTEVOQlFXVnBReXhSUVVGbUxFTkJRWGRDUXl4UFFVRjRRaXhEUVVGblF6UkNMRmRCUVZjc1EwRkJRek5DTEV0QlFWb3NRMEZCYTBKRExGRkJRV3hFTEVOQlFUVkNPenRCUVVOQkxGZEJRVTlTTEVsQlFVa3NRMEZCUTBrc1RVRkJUQ3hEUVVGWkswSXNiVUpCUVZvc1EwRkJVRHRCUVVOSUxFZEJTRTBzUlVGSFNpeEZRVWhKTEVWQlIwRXhRaXhOUVVoQkxFTkJSMDlXTEdkQ1FVaFFMRVZCUjNsQ0xFVkJTSHBDTEVWQlJ6WkNjVU1zVDBGSU4wSXNSMEZIZFVOb1F5eE5RVWgyUXl4RFFVYzRRMnBETEZkQlFWY3NRMEZCUTI5RExFdEJRVXNzUTBGQlEyWXNVMEZCVUN4RFFVaDZSQ3hGUVVjMFJUWkRMRTFCU0RWRkxFTkJSMjFHZUVJc1RVRkJUU3hGUVVoNlJpeEZRVWMyUm5WQ0xFOUJTRGRHTEVkQlIzVkhSU3hIUVVoMlJ5eERRVWN5Unl4VlFVRkRReXhEUVVGRUxFVkJRVWxpTEVOQlFVb3NSVUZCVVR0QlFVTjBTQ3hSUVVGTk1VTXNSMEZCUnl4SFFVRkhkVVFzUTBGQlF5eERRVUZEZGtRc1IwRkJSaXhKUVVGVE1FTXNRMEZCY2tJN08wRkJRMEVzVVVGQlNTeExRVUZLTEVWQlFYRkhMR2xDUVdkQ2NFYzdPMEZCUTBRc1VVRkJTU3hKUVVGS0xFVkJRVFpGTzBGQlEzcEZPMEZCUTBFc1ZVRkJTV0VzUTBGQlF5eERRVUZEY2tNc1NVRkJSaXhMUVVGWExGRkJRVmdzU1VGQmRVSnhReXhEUVVGRExFTkJRVU5vUXl4TFFVRkdMRU5CUVZFc1RVRkJVaXhOUVVGdlFpeHhRa0ZCTDBNc1JVRkJjMFU3UVVGRGJFVXNXVUZCVFRKRExGVkJRVlVzUjBGQlIxZ3NRMEZCUXl4RFFVRkRhRU1zUzBGQlJpeERRVUZSTEV0QlFWSXNjME5CUVRKRFowTXNRMEZCUXl4RFFVRkRhRU1zUzBGQlJpeERRVUZSTEV0QlFWSXNRMEZCTTBNc01rSkJRVzVDTzBGQlEwRXNVMEZCUXl4SFFVRkhNMElzVFVGQlNpeEZRVUZaZFVVc1VVRkJXaXg1UkVGQmMwVkVMRlZCUVhSRk8wRkJRMGdzVDBGSVJDeE5RVWRQTEVsQlFVbFlMRU5CUVVNc1EwRkJRM0pETEVsQlFVWXNTMEZCVnl4TlFVRllMRWxCUVhGQ2NVTXNRMEZCUXl4RFFVRkRhRU1zUzBGQlJpeERRVUZSTEV0QlFWSXNUVUZCYlVJc1dVRkJOVU1zUlVGQk1FUTdRVUZETjBRc1UwRkJReXhIUVVGSE0wSXNUVUZCU2l4RlFVRlpkVVVzVVVGQldpeHBSMEZCTWtkYUxFTkJRVU1zUTBGQlEyaERMRXRCUVVZc1EwRkJVU3hOUVVGU0xFTkJRVE5ITzBGQlEwZzdRVUZEU2pzN1FVRkRSQ3hYUVVGUExHRkJRV051UXl4TlFVRk5MRmRCUVU0c1EwRkJaVFJGTEZsQlFXWXNRMEZCTkVKVUxFTkJRVFZDTEVWQlFTdENPMEZCUTJoRWRrUXNUVUZCUVVFc1IwRkJSeXhGUVVGSVFUdEJRVVJuUkN4TFFVRXZRaXhEUVVGeVFqdEJRVWRJTEVkQmJFTk5MRU5CUVZBN1FVRnRRMGc3UVVGRFJEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJRVWtzVTBGQlUyOUZMRWxCUVZRc1QwRkJOa0k3UVVGQlFUczdRVUZCUVN4TlFVRmlOVU1zVVVGQllTeFJRVUZpUVN4UlFVRmhPMEZCUXpkQ0xFMUJRVTAyUXl4UlFVRlJMRWRCUVVjc1EwRkJReXhIUVVGSGFrWXNUVUZCU2l4RlFVRlphMFlzVlVGQldpeERRVUYxUWpkRkxGZEJRVmNzUTBGQlF6aEZMR1ZCUVc1RExFTkJRV3BDTzBGQlEwRXNUVUZCVFVNc1YwRkJWeXhIUVVGSExFTkJRVU1zUjBGQlIzQkdMRTFCUVVvc1JVRkJXV3RHTEZWQlFWb3NRMEZCZFVJMVJTeHRRa0ZCYlVJc1EwRkJReXRGTEd0Q1FVRXpReXhEUVVGd1FqdEJRVU5CTEZOQlFVOHNZVUZCWTNKR0xFMUJRVTBzVjBGQlRpeERRVUZsYzBJc1lVRkJaaXhEUVVFMlFtNUNMRmRCUVZjc1YwRkJlRU1zUlVGQmEwUTdRVUZEYmtWdFJpeEpRVUZCUVN4MVFrRkJkVUlzUlVGQlJURkNMR2RDUVVRd1F6dEJRVVZ1UlhkQ0xFbEJRVUZCTEZkQlFWY3NSVUZCUlVFc1YwRkdjMFE3UVVGSGJrVm9SU3hKUVVGQlFTeFRRVUZUTEVWQlFVVXNRMEZCUXl4SFFVRkhZaXhKUVVGS0xFVkJRVlZuUml4WFFVRldMRU5CUVhOQ1RpeFJRVUYwUWp0QlFVaDNSQ3hIUVVGc1JDeEZRVWxzUWpkRExGRkJTbXRDTEVOQlFYSkNPMEZCUzBnN08wZEJVbGswUXl4Sk96dExRVUZCUVN4Sk8wRkJVMklzU1VGQlNWRXNVVUZCVVN4SFFVRkhVaXhKUVVGbU8wRkJRMEZ1Uml4clFrRkJRU3hIUVVGclFqSkdMRkZCUVd4Q096dEJRVVZCTEVsQlFVa3NUMEZCVHpOR0xFOUJRVThzVjBGQlpDeExRVUV5UWl4VlFVRXpRaXhKUVVFd1F5eFBRVUZQUVN4UFFVRlBMRmRCUVdRc1MwRkJNa0lzVVVGQk0wSXNTVUZCZFVOQkxFOUJRVThzVjBGQlVDeExRVUZ2UWl4SlFVRjZSeXhGUVVGblNEdEJRVU01UjBZc1JVRkJRVUVzVFVGQlRTeERRVUZET0VZc1RVRkJVQ3hEUVVGak5VWXNUMEZCVHl4WFFVRnlRaXhGUVVFclFrRXNUMEZCTDBJN1FVRkRRVFpHTEVWQlFVRkJMRTFCUVUwc1EwRkJRemRHTEU5QlFWQXNSMEZCYVVKQkxFOUJRVThzVjBGQmVFSTdRVUZEUkNJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMTlPWDBVdkxpOXViMlJsWDIxdlpIVnNaWE12Ym1WNGRDOWthWE4wTDNOb1lYSmxaQzlzYVdJdmFHVmhaQzVxY3o5bVlqVmtJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJQ0FnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBTR1ZoWkNBOUlHUmxabUYxYkhSSVpXRmtPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnZG05cFpDQXdPMXh1ZG1GeUlGOXlaV0ZqZENBOUlGOXBiblJsY205d1VtVnhkV2x5WlZkcGJHUmpZWEprS0hKbGNYVnBjbVVvWENKeVpXRmpkRndpS1NrN1hHNTJZWElnWDNOcFpHVkZabVpsWTNRZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0hKbGNYVnBjbVVvWENJdUwzTnBaR1V0WldabVpXTjBYQ0lwS1R0Y2JuWmhjaUJmWVcxd1EyOXVkR1Y0ZENBOUlISmxjWFZwY21Vb1hDSXVMMkZ0Y0MxamIyNTBaWGgwWENJcE8xeHVkbUZ5SUY5b1pXRmtUV0Z1WVdkbGNrTnZiblJsZUhRZ1BTQnlaWEYxYVhKbEtGd2lMaTlvWldGa0xXMWhibUZuWlhJdFkyOXVkR1Y0ZEZ3aUtUdGNiblpoY2lCZllXMXdJRDBnY21WeGRXbHlaU2hjSWk0dllXMXdYQ0lwTzF4dWRtRnlJRjkxZEdsc2N5QTlJSEpsY1hWcGNtVW9YQ0l1TDNWMGFXeHpYQ0lwTzF4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIdGNiaUFnSUNCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2UxeHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQnZZbXBjYmlBZ0lDQjlPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsVjJsc1pHTmhjbVFvYjJKcUtTQjdYRzRnSUNBZ2FXWWdLRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2IySnFPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkUFltb2dQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzlpYWlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJR3RsZVNCcGJpQnZZbW9wZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxTENCclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrWlhOaklEMGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1SUNZbUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lnUHlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRzlpYWl3Z2EyVjVLU0E2SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHVnpZeTVuWlhRZ2ZId2daR1Z6WXk1elpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodVpYZFBZbW9zSUd0bGVTd2daR1Z6WXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGRQWW1wYmEyVjVYU0E5SUc5aWFsdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzVsZDA5aWFpNWtaV1poZFd4MElEMGdiMkpxTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM1QySnFPMXh1SUNBZ0lIMWNibjFjYm1aMWJtTjBhVzl1SUdSbFptRjFiSFJJWldGa0tHbHVRVzF3VFc5a1pTQTlJR1poYkhObEtTQjdYRzRnSUNBZ1kyOXVjM1FnYUdWaFpDQTlJRnRjYmlBZ0lDQWdJQ0FnTHlvalgxOVFWVkpGWDE4cUx5QmZjbVZoWTNRdVpHVm1ZWFZzZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpYldWMFlWd2lMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0Z5VTJWME9pQmNJblYwWmkwNFhDSmNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQmRPMXh1SUNBZ0lHbG1JQ2doYVc1QmJYQk5iMlJsS1NCN1hHNGdJQ0FnSUNBZ0lHaGxZV1F1Y0hWemFDZ3ZLaU5mWDFCVlVrVmZYeW92SUY5eVpXRmpkQzVrWldaaGRXeDBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSnRaWFJoWENJc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJRndpZG1sbGQzQnZjblJjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGJuUTZJRndpZDJsa2RHZzlaR1YyYVdObExYZHBaSFJvWENKY2JpQWdJQ0FnSUNBZ2ZTa3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYUdWaFpEdGNibjFjYm1aMWJtTjBhVzl1SUc5dWJIbFNaV0ZqZEVWc1pXMWxiblFvYkdsemRDd2dZMmhwYkdRcElIdGNiaUFnSUNBdkx5QlNaV0ZqZENCamFHbHNaSEpsYmlCallXNGdZbVVnWENKemRISnBibWRjSWlCdmNpQmNJbTUxYldKbGNsd2lJR2x1SUhSb2FYTWdZMkZ6WlNCM1pTQnBaMjV2Y21VZ2RHaGxiU0JtYjNJZ1ltRmphM2RoY21SeklHTnZiWEJoZEZ4dUlDQWdJR2xtSUNoMGVYQmxiMllnWTJocGJHUWdQVDA5SUNkemRISnBibWNuSUh4OElIUjVjR1Z2WmlCamFHbHNaQ0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHeHBjM1E3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRUZrWkhNZ2MzVndjRzl5ZENCbWIzSWdVbVZoWTNRdVJuSmhaMjFsYm5SY2JpQWdJQ0JwWmlBb1kyaHBiR1F1ZEhsd1pTQTlQVDBnWDNKbFlXTjBMbVJsWm1GMWJIUXVSbkpoWjIxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3hwYzNRdVkyOXVZMkYwS0Y5eVpXRmpkQzVrWldaaGRXeDBMa05vYVd4a2NtVnVMblJ2UVhKeVlYa29ZMmhwYkdRdWNISnZjSE11WTJocGJHUnlaVzRwTG5KbFpIVmpaU2dvWm5KaFoyMWxiblJNYVhOMExDQm1jbUZuYldWdWRFTm9hV3hrS1QwK2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbWNtRm5iV1Z1ZEVOb2FXeGtJRDA5UFNBbmMzUnlhVzVuSnlCOGZDQjBlWEJsYjJZZ1puSmhaMjFsYm5SRGFHbHNaQ0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1puSmhaMjFsYm5STWFYTjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1p5WVdkdFpXNTBUR2x6ZEM1amIyNWpZWFFvWm5KaFoyMWxiblJEYUdsc1pDazdYRzRnSUNBZ0lDQWdJSDBzSUZ0ZEtTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJzYVhOMExtTnZibU5oZENoamFHbHNaQ2s3WEc1OVhHNWpiMjV6ZENCTlJWUkJWRmxRUlZNZ1BTQmJYRzRnSUNBZ0oyNWhiV1VuTEZ4dUlDQWdJQ2RvZEhSd1JYRjFhWFluTEZ4dUlDQWdJQ2RqYUdGeVUyVjBKeXhjYmlBZ0lDQW5hWFJsYlZCeWIzQW5YRzVkTzF4dUx5cGNiaUJ5WlhSMWNtNXpJR0VnWm5WdVkzUnBiMjRnWm05eUlHWnBiSFJsY21sdVp5Qm9aV0ZrSUdOb2FXeGtJR1ZzWlcxbGJuUnpYRzRnZDJocFkyZ2djMmh2ZFd4a2JpZDBJR0psSUdSMWNHeHBZMkYwWldRc0lHeHBhMlVnUEhScGRHeGxMejVjYmlCQmJITnZJR0ZrWkhNZ2MzVndjRzl5ZENCbWIzSWdaR1ZrZFhCc2FXTmhkR1ZrSUdCclpYbGdJSEJ5YjNCbGNuUnBaWE5jYmlvdklHWjFibU4wYVc5dUlIVnVhWEYxWlNncElIdGNiaUFnSUNCamIyNXpkQ0JyWlhseklEMGdibVYzSUZObGRDZ3BPMXh1SUNBZ0lHTnZibk4wSUhSaFozTWdQU0J1WlhjZ1UyVjBLQ2s3WEc0Z0lDQWdZMjl1YzNRZ2JXVjBZVlI1Y0dWeklEMGdibVYzSUZObGRDZ3BPMXh1SUNBZ0lHTnZibk4wSUcxbGRHRkRZWFJsWjI5eWFXVnpJRDBnZTMwN1hHNGdJQ0FnY21WMGRYSnVJQ2hvS1QwK2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYVhOVmJtbHhkV1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FHRnpTMlY1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUdsbUlDaG9MbXRsZVNBbUppQjBlWEJsYjJZZ2FDNXJaWGtnSVQwOUlDZHVkVzFpWlhJbklDWW1JR2d1YTJWNUxtbHVaR1Y0VDJZb0p5UW5LU0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdoaGMwdGxlU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JyWlhrZ1BTQm9MbXRsZVM1emJHbGpaU2hvTG10bGVTNXBibVJsZUU5bUtDY2tKeWtnS3lBeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHJaWGx6TG1oaGN5aHJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYTlZibWx4ZFdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhMlY1Y3k1aFpHUW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1pHVm1ZWFZzZEMxallYTmxYRzRnSUNBZ0lDQWdJSE4zYVhSamFDaG9MblI1Y0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kR2wwYkdVbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5ZbUZ6WlNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJoWjNNdWFHRnpLR2d1ZEhsd1pTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYTlZibWx4ZFdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZV2R6TG1Ga1pDaG9MblI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyMWxkR0VuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQXNJR3hsYmlBOUlFMUZWRUZVV1ZCRlV5NXNaVzVuZEdnN0lHa2dQQ0JzWlc0N0lHa3JLeWw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxbGRHRjBlWEJsSUQwZ1RVVlVRVlJaVUVWVFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV2d1Y0hKdmNITXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2JXVjBZWFI1Y0dVcEtTQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWxkR0YwZVhCbElEMDlQU0FuWTJoaGNsTmxkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRaWFJoVkhsd1pYTXVhR0Z6S0cxbGRHRjBlWEJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6Vlc1cGNYVmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsZEdGVWVYQmxjeTVoWkdRb2JXVjBZWFI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1kyRjBaV2R2Y25rZ1BTQm9MbkJ5YjNCelcyMWxkR0YwZVhCbFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOaGRHVm5iM0pwWlhNZ1BTQnRaWFJoUTJGMFpXZHZjbWxsYzF0dFpYUmhkSGx3WlYwZ2ZId2dibVYzSUZObGRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NodFpYUmhkSGx3WlNBaFBUMGdKMjVoYldVbklIeDhJQ0ZvWVhOTFpYa3BJQ1ltSUdOaGRHVm5iM0pwWlhNdWFHRnpLR05oZEdWbmIzSjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpWVzVwY1hWbElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKcFpYTXVZV1JrS0dOaGRHVm5iM0o1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWFJoUTJGMFpXZHZjbWxsYzF0dFpYUmhkSGx3WlYwZ1BTQmpZWFJsWjI5eWFXVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGMxVnVhWEYxWlR0Y2JpQWdJQ0I5TzF4dWZWeHVMeW9xWEc0Z0tseHVJQ29nUUhCaGNtRnRJR2hsWVdSRmJHVnRaVzUwY3lCTWFYTjBJRzltSUcxMWJIUnBjR3hsSUR4SVpXRmtQaUJwYm5OMFlXNWpaWE5jYmlBcUx5Qm1kVzVqZEdsdmJpQnlaV1IxWTJWRGIyMXdiMjVsYm5SektHaGxZV1JGYkdWdFpXNTBjeXdnY0hKdmNITXBJSHRjYmlBZ0lDQnlaWFIxY200Z2FHVmhaRVZzWlcxbGJuUnpMbkpsWkhWalpTZ29iR2x6ZEN3Z2FHVmhaRVZzWlcxbGJuUXBQVDU3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2hsWVdSRmJHVnRaVzUwUTJocGJHUnlaVzRnUFNCZmNtVmhZM1F1WkdWbVlYVnNkQzVEYUdsc1pISmxiaTUwYjBGeWNtRjVLR2hsWVdSRmJHVnRaVzUwTG5CeWIzQnpMbU5vYVd4a2NtVnVLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3hwYzNRdVkyOXVZMkYwS0dobFlXUkZiR1Z0Wlc1MFEyaHBiR1J5Wlc0cE8xeHVJQ0FnSUgwc0lGdGRLUzV5WldSMVkyVW9iMjVzZVZKbFlXTjBSV3hsYldWdWRDd2dXMTBwTG5KbGRtVnljMlVvS1M1amIyNWpZWFFvWkdWbVlYVnNkRWhsWVdRb2NISnZjSE11YVc1QmJYQk5iMlJsS1NrdVptbHNkR1Z5S0hWdWFYRjFaU2dwS1M1eVpYWmxjbk5sS0NrdWJXRndLQ2hqTENCcEtUMCtlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnJaWGtnUFNCakxtdGxlU0I4ZkNCcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2RrWlhabGJHOXdiV1Z1ZENjZ0ppWWdjSEp2WTJWemN5NWxibll1WDE5T1JWaFVYMDlRVkVsTlNWcEZYMFpQVGxSVElDWW1JQ0Z3Y205d2N5NXBia0Z0Y0UxdlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqTG5SNWNHVWdQVDA5SUNkc2FXNXJKeUFtSmlCakxuQnliM0J6V3lkb2NtVm1KMTBnSmlZZ0x5OGdWRTlFVHlod2NtRjBaV1ZyWW1oQUtUb2dVbVZ3YkdGalpTQjBhR2x6SUhkcGRHZ2dZMjl1YzNRZ1puSnZiU0JnWTI5dWMzUmhiblJ6WUNCM2FHVnVJSFJvWlNCMGNtVmxJSE5vWVd0cGJtY2dkMjl5YTNNdVhHNGdJQ0FnSUNBZ0lDQWdJQ0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJoMGRIQnpPaTh2Wm05dWRITXVaMjl2WjJ4bFlYQnBjeTVqYjIwdlkzTnpKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYUhSMGNITTZMeTkxYzJVdWRIbHdaV3RwZEM1dVpYUXZKMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hTNXpiMjFsS0NoMWNtd3BQVDVqTG5CeWIzQnpXeWRvY21WbUoxMHVjM1JoY25SelYybDBhQ2gxY213cFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WM1VISnZjSE1nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzR1TG1NdWNISnZjSE1nZkh3Z2UzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZDFCeWIzQnpXeWRrWVhSaExXaHlaV1luWFNBOUlHNWxkMUJ5YjNCeld5ZG9jbVZtSjEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNVSEp2Y0hOYkoyaHlaV1luWFNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJCWkdRZ2RHaHBjeUJoZEhSeWFXSjFkR1VnZEc4Z2JXRnJaU0JwZENCbFlYTjVJSFJ2SUdsa1pXNTBhV1o1SUc5d2RHbHRhWHBsWkNCMFlXZHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzVUhKdmNITmJKMlJoZEdFdGIzQjBhVzFwZW1Wa0xXWnZiblJ6SjEwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaWd2S2lOZlgxQlZVa1ZmWHlvdklGOXlaV0ZqZEM1a1pXWmhkV3gwTG1Oc2IyNWxSV3hsYldWdWRDaGpMQ0J1WlhkUWNtOXdjeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUE5UFQwZ0oyUmxkbVZzYjNCdFpXNTBKeUFtSmlCd2NtOWpaWE56TG1WdWRpNWZYMDVGV0ZSZlVrVkJRMVJmVWs5UFZDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiMjFwZENCS1UwOU9MVXhFSUhOMGNuVmpkSFZ5WldRZ1pHRjBZU0J6Ym1sd2NHVjBjeUJtY205dElIUm9aU0IzWVhKdWFXNW5YRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZeTUwZVhCbElEMDlQU0FuYzJOeWFYQjBKeUFtSmlCakxuQnliM0J6V3lkMGVYQmxKMTBnSVQwOUlDZGhjSEJzYVdOaGRHbHZiaTlzWkN0cWMyOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE55WTAxbGMzTmhaMlVnUFNCakxuQnliM0J6V3lkemNtTW5YU0EvSUdBOGMyTnlhWEIwUGlCMFlXY2dkMmwwYUNCemNtTTlYQ0lrZTJNdWNISnZjSE5iSjNOeVl5ZGRmVndpWUNBNklHQnBibXhwYm1VZ1BITmpjbWx3ZEQ1Z08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZ3dMQ0JmZFhScGJITXBMbmRoY201UGJtTmxLR0JFYnlCdWIzUWdZV1JrSUR4elkzSnBjSFErSUhSaFozTWdkWE5wYm1jZ2JtVjRkQzlvWldGa0lDaHpaV1VnSkh0emNtTk5aWE56WVdkbGZTa3VJRlZ6WlNCdVpYaDBMM05qY21sd2RDQnBibk4wWldGa0xpQmNYRzVUWldVZ2JXOXlaU0JwYm1adklHaGxjbVU2SUdoMGRIQnpPaTh2Ym1WNGRHcHpMbTl5Wnk5a2IyTnpMMjFsYzNOaFoyVnpMMjV2TFhOamNtbHdkQzEwWVdkekxXbHVMV2hsWVdRdFkyOXRjRzl1Wlc1MFlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHTXVkSGx3WlNBOVBUMGdKMnhwYm1zbklDWW1JR011Y0hKdmNITmJKM0psYkNkZElEMDlQU0FuYzNSNWJHVnphR1ZsZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9NQ3dnWDNWMGFXeHpLUzUzWVhKdVQyNWpaU2hnUkc4Z2JtOTBJR0ZrWkNCemRIbHNaWE5vWldWMGN5QjFjMmx1WnlCdVpYaDBMMmhsWVdRZ0tITmxaU0E4YkdsdWF5QnlaV3c5WENKemRIbHNaWE5vWldWMFhDSStJSFJoWnlCM2FYUm9JR2h5WldZOVhDSWtlMk11Y0hKdmNITmJKMmh5WldZblhYMWNJaWt1SUZWelpTQkViMk4xYldWdWRDQnBibk4wWldGa0xpQmNYRzVUWldVZ2JXOXlaU0JwYm1adklHaGxjbVU2SUdoMGRIQnpPaTh2Ym1WNGRHcHpMbTl5Wnk5a2IyTnpMMjFsYzNOaFoyVnpMMjV2TFhOMGVXeGxjMmhsWlhSekxXbHVMV2hsWVdRdFkyOXRjRzl1Wlc1MFlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUtDOHFJMTlmVUZWU1JWOWZLaThnWDNKbFlXTjBMbVJsWm1GMWJIUXVZMnh2Ym1WRmJHVnRaVzUwS0dNc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVWeHVJQ0FnSUNBZ0lDQjlLU2s3WEc0Z0lDQWdmU2s3WEc1OVhHNHZLaXBjYmlBcUlGUm9hWE1nWTI5dGNHOXVaVzUwSUdsdWFtVmpkSE1nWld4bGJXVnVkSE1nZEc4Z1lEeG9aV0ZrUG1BZ2IyWWdlVzkxY2lCd1lXZGxMbHh1SUNvZ1ZHOGdZWFp2YVdRZ1pIVndiR2xqWVhSbFpDQmdkR0ZuYzJBZ2FXNGdZRHhvWldGa1BtQWdlVzkxSUdOaGJpQjFjMlVnZEdobElHQnJaWGxnSUhCeWIzQmxjblI1TENCM2FHbGphQ0IzYVd4c0lHMWhhMlVnYzNWeVpTQmxkbVZ5ZVNCMFlXY2dhWE1nYjI1c2VTQnlaVzVrWlhKbFpDQnZibU5sTGx4dUlDb3ZJR1oxYm1OMGFXOXVJRWhsWVdRb2V5QmphR2xzWkhKbGJpQWdmU2tnZTF4dUlDQWdJR052Ym5OMElHRnRjRk4wWVhSbElEMGdLREFzSUY5eVpXRmpkQ2t1ZFhObFEyOXVkR1Y0ZENoZllXMXdRMjl1ZEdWNGRDNUJiWEJUZEdGMFpVTnZiblJsZUhRcE8xeHVJQ0FnSUdOdmJuTjBJR2hsWVdSTllXNWhaMlZ5SUQwZ0tEQXNJRjl5WldGamRDa3VkWE5sUTI5dWRHVjRkQ2hmYUdWaFpFMWhibUZuWlhKRGIyNTBaWGgwTGtobFlXUk5ZVzVoWjJWeVEyOXVkR1Y0ZENrN1hHNGdJQ0FnY21WMGRYSnVLQzhxSTE5ZlVGVlNSVjlmS2k4Z1gzSmxZV04wTG1SbFptRjFiSFF1WTNKbFlYUmxSV3hsYldWdWRDaGZjMmxrWlVWbVptVmpkQzVrWldaaGRXeDBMQ0I3WEc0Z0lDQWdJQ0FnSUhKbFpIVmpaVU52YlhCdmJtVnVkSE5VYjFOMFlYUmxPaUJ5WldSMVkyVkRiMjF3YjI1bGJuUnpMRnh1SUNBZ0lDQWdJQ0JvWldGa1RXRnVZV2RsY2pvZ2FHVmhaRTFoYm1GblpYSXNYRzRnSUNBZ0lDQWdJR2x1UVcxd1RXOWtaVG9nS0RBc0lGOWhiWEFwTG1selNXNUJiWEJOYjJSbEtHRnRjRk4wWVhSbEtWeHVJQ0FnSUgwc0lHTm9hV3hrY21WdUtTazdYRzU5WEc1MllYSWdYMlJsWm1GMWJIUWdQU0JJWldGa08xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYMlJsWm1GMWJIUTdYRzVjYm1sbUlDaDBlWEJsYjJZZ1pYaHdiM0owY3k1a1pXWmhkV3gwSUQwOVBTQW5ablZ1WTNScGIyNG5JSHg4SUNoMGVYQmxiMllnWlhod2IzSjBjeTVrWldaaGRXeDBJRDA5UFNBbmIySnFaV04wSnlBbUppQmxlSEJ2Y25SekxtUmxabUYxYkhRZ0lUMDlJRzUxYkd3cEtTQjdYRzRnSUU5aWFtVmpkQzVoYzNOcFoyNG9aWGh3YjNKMGN5NWtaV1poZFd4MExDQmxlSEJ2Y25SektUdGNiaUFnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JsZUhCdmNuUnpMbVJsWm1GMWJIUTdYRzU5WEc1Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV2hsWVdRdWFuTXViV0Z3SWwwc0ltNWhiV1Z6SWpwYklrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpYaHdiM0owY3lJc0luWmhiSFZsSWl3aVpHVm1ZWFZzZEVobFlXUWlMQ0pmY21WaFkzUWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVlhhV3hrWTJGeVpDSXNJbkpsY1hWcGNtVWlMQ0pmYzJsa1pVVm1abVZqZENJc0lsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKZllXMXdRMjl1ZEdWNGRDSXNJbDlvWldGa1RXRnVZV2RsY2tOdmJuUmxlSFFpTENKZllXMXdJaXdpWDNWMGFXeHpJaXdpYjJKcUlpd2lYMTlsYzAxdlpIVnNaU0lzSW01bGQwOWlhaUlzSW10bGVTSXNJbkJ5YjNSdmRIbHdaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWTJGc2JDSXNJbVJsYzJNaUxDSm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJaUxDSm5aWFFpTENKelpYUWlMQ0pwYmtGdGNFMXZaR1VpTENKb1pXRmtJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbU5vWVhKVFpYUWlMQ0p3ZFhOb0lpd2libUZ0WlNJc0ltTnZiblJsYm5RaUxDSnZibXg1VW1WaFkzUkZiR1Z0Wlc1MElpd2liR2x6ZENJc0ltTm9hV3hrSWl3aWRIbHdaU0lzSWtaeVlXZHRaVzUwSWl3aVkyOXVZMkYwSWl3aVEyaHBiR1J5Wlc0aUxDSjBiMEZ5Y21GNUlpd2ljSEp2Y0hNaUxDSmphR2xzWkhKbGJpSXNJbkpsWkhWalpTSXNJbVp5WVdkdFpXNTBUR2x6ZENJc0ltWnlZV2R0Wlc1MFEyaHBiR1FpTENKTlJWUkJWRmxRUlZNaUxDSjFibWx4ZFdVaUxDSnJaWGx6SWl3aVUyVjBJaXdpZEdGbmN5SXNJbTFsZEdGVWVYQmxjeUlzSW0xbGRHRkRZWFJsWjI5eWFXVnpJaXdpYUNJc0ltbHpWVzVwY1hWbElpd2lhR0Z6UzJWNUlpd2lhVzVrWlhoUFppSXNJbk5zYVdObElpd2lhR0Z6SWl3aVlXUmtJaXdpYVNJc0lteGxiaUlzSW14bGJtZDBhQ0lzSW0xbGRHRjBlWEJsSWl3aVkyRjBaV2R2Y25raUxDSmpZWFJsWjI5eWFXVnpJaXdpY21Wa2RXTmxRMjl0Y0c5dVpXNTBjeUlzSW1obFlXUkZiR1Z0Wlc1MGN5SXNJbWhsWVdSRmJHVnRaVzUwSWl3aWFHVmhaRVZzWlcxbGJuUkRhR2xzWkhKbGJpSXNJbkpsZG1WeWMyVWlMQ0ptYVd4MFpYSWlMQ0p0WVhBaUxDSmpJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJbDlmVGtWWVZGOVBVRlJKVFVsYVJWOUdUMDVVVXlJc0luTnZiV1VpTENKMWNtd2lMQ0p6ZEdGeWRITlhhWFJvSWl3aWJtVjNVSEp2Y0hNaUxDSjFibVJsWm1sdVpXUWlMQ0pqYkc5dVpVVnNaVzFsYm5RaUxDSmZYMDVGV0ZSZlVrVkJRMVJmVWs5UFZDSXNJbk55WTAxbGMzTmhaMlVpTENKM1lYSnVUMjVqWlNJc0lraGxZV1FpTENKaGJYQlRkR0YwWlNJc0luVnpaVU52Ym5SbGVIUWlMQ0pCYlhCVGRHRjBaVU52Ym5SbGVIUWlMQ0pvWldGa1RXRnVZV2RsY2lJc0lraGxZV1JOWVc1aFoyVnlRMjl1ZEdWNGRDSXNJbkpsWkhWalpVTnZiWEJ2Ym1WdWRITlViMU4wWVhSbElpd2lhWE5KYmtGdGNFMXZaR1VpTENKZlpHVm1ZWFZzZENJc0ltRnpjMmxuYmlJc0ltMXZaSFZzWlNKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9oZWFkLmpzXFxuXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXZhbChcIlxcblxcbnZhciBfdG9Db25zdW1hYmxlQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheSAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanNcXFwiKTtcXG5cXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXFxcIik7XFxuXFxudmFyIF9jcmVhdGVDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1xcXCIpO1xcblxcbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkICovIFxcXCIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcXFwiKTtcXG5cXG52YXIgX2luaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzXFxcIik7XFxuXFxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1xcXCIpO1xcblxcbnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZiAqLyBcXFwiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanNcXFwiKTtcXG5cXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXFxcInVuZGVmaW5lZFxcXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFxcXCJmdW5jdGlvblxcXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFxcXCJfX2VzTW9kdWxlXFxcIiwgKHtcXG4gIHZhbHVlOiB0cnVlXFxufSkpO1xcbmV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9IHZvaWQgMDtcXG5cXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gXFxcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzXFxcIikpO1xcblxcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xcbiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xcbiAgICByZXR1cm4gb2JqO1xcbiAgfSBlbHNlIHtcXG4gICAgdmFyIG5ld09iaiA9IHt9O1xcblxcbiAgICBpZiAob2JqICE9IG51bGwpIHtcXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XFxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xcbiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTtcXG5cXG4gICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XFxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIG5ld09ialtcXFwiZGVmYXVsdFxcXCJdID0gb2JqO1xcbiAgICByZXR1cm4gbmV3T2JqO1xcbiAgfVxcbn1cXG5cXG52YXIgaXNTZXJ2ZXIgPSBmYWxzZTtcXG5cXG52YXIgX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfcmVhY3QkQ29tcG9uZW50KSB7XFxuICBfaW5oZXJpdHMoX2NsYXNzLCBfcmVhY3QkQ29tcG9uZW50KTtcXG5cXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoX2NsYXNzKTtcXG5cXG4gIGZ1bmN0aW9uIF9jbGFzcyhwcm9wcykge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfY2xhc3MpO1xcblxcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcXG5cXG4gICAgX3RoaXMuZW1pdENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICBpZiAoX3RoaXMuX2hhc0hlYWRNYW5hZ2VyKSB7XFxuICAgICAgICBfdGhpcy5wcm9wcy5oZWFkTWFuYWdlci51cGRhdGVIZWFkKF90aGlzLnByb3BzLnJlZHVjZUNvbXBvbmVudHNUb1N0YXRlKF90b0NvbnN1bWFibGVBcnJheShfdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzKSwgX3RoaXMucHJvcHMpKTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIF90aGlzLl9oYXNIZWFkTWFuYWdlciA9IF90aGlzLnByb3BzLmhlYWRNYW5hZ2VyICYmIF90aGlzLnByb3BzLmhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXM7XFxuXFxuICAgIGlmIChpc1NlcnZlciAmJiBfdGhpcy5faGFzSGVhZE1hbmFnZXIpIHtcXG4gICAgICBfdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzLmFkZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XFxuXFxuICAgICAgX3RoaXMuZW1pdENoYW5nZSgpO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBfdGhpcztcXG4gIH1cXG5cXG4gIF9jcmVhdGVDbGFzcyhfY2xhc3MsIFt7XFxuICAgIGtleTogXFxcImNvbXBvbmVudERpZE1vdW50XFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xcbiAgICAgIGlmICh0aGlzLl9oYXNIZWFkTWFuYWdlcikge1xcbiAgICAgICAgdGhpcy5wcm9wcy5oZWFkTWFuYWdlci5tb3VudGVkSW5zdGFuY2VzLmFkZCh0aGlzKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5lbWl0Q2hhbmdlKCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiY29tcG9uZW50RGlkVXBkYXRlXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcXG4gICAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJjb21wb25lbnRXaWxsVW5tb3VudFxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcXG4gICAgICBpZiAodGhpcy5faGFzSGVhZE1hbmFnZXIpIHtcXG4gICAgICAgIHRoaXMucHJvcHMuaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlc1tcXFwiZGVsZXRlXFxcIl0odGhpcyk7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuZW1pdENoYW5nZSgpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcInJlbmRlclxcXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XFxuICAgICAgcmV0dXJuIG51bGw7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBfY2xhc3M7XFxufShfcmVhY3QuQ29tcG9uZW50KTtcXG5cXG5leHBvcnRzW1xcXCJkZWZhdWx0XFxcIl0gPSBfY2xhc3M7XFxuXFxuO1xcbiAgICAvLyBXcmFwcGVkIGluIGFuIElJRkUgdG8gYXZvaWQgcG9sbHV0aW5nIHRoZSBnbG9iYWwgc2NvcGVcXG4gICAgO1xcbiAgICAoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgdmFyIF9hLCBfYjtcXG4gICAgICAgIC8vIExlZ2FjeSBDU1MgaW1wbGVtZW50YXRpb25zIHdpbGwgYGV2YWxgIGJyb3dzZXIgY29kZSBpbiBhIE5vZGUuanMgY29udGV4dFxcbiAgICAgICAgLy8gdG8gZXh0cmFjdCBDU1MuIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgbmVlZCB0byBjaGVjayB3ZSdyZSBpbiBhXFxuICAgICAgICAvLyBicm93c2VyIGNvbnRleHQgYmVmb3JlIGNvbnRpbnVpbmcuXFxuICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmXFxuICAgICAgICAgICAgLy8gQU1QIC8gTm8tSlMgbW9kZSBkb2VzIG5vdCBpbmplY3QgdGhlc2UgaGVscGVyczpcXG4gICAgICAgICAgICAnJFJlZnJlc2hIZWxwZXJzJCcgaW4gc2VsZikge1xcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxcbiAgICAgICAgICAgIHZhciBjdXJyZW50RXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxcbiAgICAgICAgICAgIHZhciBwcmV2RXhwb3J0cyA9IChfYiA9IChfYSA9IG1vZHVsZS5ob3QuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByZXZFeHBvcnRzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xcbiAgICAgICAgICAgIC8vIFRoaXMgY2Fubm90IGhhcHBlbiBpbiBNYWluVGVtcGxhdGUgYmVjYXVzZSB0aGUgZXhwb3J0cyBtaXNtYXRjaCBiZXR3ZWVuXFxuICAgICAgICAgICAgLy8gdGVtcGxhdGluZyBhbmQgZXhlY3V0aW9uLlxcbiAgICAgICAgICAgIHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5yZWdpc3RlckV4cG9ydHNGb3JSZWFjdFJlZnJlc2goY3VycmVudEV4cG9ydHMsIG1vZHVsZS5pZCk7XFxuICAgICAgICAgICAgLy8gQSBtb2R1bGUgY2FuIGJlIGFjY2VwdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gaXRzIGV4cG9ydHMsIGUuZy4gd2hlblxcbiAgICAgICAgICAgIC8vIGl0IGlzIGEgUmVmcmVzaCBCb3VuZGFyeS5cXG4gICAgICAgICAgICBpZiAoc2VsZi4kUmVmcmVzaEhlbHBlcnMkLmlzUmVhY3RSZWZyZXNoQm91bmRhcnkoY3VycmVudEV4cG9ydHMpKSB7XFxuICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIHByZXZpb3VzIGV4cG9ydHMgb24gdXBkYXRlIHNvIHdlIGNhbiBjb21wYXJlIHRoZSBib3VuZGFyeVxcbiAgICAgICAgICAgICAgICAvLyBzaWduYXR1cmVzLlxcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJldkV4cG9ydHMgPSBjdXJyZW50RXhwb3J0cztcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIC8vIFVuY29uZGl0aW9uYWxseSBhY2NlcHQgYW4gdXBkYXRlIHRvIHRoaXMgbW9kdWxlLCB3ZSdsbCBjaGVjayBpZiBpdCdzXFxuICAgICAgICAgICAgICAgIC8vIHN0aWxsIGEgUmVmcmVzaCBCb3VuZGFyeSBsYXRlci5cXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBpbXBvcnRNZXRhIGlzIHJlcGxhY2VkIGluIHRoZSBsb2FkZXJcXG4gICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5hY2NlcHQoKTtcXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmaWVsZCBpcyBzZXQgd2hlbiB0aGUgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGlzIG1vZHVsZSB3YXMgYVxcbiAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIEJvdW5kYXJ5LCBsZXR0aW5nIHVzIGtub3cgd2UgbmVlZCB0byBjaGVjayBmb3IgaW52YWxpZGF0aW9uIG9yXFxuICAgICAgICAgICAgICAgIC8vIGVucXVldWUgYW4gdXBkYXRlLlxcbiAgICAgICAgICAgICAgICBpZiAocHJldkV4cG9ydHMgIT09IG51bGwpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYm91bmRhcnkgY2FuIGJlY29tZSBpbmVsaWdpYmxlIGlmIGl0cyBleHBvcnRzIGFyZSBpbmNvbXBhdGlibGVcXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpdGggdGhlIHByZXZpb3VzIGV4cG9ydHMuXFxuICAgICAgICAgICAgICAgICAgICAvL1xcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHlvdSBhZGQvcmVtb3ZlL2NoYW5nZSBleHBvcnRzLCB3ZSdsbCB3YW50IHRvXFxuICAgICAgICAgICAgICAgICAgICAvLyByZS1leGVjdXRlIHRoZSBpbXBvcnRpbmcgbW9kdWxlcywgYW5kIGZvcmNlIHRob3NlIGNvbXBvbmVudHMgdG9cXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlci4gU2ltaWxhcmx5LCBpZiB5b3UgY29udmVydCBhIGNsYXNzIGNvbXBvbmVudCB0byBhXFxuICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiwgd2Ugd2FudCB0byBpbnZhbGlkYXRlIHRoZSBib3VuZGFyeS5cXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuc2hvdWxkSW52YWxpZGF0ZVJlYWN0UmVmcmVzaEJvdW5kYXJ5KHByZXZFeHBvcnRzLCBjdXJyZW50RXhwb3J0cykpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zY2hlZHVsZVVwZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBqdXN0IGV4ZWN1dGVkIHRoZSBjb2RlIGZvciB0aGUgbW9kdWxlLCBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlXFxuICAgICAgICAgICAgICAgIC8vIG5ldyBleHBvcnRzIG1hZGUgaXQgaW5lbGlnaWJsZSBmb3IgYmVpbmcgYSBib3VuZGFyeS5cXG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSBjYXJlIGFib3V0IHRoZSBjYXNlIHdoZW4gd2Ugd2VyZSBfcHJldmlvdXNseV8gYSBib3VuZGFyeSxcXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBhbHJlYWR5IGFjY2VwdGVkIHRoaXMgdXBkYXRlIChhY2NpZGVudGFsIHNpZGUgZWZmZWN0KS5cXG4gICAgICAgICAgICAgICAgdmFyIGlzTm9Mb25nZXJBQm91bmRhcnkgPSBwcmV2RXhwb3J0cyAhPT0gbnVsbDtcXG4gICAgICAgICAgICAgICAgaWYgKGlzTm9Mb25nZXJBQm91bmRhcnkpIHtcXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9KSgpO1xcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXViMlJsWDIxdlpIVnNaWE12Ym1WNGRDOWthWE4wTDNOb1lYSmxaQzlzYVdJdmMybGtaUzFsWm1abFkzUXVhbk11YW5NaUxDSnRZWEJ3YVc1bmN5STZJa0ZCUVdFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJRMkpCTERoRFFVRTJRenRCUVVONlEwY3NSVUZCUVVFc1MwRkJTeXhGUVVGRk8wRkJSR3RETEVOQlFUZERPMEZCUjBGRUxHdENRVUZCTEVkQlFXdENMRXRCUVVzc1EwRkJka0k3TzBGQlEwRXNTVUZCU1VVc1RVRkJUU3hIUVVGSFF5eDFRa0ZCZFVJc1EwRkJRME1zYlVKQlFVOHNRMEZCUXl3MFEwRkJSQ3hEUVVGU0xFTkJRWEJET3p0QlFVTkJMRk5CUVZORUxIVkNRVUZVTEVOQlFXbERSU3hIUVVGcVF5eEZRVUZ6UXp0QlFVTnNReXhOUVVGSlFTeEhRVUZITEVsQlFVbEJMRWRCUVVjc1EwRkJRME1zVlVGQlppeEZRVUV5UWp0QlFVTjJRaXhYUVVGUFJDeEhRVUZRTzBGQlEwZ3NSMEZHUkN4TlFVVlBPMEZCUTBnc1VVRkJTVVVzVFVGQlRTeEhRVUZITEVWQlFXSTdPMEZCUTBFc1VVRkJTVVlzUjBGQlJ5eEpRVUZKTEVsQlFWZ3NSVUZCYVVJN1FVRkRZaXhYUVVGSkxFbEJRVWxITEVkQlFWSXNTVUZCWlVnc1IwRkJaaXhGUVVGdFFqdEJRVU5tTEZsQlFVbFFMRTFCUVUwc1EwRkJRMWNzVTBGQlVDeERRVUZwUWtNc1kwRkJha0lzUTBGQlowTkRMRWxCUVdoRExFTkJRWEZEVGl4SFFVRnlReXhGUVVFd1EwY3NSMEZCTVVNc1EwRkJTaXhGUVVGdlJEdEJRVU5vUkN4alFVRkpTU3hKUVVGSkxFZEJRVWRrTEUxQlFVMHNRMEZCUTBNc1kwRkJVQ3hKUVVGNVFrUXNUVUZCVFN4RFFVRkRaU3gzUWtGQmFFTXNSMEZCTWtSbUxFMUJRVTBzUTBGQlEyVXNkMEpCUVZBc1EwRkJaME5TTEVkQlFXaERMRVZCUVhGRFJ5eEhRVUZ5UXl4RFFVRXpSQ3hIUVVGMVJ5eEZRVUZzU0RzN1FVRkRRU3hqUVVGSlNTeEpRVUZKTEVOQlFVTkZMRWRCUVV3c1NVRkJXVVlzU1VGQlNTeERRVUZEUnl4SFFVRnlRaXhGUVVFd1FqdEJRVU4wUW1wQ0xGbEJRVUZCTEUxQlFVMHNRMEZCUTBNc1kwRkJVQ3hEUVVGelFsRXNUVUZCZEVJc1JVRkJPRUpETEVkQlFUbENMRVZCUVcxRFNTeEpRVUZ1UXp0QlFVTklMRmRCUmtRc1RVRkZUenRCUVVOSVRDeFpRVUZCUVN4TlFVRk5MRU5CUVVORExFZEJRVVFzUTBGQlRpeEhRVUZqU0N4SFFVRkhMRU5CUVVOSExFZEJRVVFzUTBGQmFrSTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTanM3UVVGRFJFUXNTVUZCUVVFc1RVRkJUU3hYUVVGT0xFZEJRV2xDUml4SFFVRnFRanRCUVVOQkxGZEJRVTlGTEUxQlFWQTdRVUZEU0R0QlFVTktPenRCUVVORUxFbEJRVTFUTEZGQlFWRXNVVUZCWkRzN1NVRkRUVU1zVFRzN096czdRVUZEUml4clFrRkJXVU1zUzBGQldpeEZRVUZyUWp0QlFVRkJPenRCUVVGQk96dEJRVU5rTERoQ1FVRk5RU3hMUVVGT096dEJRVU5CTEZWQlFVdERMRlZCUVV3c1IwRkJhMElzV1VGQlNUdEJRVU5zUWl4VlFVRkpMRTFCUVV0RExHVkJRVlFzUlVGQk1FSTdRVUZEZEVJc1kwRkJTMFlzUzBGQlRDeERRVUZYUnl4WFFVRllMRU5CUVhWQ1F5eFZRVUYyUWl4RFFVRnJReXhOUVVGTFNpeExRVUZNTEVOQlFWZExMSFZDUVVGWUxHOUNRVU16UWl4TlFVRkxUQ3hMUVVGTUxFTkJRVmRITEZkQlFWZ3NRMEZCZFVKSExHZENRVVJKTEVkQlJTOUNMRTFCUVV0T0xFdEJSakJDTEVOQlFXeERPMEZCUjBnN1FVRkRTaXhMUVU1RU96dEJRVTlCTEZWQlFVdEZMR1ZCUVV3c1IwRkJkVUlzVFVGQlMwWXNTMEZCVEN4RFFVRlhSeXhYUVVGWUxFbEJRVEJDTEUxQlFVdElMRXRCUVV3c1EwRkJWMGNzVjBGQldDeERRVUYxUWtjc1owSkJRWGhGT3p0QlFVTkJMRkZCUVVsU0xGRkJRVkVzU1VGQlNTeE5RVUZMU1N4bFFVRnlRaXhGUVVGelF6dEJRVU5zUXl4WlFVRkxSaXhMUVVGTUxFTkJRVmRITEZkQlFWZ3NRMEZCZFVKSExHZENRVUYyUWl4RFFVRjNRME1zUjBGQmVFTTdPMEZCUTBFc1dVRkJTMDRzVlVGQlREdEJRVU5JT3p0QlFXSmhPMEZCWTJwQ096czdPMWRCUTBRc05rSkJRVzlDTzBGQlEyaENMRlZCUVVrc1MwRkJTME1zWlVGQlZDeEZRVUV3UWp0QlFVTjBRaXhoUVVGTFJpeExRVUZNTEVOQlFWZEhMRmRCUVZnc1EwRkJkVUpITEdkQ1FVRjJRaXhEUVVGM1EwTXNSMEZCZUVNc1EwRkJORU1zU1VGQk5VTTdRVUZEU0RzN1FVRkRSQ3hYUVVGTFRpeFZRVUZNTzBGQlEwZzdPenRYUVVORUxEaENRVUZ4UWp0QlFVTnFRaXhYUVVGTFFTeFZRVUZNTzBGQlEwZzdPenRYUVVORUxHZERRVUYxUWp0QlFVTnVRaXhWUVVGSkxFdEJRVXRETEdWQlFWUXNSVUZCTUVJN1FVRkRkRUlzWVVGQlMwWXNTMEZCVEN4RFFVRlhSeXhYUVVGWUxFTkJRWFZDUnl4blFrRkJka0lzVjBGQkswTXNTVUZCTDBNN1FVRkRTRHM3UVVGRFJDeFhRVUZMVEN4VlFVRk1PMEZCUTBnN096dFhRVU5FTEd0Q1FVRlRPMEZCUTB3c1lVRkJUeXhKUVVGUU8wRkJRMGc3T3pzN1JVRnFRMmRDYWtJc1RVRkJUU3hEUVVGRGQwSXNVenM3UVVGdFF6VkNNVUlzYTBKQlFVRXNSMEZCYTBKcFFpeE5RVUZzUWlJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMTlPWDBVdkxpOXViMlJsWDIxdlpIVnNaWE12Ym1WNGRDOWthWE4wTDNOb1lYSmxaQzlzYVdJdmMybGtaUzFsWm1abFkzUXVhbk0vTkRBNFl5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJSFp2YVdRZ01EdGNiblpoY2lCZmNtVmhZM1FnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZYYVd4a1kyRnlaQ2h5WlhGMWFYSmxLRndpY21WaFkzUmNJaWtwTzF4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsVjJsc1pHTmhjbVFvYjJKcUtTQjdYRzRnSUNBZ2FXWWdLRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2IySnFPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkUFltb2dQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzlpYWlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJR3RsZVNCcGJpQnZZbW9wZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxTENCclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrWlhOaklEMGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1SUNZbUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lnUHlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRzlpYWl3Z2EyVjVLU0E2SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHVnpZeTVuWlhRZ2ZId2daR1Z6WXk1elpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodVpYZFBZbW9zSUd0bGVTd2daR1Z6WXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGRQWW1wYmEyVjVYU0E5SUc5aWFsdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzVsZDA5aWFpNWtaV1poZFd4MElEMGdiMkpxTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM1QySnFPMXh1SUNBZ0lIMWNibjFjYm1OdmJuTjBJR2x6VTJWeWRtVnlJRDBnZEhsd1pXOW1JSGRwYm1SdmR5QTlQVDBnSjNWdVpHVm1hVzVsWkNjN1hHNWpiR0Z6Y3lCZlkyeGhjM01nWlhoMFpXNWtjeUJmY21WaFkzUXVRMjl0Y0c5dVpXNTBJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh3Y205d2N5bDdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtIQnliM0J6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMFEyaGhibWRsSUQwZ0tDazlQbnRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOW9ZWE5JWldGa1RXRnVZV2RsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVhR1ZoWkUxaGJtRm5aWEl1ZFhCa1lYUmxTR1ZoWkNoMGFHbHpMbkJ5YjNCekxuSmxaSFZqWlVOdmJYQnZibVZ1ZEhOVWIxTjBZWFJsS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMaTR1ZEdocGN5NXdjbTl3Y3k1b1pXRmtUV0Z1WVdkbGNpNXRiM1Z1ZEdWa1NXNXpkR0Z1WTJWelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTd2dkR2hwY3k1d2NtOXdjeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlvWVhOSVpXRmtUV0Z1WVdkbGNpQTlJSFJvYVhNdWNISnZjSE11YUdWaFpFMWhibUZuWlhJZ0ppWWdkR2hwY3k1d2NtOXdjeTVvWldGa1RXRnVZV2RsY2k1dGIzVnVkR1ZrU1c1emRHRnVZMlZ6TzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5UWlhKMlpYSWdKaVlnZEdocGN5NWZhR0Z6U0dWaFpFMWhibUZuWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWFHVmhaRTFoYm1GblpYSXViVzkxYm5SbFpFbHVjM1JoYm1ObGN5NWhaR1FvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhSRGFHRnVaMlVvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyaGhjMGhsWVdSTllXNWhaMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1obFlXUk5ZVzVoWjJWeUxtMXZkVzUwWldSSmJuTjBZVzVqWlhNdVlXUmtLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRU5vWVc1blpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCamIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRU5vWVc1blpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCamIyMXdiMjVsYm5SWGFXeHNWVzV0YjNWdWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJoaGMwaGxZV1JOWVc1aFoyVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbWhsWVdSTllXNWhaMlZ5TG0xdmRXNTBaV1JKYm5OMFlXNWpaWE11WkdWc1pYUmxLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRU5vWVc1blpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibjFjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5amJHRnpjenRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzljMmxrWlMxbFptWmxZM1F1YW5NdWJXRndJbDBzSW01aGJXVnpJanBiSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlhod2IzSjBjeUlzSW5aaGJIVmxJaXdpWDNKbFlXTjBJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxWMmxzWkdOaGNtUWlMQ0p5WlhGMWFYSmxJaXdpYjJKcUlpd2lYMTlsYzAxdlpIVnNaU0lzSW01bGQwOWlhaUlzSW10bGVTSXNJbkJ5YjNSdmRIbHdaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWTJGc2JDSXNJbVJsYzJNaUxDSm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJaUxDSm5aWFFpTENKelpYUWlMQ0pwYzFObGNuWmxjaUlzSWw5amJHRnpjeUlzSW5CeWIzQnpJaXdpWlcxcGRFTm9ZVzVuWlNJc0lsOW9ZWE5JWldGa1RXRnVZV2RsY2lJc0ltaGxZV1JOWVc1aFoyVnlJaXdpZFhCa1lYUmxTR1ZoWkNJc0luSmxaSFZqWlVOdmJYQnZibVZ1ZEhOVWIxTjBZWFJsSWl3aWJXOTFiblJsWkVsdWMzUmhibU5sY3lJc0ltRmtaQ0lzSWtOdmJYQnZibVZ1ZENKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC5qc1xcblwiKTtcblxuLyoqKi8gfSlcblxufV0pOyJdLCJtYXBwaW5ncyI6IkFBQUEsYUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEcsc2pFQU9ZO21IQU5aLENBQUNBLElBQUksQ0FBQyxrQkFBRCxDQUFKLENBQTJCLDRCQUFBQSxJQUFJLENBQUMsa0JBQUQsQ0FBSiwrQkFBNEIsRUFBNUIsQ0FBNUIsRUFBNERDLElBQTVELENBQWlFLENBQUMsQ0FBQyx3Q0FBRCxDQUFELENBQTRDLENBRTdHLEtBQU0sMkNBQ047QUFDQTtBQUNBLG9EQUhNLENBSU4sS0FBTyxTQUFTQyxNQUFULENBQWlCQyxPQUFqQixDQUEwQkMsbUJBQTFCLENBQStDLGlEQUV0REMsSUFBSSxDQUFDLHVnbEJBQUQsQ0FBSixDQUVBLEtBQU8sQ0FWc0csQ0FZN0csS0FBTSxxREFDTjtBQUNBO0FBQ0EsOERBSE0sQ0FJTixLQUFPLFNBQVNILE1BQVQsQ0FBaUJDLE9BQWpCLENBQTBCQyxtQkFBMUIsQ0FBK0MsaURBRXREQyxJQUFJLENBQUMsbXZMQUFELENBQUosQ0FFQSxLQUFPLENBcEJzRyxDQXNCN0csS0FBTSw2Q0FDTjtBQUNBO0FBQ0Esc0RBSE0sQ0FJTixLQUFPLFNBQVNILE1BQVQsQ0FBaUJDLE9BQWpCLENBQTBCQyxtQkFBMUIsQ0FBK0MsaURBRXREQyxJQUFJLENBQUMsNjBQQUFELENBQUosQ0FFQSxLQUFPLENBOUJzRyxDQWdDN0csS0FBTSw4Q0FDTjtBQUNBO0FBQ0EsdURBSE0sQ0FJTixLQUFPLFNBQVNILE1BQVQsQ0FBaUJDLE9BQWpCLENBQTBCQyxtQkFBMUIsQ0FBK0MsaURBRXREQyxJQUFJLENBQUMscTgrQkFBRCxDQUFKLENBRUEsS0FBTyxDQXhDc0csQ0EwQzdHLEtBQU0scURBQ047QUFDQTtBQUNBLDhEQUhNLENBSU4sS0FBTyxTQUFTSCxNQUFULENBQWlCQyxPQUFqQixDQUEwQkMsbUJBQTFCLENBQStDLGlEQUV0REMsSUFBSSxDQUFDLDA1YkFBRCxDQUFKLENBRUEsS0FBTyxDQWxEc0csQ0FBNUMsQ0FBakUifQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,