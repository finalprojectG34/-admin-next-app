"use strict";/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */function cov_1gsj9z4fgx(){var path="C:\\Users\\nathn\\Desktop\\final project\\admin-next-app\\.next\\server\\pages\\_error.js";var hash="b2db03effe3c95fa4ee5176d31cda5e8ea493098";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\nathn\\Desktop\\final project\\admin-next-app\\.next\\server\\pages\\_error.js",statementMap:{"0":{start:{line:10,column:0},end:{line:56,column:5}},"1":{start:{line:11,column:14},end:{line:11,column:16}},"2":{start:{line:12,column:0},end:{line:12,column:28}},"3":{start:{line:13,column:0},end:{line:13,column:31}},"4":{start:{line:14,column:0},end:{line:46,column:2}},"5":{start:{line:22,column:0},end:{line:22,column:13481}},"6":{start:{line:32,column:0},end:{line:32,column:57}},"7":{start:{line:42,column:0},end:{line:42,column:34}},"8":{start:{line:50,column:26},end:{line:50,column:58}},"9":{start:{line:51,column:0},end:{line:51,column:31}},"10":{start:{line:52,column:23},end:{line:52,column:92}},"11":{start:{line:52,column:38},end:{line:52,column:91}},"12":{start:{line:53,column:27},end:{line:53,column:87}},"13":{start:{line:54,column:0},end:{line:54,column:37}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:1},end:{line:10,column:2}},loc:{start:{line:10,column:7},end:{line:56,column:1}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:7},end:{line:20,column:8}},loc:{start:{line:20,column:66},end:{line:24,column:7}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:30,column:7},end:{line:30,column:8}},loc:{start:{line:30,column:19},end:{line:34,column:7}},line:30},"3":{name:"(anonymous_3)",decl:{start:{line:40,column:7},end:{line:40,column:8}},loc:{start:{line:40,column:19},end:{line:44,column:7}},line:40},"4":{name:"(anonymous_4)",decl:{start:{line:52,column:23},end:{line:52,column:24}},loc:{start:{line:52,column:38},end:{line:52,column:91}},line:52}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b2db03effe3c95fa4ee5176d31cda5e8ea493098"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1gsj9z4fgx=function(){return actualCoverage;};}return actualCoverage;}cov_1gsj9z4fgx();cov_1gsj9z4fgx().s[0]++;(()=>{cov_1gsj9z4fgx().f[0]++;var exports=(cov_1gsj9z4fgx().s[1]++,{});cov_1gsj9z4fgx().s[2]++;exports.id="pages/_error";cov_1gsj9z4fgx().s[3]++;exports.ids=["pages/_error"];cov_1gsj9z4fgx().s[4]++;exports.modules={/***/"./node_modules/next/dist/pages/_error.js":/*!************************************************!*\
  !*** ./node_modules/next/dist/pages/_error.js ***!
  \************************************************/ /***/(__unused_webpack_module,exports,__webpack_require__)=>{cov_1gsj9z4fgx().f[1]++;cov_1gsj9z4fgx().s[5]++;eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _head = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/head */ \"../shared/lib/head\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst statusCodes = {\n  400: 'Bad Request',\n  404: 'This page could not be found',\n  405: 'Method Not Allowed',\n  500: 'Internal Server Error'\n};\n\nfunction _getInitialProps({\n  res,\n  err\n}) {\n  const statusCode = res && res.statusCode ? res.statusCode : err ? err.statusCode : 404;\n  return {\n    statusCode\n  };\n}\n\nclass Error extends _react.default.Component {\n  render() {\n    const {\n      statusCode\n    } = this.props;\n    const title = this.props.title || statusCodes[statusCode] || 'An unexpected error has occurred';\n    return /*#__PURE__*/_react.default.createElement(\"div\", {\n      style: styles.error\n    }, /*#__PURE__*/_react.default.createElement(_head.default, null, /*#__PURE__*/_react.default.createElement(\"title\", null, statusCode ? `${statusCode}: ${title}` : 'Application error: a client-side exception has occurred')), /*#__PURE__*/_react.default.createElement(\"div\", null, /*#__PURE__*/_react.default.createElement(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: `\n                body { margin: 0; color: #000; background: #fff; }\n                .next-error-h1 {\n                  border-right: 1px solid rgba(0, 0, 0, .3);\n                }\n                @media (prefers-color-scheme: dark) {\n                  body { color: #fff; background: #000; }\n                  .next-error-h1 {\n                    border-right: 1px solid rgba(255, 255, 255, .3);\n                  }\n                }`\n      }\n    }), statusCode ? /*#__PURE__*/_react.default.createElement(\"h1\", {\n      className: \"next-error-h1\",\n      style: styles.h1\n    }, statusCode) : null, /*#__PURE__*/_react.default.createElement(\"div\", {\n      style: styles.desc\n    }, /*#__PURE__*/_react.default.createElement(\"h2\", {\n      style: styles.h2\n    }, this.props.title || statusCode ? title : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, \"Application error: a client-side exception has occurred (see the browser console for more information)\"), \".\"))));\n  }\n\n}\n\nexports[\"default\"] = Error;\nError.displayName = 'ErrorPage';\nError.getInitialProps = _getInitialProps;\nError.origGetInitialProps = _getInitialProps;\nconst styles = {\n  error: {\n    fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, \"Segoe UI\", \"Fira Sans\", Avenir, \"Helvetica Neue\", \"Lucida Grande\", sans-serif',\n    height: '100vh',\n    textAlign: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  desc: {\n    display: 'inline-block',\n    textAlign: 'left',\n    lineHeight: '49px',\n    height: '49px',\n    verticalAlign: 'middle'\n  },\n  h1: {\n    display: 'inline-block',\n    margin: 0,\n    marginRight: '20px',\n    padding: '10px 23px 10px 0',\n    fontSize: '24px',\n    fontWeight: 500,\n    verticalAlign: 'top'\n  },\n  h2: {\n    fontSize: '14px',\n    fontWeight: 'normal',\n    lineHeight: 'inherit',\n    margin: 0,\n    padding: 0\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/pages/_error.js\n");/***/},/***/"../shared/lib/head":/*!***********************************************!*\
  !*** external "next/dist/shared/lib/head.js" ***!
  \***********************************************/ /***/module=>{cov_1gsj9z4fgx().f[2]++;cov_1gsj9z4fgx().s[6]++;module.exports=require("next/dist/shared/lib/head.js");/***/},/***/"react":/*!************************!*\
  !*** external "react" ***!
  \************************/ /***/module=>{cov_1gsj9z4fgx().f[3]++;cov_1gsj9z4fgx().s[7]++;module.exports=require("react");/***/}};;// load runtime
var __webpack_require__=(cov_1gsj9z4fgx().s[8]++,require("../webpack-runtime.js"));cov_1gsj9z4fgx().s[9]++;__webpack_require__.C(exports);cov_1gsj9z4fgx().s[10]++;var __webpack_exec__=moduleId=>{cov_1gsj9z4fgx().f[4]++;cov_1gsj9z4fgx().s[11]++;return __webpack_require__(__webpack_require__.s=moduleId);};var __webpack_exports__=(cov_1gsj9z4fgx().s[12]++,__webpack_exec__("./node_modules/next/dist/pages/_error.js"));cov_1gsj9z4fgx().s[13]++;module.exports=__webpack_exports__;})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,